<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.5.2" created="2016-06-09 12:47" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>The Coffee Workshop</title>
	<link>http://www.blog2.arkey.fr</link>
	<description>don&#039;t waste your time</description>
	<pubDate>Thu, 09 Jun 2016 12:47:04 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.blog2.arkey.fr</wp:base_site_url>
	<wp:base_blog_url>http://www.blog2.arkey.fr</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[brice]]></wp:author_login><wp:author_email><![CDATA[brice.dutheil@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Brice Dutheil]]></wp:author_display_name><wp:author_first_name><![CDATA[Brice]]></wp:author_first_name><wp:author_last_name><![CDATA[Dutheil]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename><![CDATA[agilite]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[agilité]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename><![CDATA[architecture]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[architecture]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename><![CDATA[aspectj]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[aspectj]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename><![CDATA[code]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[code]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename><![CDATA[design]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[design]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename><![CDATA[maven]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[maven]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename><![CDATA[mco]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[mco]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>10</wp:term_id><wp:category_nicename><![CDATA[miscellanees]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[miscellanées]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>11</wp:term_id><wp:category_nicename><![CDATA[pattern]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[pattern]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename><![CDATA[performance]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[performance]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename><![CDATA[perso]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[perso]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename><![CDATA[prod]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[prod]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>15</wp:term_id><wp:category_nicename><![CDATA[tdd]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[TDD]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>89</wp:term_id><wp:category_nicename><![CDATA[tips]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[tips]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug><![CDATA[adam-bien]]></wp:tag_slug><wp:tag_name><![CDATA[adam bien]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug><![CDATA[agile]]></wp:tag_slug><wp:tag_name><![CDATA[agile]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>93</wp:term_id><wp:tag_slug><![CDATA[agilite]]></wp:tag_slug><wp:tag_name><![CDATA[agilité]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug><![CDATA[ant]]></wp:tag_slug><wp:tag_name><![CDATA[ant]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>94</wp:term_id><wp:tag_slug><![CDATA[architecture]]></wp:tag_slug><wp:tag_name><![CDATA[architecture]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>95</wp:term_id><wp:tag_slug><![CDATA[aspectj]]></wp:tag_slug><wp:tag_name><![CDATA[aspectj]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>77</wp:term_id><wp:tag_slug><![CDATA[big-o]]></wp:tag_slug><wp:tag_name><![CDATA[big o]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug><![CDATA[cailper]]></wp:tag_slug><wp:tag_name><![CDATA[cailper]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug><![CDATA[cdi]]></wp:tag_slug><wp:tag_name><![CDATA[cdi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug><![CDATA[cglib]]></wp:tag_slug><wp:tag_name><![CDATA[cglib]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>96</wp:term_id><wp:tag_slug><![CDATA[code]]></wp:tag_slug><wp:tag_name><![CDATA[code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>76</wp:term_id><wp:tag_slug><![CDATA[complexity]]></wp:tag_slug><wp:tag_name><![CDATA[complexity]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug><![CDATA[constructor-injection]]></wp:tag_slug><wp:tag_name><![CDATA[constructor injection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug><![CDATA[contrat]]></wp:tag_slug><wp:tag_name><![CDATA[contrat]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug><![CDATA[control]]></wp:tag_slug><wp:tag_name><![CDATA[control]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>91</wp:term_id><wp:tag_slug><![CDATA[ddl]]></wp:tag_slug><wp:tag_name><![CDATA[ddl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>97</wp:term_id><wp:tag_slug><![CDATA[design]]></wp:tag_slug><wp:tag_name><![CDATA[design]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug><![CDATA[di]]></wp:tag_slug><wp:tag_name><![CDATA[di]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>107</wp:term_id><wp:tag_slug><![CDATA[entropie]]></wp:tag_slug><wp:tag_name><![CDATA[entropie]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>108</wp:term_id><wp:tag_slug><![CDATA[entropy]]></wp:tag_slug><wp:tag_name><![CDATA[entropy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug><![CDATA[equals]]></wp:tag_slug><wp:tag_name><![CDATA[equals]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug><![CDATA[expression-reguliere]]></wp:tag_slug><wp:tag_name><![CDATA[expression régulière]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>106</wp:term_id><wp:tag_slug><![CDATA[firewall]]></wp:tag_slug><wp:tag_name><![CDATA[firewall]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug><![CDATA[fuite]]></wp:tag_slug><wp:tag_name><![CDATA[fuite]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug><![CDATA[google-collections]]></wp:tag_slug><wp:tag_name><![CDATA[google-collections]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug><![CDATA[hashcode]]></wp:tag_slug><wp:tag_name><![CDATA[hashcode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>88</wp:term_id><wp:tag_slug><![CDATA[heap-dump]]></wp:tag_slug><wp:tag_name><![CDATA[heap dump]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>67</wp:term_id><wp:tag_slug><![CDATA[hibernate]]></wp:tag_slug><wp:tag_name><![CDATA[hibernate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug><![CDATA[infinitest]]></wp:tag_slug><wp:tag_name><![CDATA[infinitest]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug><![CDATA[injection-de-dependance]]></wp:tag_slug><wp:tag_name><![CDATA[injection de dépendance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>84</wp:term_id><wp:tag_slug><![CDATA[instrumentation]]></wp:tag_slug><wp:tag_name><![CDATA[instrumentation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug><![CDATA[intellij]]></wp:tag_slug><wp:tag_name><![CDATA[intellij]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug><![CDATA[introspection]]></wp:tag_slug><wp:tag_name><![CDATA[introspection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug><![CDATA[j2se-5-0]]></wp:tag_slug><wp:tag_name><![CDATA[j2se 5.0]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug><![CDATA[java]]></wp:tag_slug><wp:tag_name><![CDATA[java]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug><![CDATA[java5]]></wp:tag_slug><wp:tag_name><![CDATA[java5]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug><![CDATA[java6]]></wp:tag_slug><wp:tag_name><![CDATA[java6]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug><![CDATA[java7]]></wp:tag_slug><wp:tag_name><![CDATA[java7]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>92</wp:term_id><wp:tag_slug><![CDATA[java8]]></wp:tag_slug><wp:tag_name><![CDATA[java8]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>103</wp:term_id><wp:tag_slug><![CDATA[jdbc]]></wp:tag_slug><wp:tag_name><![CDATA[jdbc]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug><![CDATA[jdk5]]></wp:tag_slug><wp:tag_name><![CDATA[jdk5]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug><![CDATA[jdk6]]></wp:tag_slug><wp:tag_name><![CDATA[jdk6]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug><![CDATA[jdk7]]></wp:tag_slug><wp:tag_name><![CDATA[jdk7]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug><![CDATA[jee6]]></wp:tag_slug><wp:tag_name><![CDATA[jee6]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug><![CDATA[jenkins]]></wp:tag_slug><wp:tag_name><![CDATA[jenkins]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>85</wp:term_id><wp:tag_slug><![CDATA[jmap]]></wp:tag_slug><wp:tag_name><![CDATA[jmap]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug><![CDATA[jmx]]></wp:tag_slug><wp:tag_name><![CDATA[jmx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug><![CDATA[joda-time]]></wp:tag_slug><wp:tag_name><![CDATA[joda-time]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>90</wp:term_id><wp:tag_slug><![CDATA[jpa]]></wp:tag_slug><wp:tag_name><![CDATA[jpa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug><![CDATA[jsr299]]></wp:tag_slug><wp:tag_name><![CDATA[jsr299]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>86</wp:term_id><wp:tag_slug><![CDATA[jstack]]></wp:tag_slug><wp:tag_name><![CDATA[jstack]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug><![CDATA[jvisualvm]]></wp:tag_slug><wp:tag_name><![CDATA[jvisualvm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>105</wp:term_id><wp:tag_slug><![CDATA[keepalive]]></wp:tag_slug><wp:tag_name><![CDATA[keepalive]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug><![CDATA[lion]]></wp:tag_slug><wp:tag_name><![CDATA[lion]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug><![CDATA[macosx]]></wp:tag_slug><wp:tag_name><![CDATA[macosx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>98</wp:term_id><wp:tag_slug><![CDATA[maven]]></wp:tag_slug><wp:tag_name><![CDATA[maven]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug><![CDATA[measure]]></wp:tag_slug><wp:tag_name><![CDATA[measure]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>75</wp:term_id><wp:tag_slug><![CDATA[memory]]></wp:tag_slug><wp:tag_name><![CDATA[memory]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug><![CDATA[memoryleak]]></wp:tag_slug><wp:tag_name><![CDATA[memoryleak]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>74</wp:term_id><wp:tag_slug><![CDATA[metrics]]></wp:tag_slug><wp:tag_name><![CDATA[metrics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug><![CDATA[microbenchmark]]></wp:tag_slug><wp:tag_name><![CDATA[microbenchmark]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug><![CDATA[mockito]]></wp:tag_slug><wp:tag_name><![CDATA[mockito]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug><![CDATA[mountain-lion]]></wp:tag_slug><wp:tag_name><![CDATA[mountain lion]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug><![CDATA[open-source]]></wp:tag_slug><wp:tag_name><![CDATA[open source]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>104</wp:term_id><wp:tag_slug><![CDATA[oracle]]></wp:tag_slug><wp:tag_name><![CDATA[oracle]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug><![CDATA[outofmemoryerror]]></wp:tag_slug><wp:tag_name><![CDATA[OutOfMemoryError]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug><![CDATA[pair-programming]]></wp:tag_slug><wp:tag_name><![CDATA[pair-programming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>99</wp:term_id><wp:tag_slug><![CDATA[pattern]]></wp:tag_slug><wp:tag_name><![CDATA[pattern]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug><![CDATA[perfo]]></wp:tag_slug><wp:tag_name><![CDATA[perfo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>100</wp:term_id><wp:tag_slug><![CDATA[performance]]></wp:tag_slug><wp:tag_name><![CDATA[performance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug><![CDATA[pomodoro]]></wp:tag_slug><wp:tag_name><![CDATA[pomodoro]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug><![CDATA[properties]]></wp:tag_slug><wp:tag_name><![CDATA[properties]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug><![CDATA[proxy]]></wp:tag_slug><wp:tag_name><![CDATA[proxy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>109</wp:term_id><wp:tag_slug><![CDATA[random]]></wp:tag_slug><wp:tag_name><![CDATA[random]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug><![CDATA[reflection]]></wp:tag_slug><wp:tag_name><![CDATA[reflection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug><![CDATA[regex]]></wp:tag_slug><wp:tag_name><![CDATA[regex]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug><![CDATA[regexp]]></wp:tag_slug><wp:tag_name><![CDATA[regexp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug><![CDATA[regular-expression]]></wp:tag_slug><wp:tag_name><![CDATA[regular expression]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug><![CDATA[scrum]]></wp:tag_slug><wp:tag_name><![CDATA[scrum]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug><![CDATA[spring]]></wp:tag_slug><wp:tag_name><![CDATA[spring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>101</wp:term_id><wp:tag_slug><![CDATA[tdd]]></wp:tag_slug><wp:tag_name><![CDATA[TDD]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug><![CDATA[template]]></wp:tag_slug><wp:tag_name><![CDATA[template]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug><![CDATA[test]]></wp:tag_slug><wp:tag_name><![CDATA[test]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug><![CDATA[test-unitaire]]></wp:tag_slug><wp:tag_name><![CDATA[test unitaire]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>87</wp:term_id><wp:tag_slug><![CDATA[thread-dump]]></wp:tag_slug><wp:tag_name><![CDATA[thread dump]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug><![CDATA[unicode]]></wp:tag_slug><wp:tag_name><![CDATA[unicode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug><![CDATA[visualvm]]></wp:tag_slug><wp:tag_name><![CDATA[visualvm]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id><![CDATA[16]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[adam-bien]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[adam bien]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[17]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[agile]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[agile]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[3]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[agilite]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[agilité]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[93]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[agilite]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[agilité]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[80]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[ant]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[ant]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[4]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[architecture]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[architecture]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[94]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[architecture]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[architecture]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[5]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[aspectj]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[aspectj]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[95]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[aspectj]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[aspectj]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[77]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[big-o]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[big o]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[78]]></wp:term_id><wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy><wp:term_slug><![CDATA[blog]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Blog]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[2]]></wp:term_id><wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy><wp:term_slug><![CDATA[blogroll]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Blogroll]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[72]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[cailper]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[cailper]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[18]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[cdi]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[cdi]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[53]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[cglib]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[cglib]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[6]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[code]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[code]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[96]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[code]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[code]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[76]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[complexity]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[complexity]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[19]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[constructor-injection]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[constructor injection]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[20]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[contrat]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[contrat]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[21]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[control]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[control]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[49]]></wp:term_id><wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy><wp:term_slug><![CDATA[cqrs]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[CQRS]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[91]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[ddl]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[ddl]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[7]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[design]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[design]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[97]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[design]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[design]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[22]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[di]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[di]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[107]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[entropie]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[entropie]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[108]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[entropy]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[entropy]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[23]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[equals]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[equals]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[24]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[expression-reguliere]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[expression régulière]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[106]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[firewall]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[firewall]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[25]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[fuite]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[fuite]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[26]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[google-collections]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[google-collections]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[27]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[hashcode]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[hashcode]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[88]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[heap-dump]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[heap dump]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[67]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[hibernate]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[hibernate]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[66]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[infinitest]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[infinitest]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[28]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[injection-de-dependance]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[injection de dépendance]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[84]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[instrumentation]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[instrumentation]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[62]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[intellij]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[intellij]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[55]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[introspection]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[introspection]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[70]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[j2se-5-0]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[j2se 5.0]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[29]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[java]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[java]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[102]]></wp:term_id><wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy><wp:term_slug><![CDATA[java]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[java]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[71]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[java5]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[java5]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[58]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[java6]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[java6]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[59]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[java7]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[java7]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[92]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[java8]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[java8]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[103]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jdbc]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jdbc]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[51]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jdk5]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jdk5]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[56]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jdk6]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jdk6]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[57]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jdk7]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jdk7]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[30]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jee6]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jee6]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[68]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jenkins]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jenkins]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[85]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jmap]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jmap]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[60]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jmx]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jmx]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[31]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[joda-time]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[joda-time]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[90]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jpa]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jpa]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[32]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jsr299]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jsr299]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[86]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jstack]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jstack]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[82]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[jvisualvm]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[jvisualvm]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[105]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[keepalive]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[keepalive]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[48]]></wp:term_id><wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy><wp:term_slug><![CDATA[leszindeps]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[lesZindeps]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[52]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[lion]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[lion]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[50]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[macosx]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[macosx]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[8]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[maven]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[maven]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[98]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[maven]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[maven]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[9]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[mco]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[mco]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[73]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[measure]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[measure]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[75]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[memory]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[memory]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[33]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[memoryleak]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[memoryleak]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[74]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[metrics]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[metrics]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[54]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[microbenchmark]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[microbenchmark]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[10]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[miscellanees]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[miscellanées]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[34]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[mockito]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[mockito]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[69]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[mountain-lion]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[mountain lion]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[65]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[open-source]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[open source]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[104]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[oracle]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[oracle]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[35]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[outofmemoryerror]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[OutOfMemoryError]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[36]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[pair-programming]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[pair-programming]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[11]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[pattern]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[pattern]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[99]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[pattern]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[pattern]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[37]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[perfo]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[perfo]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[12]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[performance]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[performance]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[100]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[performance]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[performance]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[13]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[perso]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[perso]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[38]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[pomodoro]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[pomodoro]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[14]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[prod]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[prod]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[81]]></wp:term_id><wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy><wp:term_slug><![CDATA[projets]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Projets]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[79]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[properties]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[properties]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[39]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[proxy]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[proxy]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[109]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[random]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[random]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[40]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[reflection]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[reflection]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[41]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[regex]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[regex]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[42]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[regexp]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[regexp]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[43]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[regular-expression]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[regular expression]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[44]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[scrum]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[scrum]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[47]]></wp:term_id><wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy><wp:term_slug><![CDATA[software-craftsmanship]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Software Craftsmanship]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[45]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[spring]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[spring]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[15]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[tdd]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[TDD]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[101]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[tdd]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[TDD]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[64]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[template]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[template]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[63]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[test]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[test]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[61]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[test-unitaire]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[test unitaire]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[87]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[thread-dump]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[thread dump]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[89]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[tips]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[tips]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[1]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[uncategorized]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Uncategorized]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[46]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[unicode]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[unicode]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[83]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[visualvm]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[visualvm]]></wp:term_name></wp:term>
	<wp:term><wp:term_id>78</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[blog]]></wp:term_slug><wp:term_name><![CDATA[Blog]]></wp:term_name></wp:term>

	<generator>https://wordpress.org/?v=4.5.2</generator>

	<item>
		<title>visualvm-mon</title>
		<link>http://www.blog2.arkey.fr/2010/02/12/une-fuite-memoire-beaucoup-de-reflection-et-pas-de-outofmemoryerror/visualvm-mon-2/</link>
		<pubDate>Sun, 28 Feb 2010 00:39:42 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/02/visualvm-mon1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2010-02-28 01:39:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-28 00:39:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[visualvm-mon-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>41</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/02/visualvm-mon1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/02/visualvm-mon1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"994";s:6:"height";s:3:"726";s:14:"hwstring_small";s:23:"height='93' width='128'";s:4:"file";s:25:"2010/02/visualvm-mon1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:25:"visualvm-mon1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:25:"visualvm-mon1-300x219.png";s:5:"width";s:3:"300";s:6:"height";s:3:"219";}s:14:"post-thumbnail";a:3:{s:4:"file";s:25:"visualvm-mon1-994x288.png";s:5:"width";s:3:"994";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:25:"visualvm-mon1-994x288.png";s:5:"width";s:3:"994";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:25:"visualvm-mon1-410x300.png";s:5:"width";s:3:"410";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gc</title>
		<link>http://www.blog2.arkey.fr/2010/02/12/une-fuite-memoire-beaucoup-de-reflection-et-pas-de-outofmemoryerror/gc-2/</link>
		<pubDate>Sun, 28 Feb 2010 00:41:03 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/02/gc1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2010-02-28 01:41:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-28 00:41:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gc-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>41</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/02/gc1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/02/gc1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1085";s:6:"height";s:3:"703";s:14:"hwstring_small";s:23:"height='82' width='128'";s:4:"file";s:15:"2010/02/gc1.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:3:{s:4:"file";s:15:"gc1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:15:"gc1-300x194.png";s:5:"width";s:3:"300";s:6:"height";s:3:"194";}s:5:"large";a:3:{s:4:"file";s:16:"gc1-1024x663.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"663";}s:14:"post-thumbnail";a:3:{s:4:"file";s:16:"gc1-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:16:"gc1-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:15:"gc1-463x300.png";s:5:"width";s:3:"463";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>application-gc</title>
		<link>http://www.blog2.arkey.fr/2010/02/12/une-fuite-memoire-beaucoup-de-reflection-et-pas-de-outofmemoryerror/application-gc/</link>
		<pubDate>Mon, 01 Mar 2010 09:48:57 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/02/application-gc.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2010-03-01 10:48:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-01 09:48:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[application-gc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>41</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/02/application-gc.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/02/application-gc.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"853";s:6:"height";s:3:"671";s:14:"hwstring_small";s:23:"height='96' width='122'";s:4:"file";s:26:"2010/02/application-gc.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"application-gc-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"application-gc-300x235.png";s:5:"width";s:3:"300";s:6:"height";s:3:"235";}s:14:"post-thumbnail";a:3:{s:4:"file";s:26:"application-gc-853x288.png";s:5:"width";s:3:"853";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:26:"application-gc-853x288.png";s:5:"width";s:3:"853";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:26:"application-gc-381x300.png";s:5:"width";s:3:"381";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fail</title>
		<link>http://www.blog2.arkey.fr/fail/</link>
		<pubDate>Tue, 30 Mar 2010 13:22:40 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/02/fail.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date><![CDATA[2010-03-30 14:22:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-30 13:22:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fail]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/02/fail.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/02/fail.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"534";s:6:"height";s:3:"371";s:14:"hwstring_small";s:23:"height='88' width='128'";s:4:"file";s:16:"2010/02/fail.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:16:"fail-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:16:"fail-300x208.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"208";}s:14:"post-thumbnail";a:3:{s:4:"file";s:16:"fail-534x288.jpg";s:5:"width";s:3:"534";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:16:"fail-534x288.jpg";s:5:"width";s:3:"534";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:16:"fail-431x300.jpg";s:5:"width";s:3:"431";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pwned</title>
		<link>http://www.blog2.arkey.fr/pwned/</link>
		<pubDate>Tue, 30 Mar 2010 13:45:08 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/02/pwned.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date><![CDATA[2010-03-30 14:45:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-30 13:45:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pwned]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/02/pwned.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/02/pwned.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"225";s:6:"height";s:3:"168";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:17:"2010/02/pwned.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:17:"pwned-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VisiteurAcyclique</title>
		<link>http://www.blog2.arkey.fr/2010/05/06/les-visiteurs-une-question-de-nommage-et-le-double-dispatch/visiteuracyclique/</link>
		<pubDate>Thu, 06 May 2010 13:25:16 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/05/VisiteurAcyclique.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2010-05-06 14:25:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-06 13:25:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[visiteuracyclique]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/05/VisiteurAcyclique.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/05/VisiteurAcyclique.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"896";s:6:"height";s:3:"612";s:14:"hwstring_small";s:23:"height='87' width='128'";s:4:"file";s:29:"2010/05/VisiteurAcyclique.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"VisiteurAcyclique-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"VisiteurAcyclique-300x204.png";s:5:"width";s:3:"300";s:6:"height";s:3:"204";}s:14:"post-thumbnail";a:3:{s:4:"file";s:29:"VisiteurAcyclique-896x288.png";s:5:"width";s:3:"896";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:29:"VisiteurAcyclique-896x288.png";s:5:"width";s:3:"896";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:29:"VisiteurAcyclique-439x300.png";s:5:"width";s:3:"439";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gclog</title>
		<link>http://www.blog2.arkey.fr/2010/08/09/lenteur-dune-appli-web-sur-une-jvm-ibm/gclog/</link>
		<pubDate>Thu, 01 Jul 2010 17:11:14 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/07/gclog.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date><![CDATA[2010-07-01 18:11:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-01 17:11:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gclog]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>147</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/07/gclog.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/07/gclog.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"869";s:6:"height";s:3:"621";s:14:"hwstring_small";s:23:"height='91' width='128'";s:4:"file";s:17:"2010/07/gclog.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:17:"gclog-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:17:"gclog-300x214.png";s:5:"width";s:3:"300";s:6:"height";s:3:"214";}s:14:"post-thumbnail";a:3:{s:4:"file";s:17:"gclog-869x288.png";s:5:"width";s:3:"869";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:17:"gclog-869x288.png";s:5:"width";s:3:"869";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:17:"gclog-419x300.png";s:5:"width";s:3:"419";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>object_sizes</title>
		<link>http://www.blog2.arkey.fr/2010/08/09/lenteur-dune-appli-web-sur-une-jvm-ibm/object_sizes/</link>
		<pubDate>Wed, 07 Jul 2010 12:49:59 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/07/object_sizes.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2010-07-07 13:49:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-07 12:49:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[object_sizes]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>147</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/07/object_sizes.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/07/object_sizes.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"823";s:6:"height";s:3:"682";s:14:"hwstring_small";s:23:"height='96' width='115'";s:4:"file";s:24:"2010/07/object_sizes.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"object_sizes-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:24:"object_sizes-300x248.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"248";}s:14:"post-thumbnail";a:3:{s:4:"file";s:24:"object_sizes-823x288.jpg";s:5:"width";s:3:"823";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:24:"object_sizes-823x288.jpg";s:5:"width";s:3:"823";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:24:"object_sizes-362x300.jpg";s:5:"width";s:3:"362";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>compaction_pauses</title>
		<link>http://www.blog2.arkey.fr/2010/08/09/lenteur-dune-appli-web-sur-une-jvm-ibm/compaction_pauses/</link>
		<pubDate>Wed, 07 Jul 2010 12:57:11 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/07/compaction_pauses.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date><![CDATA[2010-07-07 13:57:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-07 12:57:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[compaction_pauses]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>147</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/07/compaction_pauses.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/07/compaction_pauses.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"823";s:6:"height";s:3:"682";s:14:"hwstring_small";s:23:"height='96' width='115'";s:4:"file";s:29:"2010/07/compaction_pauses.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"compaction_pauses-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"compaction_pauses-300x248.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"248";}s:14:"post-thumbnail";a:3:{s:4:"file";s:29:"compaction_pauses-823x288.jpg";s:5:"width";s:3:"823";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:29:"compaction_pauses-823x288.jpg";s:5:"width";s:3:"823";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:29:"compaction_pauses-362x300.jpg";s:5:"width";s:3:"362";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tdump-cause</title>
		<link>http://www.blog2.arkey.fr/2010/08/09/lenteur-dune-appli-web-sur-une-jvm-ibm/tdump-cause/</link>
		<pubDate>Mon, 09 Aug 2010 14:46:15 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/08/tdump-cause.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2010-08-09 15:46:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-09 14:46:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tdump-cause]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>147</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/08/tdump-cause.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/tdump-cause.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1103";s:6:"height";s:3:"700";s:14:"hwstring_small";s:23:"height='81' width='128'";s:4:"file";s:23:"2010/08/tdump-cause.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"tdump-cause-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:23:"tdump-cause-300x190.png";s:5:"width";s:3:"300";s:6:"height";s:3:"190";}s:5:"large";a:3:{s:4:"file";s:24:"tdump-cause-1024x649.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"649";}s:14:"post-thumbnail";a:3:{s:4:"file";s:24:"tdump-cause-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:24:"tdump-cause-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:23:"tdump-cause-472x300.png";s:5:"width";s:3:"472";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tdump-cause</title>
		<link>http://www.blog2.arkey.fr/2010/08/09/lenteur-dune-appli-web-sur-une-jvm-ibm/tdump-cause-2/</link>
		<pubDate>Mon, 09 Aug 2010 14:54:58 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/08/tdump-cause1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date><![CDATA[2010-08-09 15:54:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-09 14:54:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tdump-cause-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>147</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/08/tdump-cause1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/tdump-cause1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1103";s:6:"height";s:3:"700";s:14:"hwstring_small";s:23:"height='81' width='128'";s:4:"file";s:24:"2010/08/tdump-cause1.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"tdump-cause1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:24:"tdump-cause1-300x190.png";s:5:"width";s:3:"300";s:6:"height";s:3:"190";}s:5:"large";a:3:{s:4:"file";s:25:"tdump-cause1-1024x649.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"649";}s:14:"post-thumbnail";a:3:{s:4:"file";s:25:"tdump-cause1-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:25:"tdump-cause1-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:24:"tdump-cause1-472x300.png";s:5:"width";s:3:"472";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tdump-cause</title>
		<link>http://www.blog2.arkey.fr/2010/08/09/lenteur-dune-appli-web-sur-une-jvm-ibm/tdump-cause-3/</link>
		<pubDate>Wed, 25 Aug 2010 11:01:41 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/08/tdump-cause2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date><![CDATA[2010-08-25 12:01:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-25 11:01:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tdump-cause-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>147</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/08/tdump-cause2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/tdump-cause2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1103";s:6:"height";s:3:"700";s:14:"hwstring_small";s:23:"height='81' width='128'";s:4:"file";s:24:"2010/08/tdump-cause2.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"tdump-cause2-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:24:"tdump-cause2-300x190.png";s:5:"width";s:3:"300";s:6:"height";s:3:"190";}s:5:"large";a:3:{s:4:"file";s:25:"tdump-cause2-1024x649.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"649";}s:14:"post-thumbnail";a:3:{s:4:"file";s:25:"tdump-cause2-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:25:"tdump-cause2-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:24:"tdump-cause2-472x300.png";s:5:"width";s:3:"472";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>backtracking</title>
		<link>http://www.blog2.arkey.fr/2010/10/15/sexprimer-regulierement-partie-2/backtracking/</link>
		<pubDate>Fri, 15 Oct 2010 13:01:56 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/10/backtracking.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2010-10-15 14:01:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-15 13:01:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[backtracking]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>211</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/10/backtracking.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/backtracking.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"397";s:6:"height";s:4:"1607";s:14:"hwstring_small";s:22:"height='96' width='23'";s:4:"file";s:24:"2010/10/backtracking.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"backtracking-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:23:"backtracking-74x300.png";s:5:"width";s:2:"74";s:6:"height";s:3:"300";}s:5:"large";a:3:{s:4:"file";s:25:"backtracking-252x1024.png";s:5:"width";s:3:"252";s:6:"height";s:4:"1024";}s:14:"post-thumbnail";a:3:{s:4:"file";s:24:"backtracking-397x288.png";s:5:"width";s:3:"397";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:24:"backtracking-397x288.png";s:5:"width";s:3:"397";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:23:"backtracking-74x300.png";s:5:"width";s:2:"74";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0x6C23</title>
		<link>http://www.blog2.arkey.fr/2010/11/04/sexprimer-regulierement-partie-3/0x6c23-chi/</link>
		<pubDate>Thu, 04 Nov 2010 16:04:04 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/11/0x6C23-chi.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2010-11-04 17:04:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-11-04 16:04:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0x6c23-chi]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>228</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/11/0x6C23-chi.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/11/0x6C23-chi.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"100";s:6:"height";s:3:"100";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:22:"2010/11/0x6C23-chi.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Chi (Chinois traditionnel)]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0x304D</title>
		<link>http://www.blog2.arkey.fr/2010/11/04/sexprimer-regulierement-partie-3/0x304d-ki-hiragana/</link>
		<pubDate>Thu, 04 Nov 2010 16:04:41 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2010/11/0x304D-ki-hiragana.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2010-11-04 17:04:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-11-04 16:04:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0x304d-ki-hiragana]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>228</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2010/11/0x304D-ki-hiragana.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2010/11/0x304D-ki-hiragana.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"100";s:6:"height";s:3:"100";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:30:"2010/11/0x304D-ki-hiragana.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Ki (Alphabet Hiragana)]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jdk5_lion_install_terminal</title>
		<link>http://www.blog2.arkey.fr/2012/07/30/script-pour-installer-le-jdk-5-sur-macosx-lion/jdk5_lion_install_terminal/</link>
		<pubDate>Mon, 22 Aug 2011 17:35:05 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2011/08/jdk5_lion_install_terminal.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date><![CDATA[2011-08-22 19:35:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-08-22 17:35:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jdk5_lion_install_terminal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>274</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2011/08/jdk5_lion_install_terminal.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/jdk5_lion_install_terminal.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"972";s:6:"height";s:3:"654";s:14:"hwstring_small";s:23:"height='86' width='128'";s:4:"file";s:38:"2011/08/jdk5_lion_install_terminal.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:38:"jdk5_lion_install_terminal-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:38:"jdk5_lion_install_terminal-300x201.png";s:5:"width";s:3:"300";s:6:"height";s:3:"201";}s:14:"post-thumbnail";a:3:{s:4:"file";s:38:"jdk5_lion_install_terminal-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:20:"copperific-thumbnail";a:3:{s:4:"file";s:38:"jdk5_lion_install_terminal-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:18:"copperific-gallery";a:3:{s:4:"file";s:38:"jdk5_lion_install_terminal-479x240.png";s:5:"width";s:3:"479";s:6:"height";s:3:"240";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lion_java_preferences</title>
		<link>http://www.blog2.arkey.fr/2012/07/30/script-pour-installer-le-jdk-5-sur-macosx-lion/lion_java_preferences/</link>
		<pubDate>Mon, 22 Aug 2011 17:35:09 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2011/08/lion_java_preferences.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date><![CDATA[2011-08-22 19:35:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-08-22 17:35:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lion_java_preferences]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>274</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2011/08/lion_java_preferences.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/lion_java_preferences.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"721";s:6:"height";s:3:"502";s:14:"hwstring_small";s:23:"height='89' width='128'";s:4:"file";s:33:"2011/08/lion_java_preferences.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"lion_java_preferences-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"lion_java_preferences-300x208.png";s:5:"width";s:3:"300";s:6:"height";s:3:"208";}s:14:"post-thumbnail";a:3:{s:4:"file";s:33:"lion_java_preferences-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:20:"copperific-thumbnail";a:3:{s:4:"file";s:33:"lion_java_preferences-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:18:"copperific-gallery";a:3:{s:4:"file";s:33:"lion_java_preferences-479x240.png";s:5:"width";s:3:"479";s:6:"height";s:3:"240";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>project_setting</title>
		<link>http://www.blog2.arkey.fr/2012/07/30/script-pour-installer-le-jdk-5-sur-macosx-lion/project_setting/</link>
		<pubDate>Mon, 29 Aug 2011 18:18:14 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2011/08/project_setting.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date><![CDATA[2011-08-29 20:18:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-08-29 18:18:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[project_setting]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>274</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2011/08/project_setting-e1314642274278.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/project_setting-e1314642274278.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1033";s:6:"height";s:3:"681";s:14:"hwstring_small";s:23:"height='84' width='128'";s:4:"file";s:42:"2011/08/project_setting-e1314642274278.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:3:{s:4:"file";s:42:"project_setting-e1314642274278-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:42:"project_setting-e1314642274278-300x197.png";s:5:"width";s:3:"300";s:6:"height";s:3:"197";}s:5:"large";a:3:{s:4:"file";s:43:"project_setting-e1314642274278-1024x675.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"675";}s:14:"post-thumbnail";a:3:{s:4:"file";s:27:"project_setting-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:20:"copperific-thumbnail";a:3:{s:4:"file";s:27:"project_setting-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:18:"copperific-gallery";a:3:{s:4:"file";s:27:"project_setting-479x240.png";s:5:"width";s:3:"479";s:6:"height";s:3:"240";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[IntelliJ Project Setting]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:9:"full-orig";a:3:{s:5:"width";s:4:"1280";s:6:"height";s:3:"774";s:4:"file";s:19:"project_setting.png";}s:10:"large-orig";a:3:{s:4:"file";s:28:"project_setting-1024x619.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"619";}s:11:"medium-orig";a:3:{s:4:"file";s:27:"project_setting-300x181.png";s:5:"width";s:3:"300";s:6:"height";s:3:"181";}s:14:"thumbnail-orig";a:3:{s:4:"file";s:27:"project_setting-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>add_new_jsdk</title>
		<link>http://www.blog2.arkey.fr/2012/07/30/script-pour-installer-le-jdk-5-sur-macosx-lion/add_new_jsdk/</link>
		<pubDate>Mon, 29 Aug 2011 18:26:47 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2011/08/add_new_jsdk.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date><![CDATA[2011-08-29 20:26:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-08-29 18:26:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[add_new_jsdk]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>274</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2011/08/add_new_jsdk.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/add_new_jsdk.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"190";s:6:"height";s:3:"211";s:14:"hwstring_small";s:22:"height='96' width='86'";s:4:"file";s:24:"2011/08/add_new_jsdk.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"add_new_jsdk-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:14:"post-thumbnail";a:3:{s:4:"file";s:24:"add_new_jsdk-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:20:"copperific-thumbnail";a:3:{s:4:"file";s:24:"add_new_jsdk-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Add New JSDK]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>choose_jdk5_home</title>
		<link>http://www.blog2.arkey.fr/2012/07/30/script-pour-installer-le-jdk-5-sur-macosx-lion/choose_jdk5_home/</link>
		<pubDate>Mon, 29 Aug 2011 18:29:45 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2011/08/choose_jdk5_home.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date><![CDATA[2011-08-29 20:29:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-08-29 18:29:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[choose_jdk5_home]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>274</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2011/08/choose_jdk5_home-e1314642723756.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/choose_jdk5_home-e1314642723756.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"496";s:6:"height";s:3:"236";s:14:"hwstring_small";s:23:"height='60' width='128'";s:4:"file";s:43:"2011/08/choose_jdk5_home-e1314642723756.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"choose_jdk5_home-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"choose_jdk5_home-300x143.png";s:5:"width";s:3:"300";s:6:"height";s:3:"143";}s:14:"post-thumbnail";a:3:{s:4:"file";s:28:"choose_jdk5_home-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:20:"copperific-thumbnail";a:3:{s:4:"file";s:28:"choose_jdk5_home-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:18:"copperific-gallery";a:3:{s:4:"file";s:28:"choose_jdk5_home-479x240.png";s:5:"width";s:3:"479";s:6:"height";s:3:"240";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Choose JDK 5 Home]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:9:"full-orig";a:3:{s:5:"width";s:3:"867";s:6:"height";s:3:"414";s:4:"file";s:20:"choose_jdk5_home.png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Have you met Brice ?</title>
		<link>http://www.blog2.arkey.fr/have-you-met-brice/</link>
		<pubDate>Tue, 09 Mar 2010 20:48:54 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?page_id=8</guid>
		<description></description>
		<content:encoded><![CDATA[Plutôt orienté sur le <strong>Java</strong> et sur les technologies périphériques, je m'intéresse en particulier au code même, à son design et à l'architecture. Je me suis récemment pris d'intérêt pour les architectures orientées évènement particulièrement attrayante en terme de design, d'évolutivité, de résilience. Dans la même veine je m'oriente vers l'ingénierie des système distribués, j'ai mis un pas dans Cassandra, et j'investigue RxJava et d'autres projets de Netflix.

Ah oui, je commite sur <strong>mockito</strong>, donc je m'intéresse aussi à comment la JVM fonctionne au niveau bytecode, classloader, JIT, etc.... Plus jeune c'était sur mon temps libre, après 30 ans il faut le chercher ce temps libre ;)

Avec <strong>Mathilde Lemée</strong> et <strong>Eric Lefevre</strong>, nous nous sommes regroupé pour lancer le <strong>Hackergarten</strong>, un évènement qui permet de regrouper des commiteurs actifs avec des volontaires pour participer à certains projets Open Source.

Je suis un partisan de l'<strong>open source</strong>, du <strong>pair programming</strong>, des <strong>pull request</strong>, et de <strong>GitHub</strong> (et donc bien sûr <strong>git</strong>).

Depuis fin 2011, je fais partie de l'équipe qui monte <strong>Devoxx France</strong>, <strong>LA</strong> conférence française du développement, une conférence résolument tournée vers l'avenir.

Vous voulez en savoir plus sur l'expérience professionnelle ; mon profil est sur <a title="Profil LinkedIn" href="http://fr.linkedin.com/in/dutheilbrice">LinkedIn</a> et <a title="Profil Viadéo" href="http://www.viadeo.com/fr/profile/brice.dutheil">Viadeo</a>. Je suis indépendant.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2010-03-09 21:48:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-09 20:48:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[have-you-met-brice]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A propos de Joda-Time</title>
		<link>http://www.blog2.arkey.fr/2010/02/09/a-propos-de-joda-time/</link>
		<pubDate>Tue, 09 Feb 2010 16:32:06 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[Je suis un peu surpris de voir que beaucoup de développeurs utilisent encore énormément l'API temps du JDK. C'est la raison pour laquelle j'ajoute une nouvelle entrée sur le web à ce sujet.

Ce n'est une nouvelle pour personne qui connait Java un minimum que les classes <strong>java.util.Calendar</strong> et <strong>java.util.Date</strong> ne sont pas pratique à utiliser. Mais en plus de ça, leur implémentation laisse à désirer, elles ne sont pas thread-safe, leur performanceest  au mieux variable et, ... elles sont surtout buggées (même dans le dernier JDK). N'oublions non plus de mettre dans le lot le <strong>SimpleDateFormat</strong>, qui n'est bien sur lui aussi pas thread-safe. Et je ne parle pas des classes <strong>java.sql.Date</strong>, <strong>java.sql.Time</strong> et <strong>java.sql.Timestamp</strong> dont leur implémentation est fondée sur <strong>java.util.Date</strong>, ce qui leur donne droit à une implémentation un peu étonnante.

Malheureusement comme ces classes font partie du JDK depuis très longtemps et qu'elle ne sont toujours pas dépréciée, ces classes restent, et leur bug aussi, ou d'autres sont créés. Vous l'avez compris ces classes sont a éviter.

Heureusement une API a émergé il y a quelques années pour fournir une implémentation d'une API Temps solide, performante, consistante et agréable à utiliser. Il s'agit de Joda-Time. Cette API a été la fondation ou plutôt un exercice intellectuel, pour l'implémentation de référence de la <a href="http://jcp.org/en/jsr/detail?id=310">JSR-310</a>. Aujourd'hui cette implémentation de référence est un peu différente de celle de Joda-Time, et avec raison Joda-Time a aussi quelques défauts.

Cela dit en attendant que cette JSR soit effectivement intégrée à une version officielle du JDK, on pourra se contenter de Joda-Time qui reste pour le moment la meilleure API Temps.
<h2>Alors que peut-on faire avec Joda-Time</h2>
Pour commencer, on peut remplacer les appels à
<pre class="lang:java decode:true">Calendar cal = Calendar.getInstance();
Date date = new Date();</pre>
par les appels suivant, on peut jouer un peu avec l'API :
<pre class="lang:java decode:true ">DateTime now = new DateTime();
DateTime inYear2000 = now.withYear(2000);
DateTime twoHoursAndOneMinuteLater = now.plusHours(2).plusMinutes(1);</pre>
Comme l'objet String, <strong>DateTime</strong> est immutable, des nouvelles instances sont créés à chaque fois, ce qui veut également dire que l'objet est thread-safe. Dans Joda-Time, <strong>DateTime</strong> représente un instant (interface <strong>ReadableInstant</strong>).

Les autres classes représentant des instants sont <strong>Instant</strong> et <strong>DateMidnight</strong>. <strong>Instant</strong> correspond juste à un instant en milliseconde depuis 1970. <strong>DateMidnight</strong> est un instant ou l'heure est positionnée à minuit.
<pre class="lang:java decode:true ">DateTime _2010 = new DateTime("2010-01-01T00:00:00");
DateMidnight _2010midnight = new DateMidnight("2010-01-01T00:00:00");
DateMidnight _2010stillMidnight = new DateMidnight("2010-01-01T20:34:00");

_2010.equals(_2010midnight); // true
_2010.equals(_2010stillMidnight); //true
_2010.withZone(DateTimeZone.forOffsetHours(2)).equals(_2010midnight); //false</pre>
&nbsp;

Ou avec les instants :
<pre class="lang:java decode:true ">Instant _2010instant = new Instant(_2010);

_2010.equals(_2010instant); // false
_2010.withZone(DateTimeZone.UTC).equals(_2010instant); // true</pre>
&nbsp;

Observez les différence de TimeZone, en effet par défaut si la TimeZone n'est pas précisée, il s'agira de la zone locale.

On peut jouer avec les propriétés de ces objets, par exemple :
<pre class="lang:java decode:true">_2010midnight.monthOfYear().getAsText(); // janvier
_2010midnight.monthOfYear().getAsText(Locale.GERMAN); // Januar
_2010midnight.monthOfYear().getDifference(new DateMidnight("2009-04-10")); // 8</pre>
&nbsp;

Un peu plus sympa c'est la gestion des intervalles / durées / périodes.
<pre class="lang:java decode:true">Duration _30daysDuration = Duration.standardDays(30);
new DateMidnight("2010-01-31").equals(_2010.plus(_30daysDuration)); // true
new DateMidnight("2010-03-02").equals(_2010.plus(_30daysDuration).plus(_30daysDuration)); // true

Period _1month = Period.months(1);
new DateMidnight("2010-02-01").equals(_2010.plus(_1month)); // true
new DateMidnight("2010-03-01").equals(_2010.plus(_1month).plus(_1month)); // true</pre>
&nbsp;

Joda-Time apporte également des objets dont les concepts ne concerne qu'une date ou que le temps. Il est facile de convertir un instant vers un de ces objets.
<pre class="lang:java decode:true ">// _2010 = "2010-01-01T00:00:00+01:00" car timezone locale
_2010.withZone(DateTimeZone.forID("Europe/London")).toLocalDate(); // 2009-12-31
_2010.toLocalDate(); // 2010-01-01

LocalTime _15h28 = new LocalTime("15:28");
_15h28.isAfter(new DateTime("2010-01-01T00:00:00").toLocalTime()); // true</pre>
&nbsp;

Joda-Time offre aussi un petit utilitaire qui permet de vérifier certains comportement dépendant du temps :
<pre class="lang:java decode:true  crayon-selected">DateTime now = new DateTime();
DateTimeUtils.setCurrentMillisOffset(-60 * 60 * 1000); // - 1h
DateTime past = new DateTime();
past.isAfter(now); // false
past.isAfter(System.currentTimeMillis()); // false</pre>
&nbsp;

Modifier le temps à travers cette API change seulement le temps dans pour la JVM courante, et non sur le système.

Formater une date, pour rappel <strong>DateTimeFormat</strong> est thread-safe et génère également des objets thread-safe, la documentation indique aussi la présence d'un <strong>DateTimeFormatterBuilder</strong> pour construire des formatter plus complexes.
<pre class="lang:java decode:true">DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyyMMdd");
DateTimeFormatter frenchFmt = fmt.withLocale(Locale.FRENCH);
DateTimeFormatter germanFmt = fmt.withLocale(Locale.GERMAN);

fmt.print(new DateTime());
frenchFmt.parseDateTime("20100208")</pre>
&nbsp;

Ah j'allais oublier comment passer des objets du JDK vers les objets Joda-Time et vice-versa :
<pre class="lang:java decode:true ">Calendar now = new DateTime().toGregorianCalendar();
Date date = new DateTime(now).toDate();
date = new LocalDate().toDate();
Calendar todayAt5 = new LocalTime(now).withHourOfDay(5).toDateTimeToday().toGregorianCalendar();
Calendar tomorowAt5 = new LocalTime(now).withHourOfDay(5).toDateTime(new DateTime().plusDays(1)).toGregorianCalendar();</pre>
&nbsp;

Ce genre de manipulation, bien que relativement aisée grâce à Joda-Time, sont pénible pas très élégantes, et finalement elle pénalise bêtement les performances en repassant aux objets du JDK, il est donc préférable d'utiliser tout au long de l'application des objet Joda-Time et de n'utiliser que des objets du JDK lorsque celà est nécessaire.

Comme vous venez de le voir, Joda-Time offre un belle API, celle-ci a certainement ses défauts, mais elle offre un bel avantage sur les autres pour sa fluidité de concepts, son efficacité ou sa clarté. En attendant que la JSR-310 soit intégrée au JDK, et que ce JDK soit décliné dans sa version J2EE, cette API a encore une belle vie devant elle.

Cela dit pour certaines utilisations spécifiques, il faudra faire attention à ces objets, j'ai vu passer des mailing list sur Terracota qui parlent justement de Joda-Time et de leurs problèmes rencontrés. Encore une fois il s'agit d'un cas particulier ou en plus la JVM est instrumentée.

Pour ceux que ça intéresse, il semblerait que les besoins dans le monde de la finance sont un peu plus poussés. Je ne connais pas bien ces <em>dates financières</em>. En tous cas il existe une bibliothèque ayant ce support, c'est <strong>jFin</strong>.

Également aussi, une librairie de tag JSP permet d'utiliser à pleine puissance les objets de Joda-Time dans les JSP.

Pour finir, j'ai dit une bêtise, il y a d'autres choses à ajouter, faites vous plaisir avec les commentaires.

Sources:
<ul>
	<li><a href="http://www.wolkje.net/2010/01/06/java-date-and-time-api-and-jsr-310/">http://www.wolkje.net/2010/01/06/java-date-and-time-api-and-jsr-310/</a></li>
	<li><a href="http://www.jroller.com/scolebourne/entry/why_jsr_310_isn_t">http://www.jroller.com/scolebourne/entry/why_jsr_310_isn_t</a></li>
	<li><a href="http://joda-time.sourceforge.net/">http://joda-time.sourceforge.net/</a></li>
	<li><a href="http://joda-time.sourceforge.net/contrib/jsptags/">http://joda-time.sourceforge.net/contrib/jsptags/</a></li>
	<li><a href="http://en.wikipedia.org/wiki/JFin">http://en.wikipedia.org/wiki/JFin</a></li>
</ul>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 274px; width: 1px; height: 1px; overflow: hidden;">http://www.jroller.com/scolebourne/entry/why_jsr_310_isn_t</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2010-02-09 17:32:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-09 16:32:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-propos-de-joda-time]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="joda-time"><![CDATA[joda-time]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[A propos du design de vos objets, des getters et setters, de equals/hashCode et de la mutabilité &laquo; C0De &laquo; the coffee workshop]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://dutheil.brice.online.fr/blog/index.php/2010/03/30/a-propos-du-design-de-vos-objets-des-getters-et-setters-de-equalshashcode-et-de-la-mutabilite/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.27.63.204]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-09 14:24:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-09 13:24:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://dutheil.brice.online.fr/blog/index.php/2010/02/09/a-propos-de-joda-time/ [...] ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Logback le futur de la journalisation, déjà entre vos mains</title>
		<link>http://www.blog2.arkey.fr/?p=35</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2010-02-12 21:08:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Les collections par Google, comment s&#039;y retrouver?</title>
		<link>http://www.blog2.arkey.fr/2010/02/16/les-collections-par-google-comment-sy-retrouver/</link>
		<pubDate>Tue, 16 Feb 2010 14:51:49 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=36</guid>
		<description></description>
		<content:encoded><![CDATA[Depuis quelques jours déjà le framework de collection par google est sorti en version 1.0. Ce framework a vu le jour chez Google donc, et s’impose finalement comme le prochain framework pour travailler avec les collections. En effet les classes utilitaires du JDK sont plutôt limitées et les classes commons-collections de Apache ne sont pas <em>générifiés</em>.

Les classes fournies par Google, ont été tunées pour être performante en rapidité et en utilisation mémoire. Si possible ce sont les collections standard du JDK, les collections du JDK sont mutables. Éventuellement l'utilisation des classes standard du JDK pourrait permettre à la JVM de faire les optimisation sur ces objets qu'il connait. Également aussi l'API orientée builder – un peu comme Joda-Time – facilite l'utilisation de google-collections.

Pour commencer, vous pouvez jeter un œil aux classes suivantes :
<pre class="lang:java decode:true">com.google.common.collect.Collections2
com.google.common.collect.Lists
com.google.common.collect.Maps
com.google.common.collect.Sets
com.google.common.collect.ObjectArrays
com.google.common.collect.Multisets
com.google.common.collect.Multimaps
com.google.common.collect.Iterators
com.google.common.collect.Iterables</pre>
Ces classes utilitaires permettent déjà d’instancier les collections avec quelques commodités, par exemple dans le code ci-dessous les classes retournées sont les <strong>classes mutables du JDK</strong> :
<pre class="lang:java decode:true">LinkedHashSet&lt;String&gt; linkedHashSet = Sets.newLinkedHashSet();
ArrayList&lt;AGenericObject &lt;Class&lt;Observer&gt;&gt;&gt; arrayList = Lists.newArrayList();
Lists.newArrayList("bob", "marie", "barack", "bruce");</pre>
à la place de :
<pre class="lang:default decode:true">List&lt;AGenericObject&lt;Class&lt;Observer&gt;&gt;&gt; list = new ArrayList&lt;AGenericObject&lt;Class&lt;Observer&gt;&gt;&gt;();</pre>
Voilà rapidement pour les utilitaires des collections fournies par le JDK, mais Google fournit également des <strong>implémentations immutables</strong> des collections :
<pre class="lang:java decode:true">ImmutableSet&lt;integer&gt; immutableSet = ImmutableSet.of(1, 2, 3, 4, 5);
ImmutableList&lt;string&gt; immutableList = ImmutableList.of("a,b,c,d,e,f,g".split(","));</pre>
Pour les maps, il y a aussi une API plutôt expressive et facilement utilisable. Par exemple pour créer facilement une multimap:
<pre class="lang:java decode:true">Multimap&lt;color , Fruit&gt; colorIndex = HashMultimap.create();
for (Fruit fruit : fruits) {
    colorIndex.put(fruit.getColor(), fruit);
}
Collection&lt;Fruit&gt; redFruits = colorIndex.get(Color.RED);</pre>
Si on veut jouer avec des map bi-directionnelles.
<pre class="lang:java decode:true">ImmutableBiMap&lt;Integer , String&gt; biMap = ImmutableBiMap.of(0, "Zero", 1, "One", 2, "Two", 3, "Three");
biMap.inverse().get("Zero"); // =&gt; 0</pre>
L’outil MapMaker pour créer des maps customisées :
<pre class="lang:java decode:true">Map&lt;Params , Result&gt; resultCache = new MapMaker().expiration(5 * 60,TimeUnit.SECONDS)
    .makeComputingMap(new Function&lt;Params , Result&gt;() {
        public Result apply(Params param) {
            return computeHeavyAlgorythm();
        }
    }).makeMap();</pre>
Il est aussi possible de ne pas utiliser l’expiration mais de choisir plutôt des WeakReference ou des SoftReference pour les clés et/ou les valeurs.

Comment utiliser les Multiset. A noter, le Multiset ci-dessous est mutable! Pur un MultiSet immutable il faut le créer avec ImmutableMultiset.
<pre class="lang:java decode:true">Multiset&lt;String&gt; histogram = HashMultiset.create();
histogram.add("Hello");
histogram.add("World", 3);
histogram.add("Hello");
histogram.add("!");

int count;
count = histogram.count("Hello");    // 2
count = histogram.count("World");    // 3
count = histogram.count("Brice");    // 0</pre>
Et pour les itérateurs :
<pre class="lang:java decode:true">UnmodifiableIterator&lt;Object&gt; tokenizerIt = Iterators.forEnumeration(new StringTokenizer("a|b|c|d|e", "|")); // Eh oui ! StringTokenizer implémente Enumeration&lt;Object&gt;

UnmodifiableIterator&lt;String&gt; splitIt = Iterators.forArray("e|ed|f|g|h|i".split("|"));

Iterator&lt;object&gt; concatenatedIt = Iterators.concat(tokenizerIt, splitIt);

Iterators.frequency(concatenatedIt, "e"); // 2
concatenatedIt.hasNext(); // false</pre>
Ok maintenant que nous avons vu comment créer des collections, on peut regarder comment vraiment jouer avec. Ordonner une collection par exemple; il faut utiliser la classe Ordering (étends l’interface Comparator de java)
<pre class="lang:java decode:true">Function&lt;Fruit , Color&gt; getColorFunction = new Function() {
    public Color apply(Fruit from) {
        return from.getColor();
    }
};

Function&lt;Fruit , String&gt; getNameFunction = new Function() {
    public String apply(Fruit from) {
        return from.getName();
    }
};

Ordering&lt;Fruit&gt; colorOrdering = Ordering.natural().onResultOf(getColorFunction);
Ordering&lt;Fruit&gt; nameOrdering = Ordering.natural().onResultOf(getNameFunction);

// ordonner par couleur puis par nom
Ordering&lt;Fruit&gt; colorAndNameOrdering = colorOrdering.compound(nameOrdering);

List&lt;Fruit&gt; sortedFruitList = Ordering.natural().sortedCopy(fruits);
Set&lt;Fruit&gt; sortedFruits = ImmutableSortedSet.orderedBy(colorAndNameOrdering).addAll(fruits).build();</pre>
Filtrer des éléments est devenu super facile à utiliser. Il nous faut les classes Predicate et Predicates.
<pre class="lang:java decode:true">List&lt;String&gt; names = Lists.asList("Clément", "Jean-Max", "Caroline", "Céline", "Brice");
Iterable&lt;String&gt; filtered = Iterables.filter(
    names,
    Predicates.or(
        Predicates.or(Predicates.equalTo("Clément"), Predicates.equalTo("Brice")),
        returnALengthPredicate(5)
    )
);</pre>
Il est possible de faire des transformations
<pre class="lang:java decode:true">Lists.transform(lotoNumbers, new Function&lt;String , Integer&gt; {
    public Integer apply(final String from) {
        return Integer.valueOf(from);
    }
});</pre>
Que peut-on faire d’autre? Par exemple avec les maps et les sets, on peut observer les différences, faire des unions, ou faire des intersections.
<pre class="lang:java decode:true">MapDifference&lt;String , Integer&gt; differenceMap = Maps.difference(mapA, mapB);
differenceMap.areEqual();
Map&lt;String , ValueDifference&lt;Integer&gt;&gt; entriesDiffering = differenceMap.entriesDiffering();
Map&lt;String , Integer&gt; entriesOnlyOnLeft = differenceMap.entriesOnlyOnLeft();
Map&lt;String , Integer&gt; entriesOnlyOnRight = differenceMap.entriesOnlyOnRight();
Map&lt;String , Integer&gt; entriesInCommon = differenceMap.entriesInCommon();</pre>
On peut également faire de l’indexation sur des listes de map :
<pre class="lang:java decode:true">List&lt;String&gt; badGuys = Arrays.asList("Inky", "Scratchy", "Blinky", "Pinky", "Pinky", "Clyde");
Function&lt;String , Integer&gt; stringLengthFunction = ...;

Multimap&lt;String , Integer&gt; index = Multimaps.index(badGuys, stringLengthFunction); // { 4=[Inky], 5=[Pinky, Pinky, Clyde], 6=[Blinky], 7=[Scratchy] }</pre>
Au cas ou pour éviter de chercher voici quelques méthodes utilitaires dans Iterables, d'ailleurs c'est là qu'on retrouve le fameux isEmpty. (Attention la librairie google ne vérifie pas la nullité, et leur argument est de ne pas encourager de retourner null mais plutôt des collections vide, bref ce que dit Joshua Blosh dans son fameux livre Effective Java, §Item 43)
<pre class="lang:java decode:true">Iterables.getOnlyElement(ImmutableSet.of("1")); // 0
Iterables.getOnlyElement(ImmutableSet.of("1", "2")); // IllegalArgumentException

Iterables.isEmpty(ImmutableMultiset.of()); // true
Iterables.isEmpty(null); // NullPointerException
Iterable&lt;String&gt; moreFruits = Iterables.concat(ImmutableMultiset.of("apple", "banana", "kiwi"), Lists.newArrayList("ananas", "orange")); // "apple", "banana", "kiwi", "ananas", "orange"
String kiwi = Iterables.getLast(ImmutableMultiset.of("apple", "banana", "kiwi")); // "kiwi"

Iterable&lt;List &lt;String&gt;&gt; fruitBasket = Iterables.partition(moreFruits, 2);  // { "apple", "banana" }, { "kiwi", "ananas" }, { "orange" }</pre>
Pour passer d’un Iterable à un tableau :
<pre class="lang:java decode:true crayon-selected">Iterables.toArray(Lists.newArrayList(new DateTime(), new DateTime().plusDays(1)), DateTime.class);</pre>
Voilà il y a pas mal de petits trucs bien sympa, ceci dit il peut manquer des choses qui nous semblent essentielles. Mais cette bibliothèque apporte enfin des choses qui nous simplifient la vie. Les commons-collection ont bien marqués nos habitudes, mais pour s’y retrouver et utiliser cette bibliothèque à bon escient il est certain qu'il va falloir faire un petit effort.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date><![CDATA[2010-02-16 15:51:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-16 14:51:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[les-collections-par-google-comment-sy-retrouver]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="google-collections"><![CDATA[google-collections]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[A propos du design de vos objets, des getters et setters, de equals/hashCode et de la mutabilité &laquo; C0De &laquo; the coffee workshop]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://dutheil.brice.online.fr/blog/index.php/2010/03/30/a-propos-du-design-de-vos-objets-des-getters-et-setters-de-equalshashcode-et-de-la-mutabilite/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.27.63.204]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-09 14:25:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-09 13:25:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://dutheil.brice.online.fr/blog/index.php/2010/02/16/les-collections-par-google-comment-sy-retro... [...] ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Comparaison rapide des performances sur la reflection</title>
		<link>http://www.blog2.arkey.fr/?p=40</link>
		<pubDate>Fri, 12 Feb 2010 20:12:08 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=40</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2010-02-12 21:12:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-12 20:12:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aspectj"><![CDATA[aspectj]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<category domain="post_tag" nicename="proxy"><![CDATA[proxy]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[reflection]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Une fuite mémoire, beaucoup de reflection et pas de OutOfMemoryError</title>
		<link>http://www.blog2.arkey.fr/2010/02/12/une-fuite-memoire-beaucoup-de-reflection-et-pas-de-outofmemoryerror/</link>
		<pubDate>Fri, 12 Feb 2010 20:12:39 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Le contexte</h1>
L'histoire commence par un problème en production sur une version à priori stable et sans anomalie connue. Seulement voilà une fois en prod l'application devient de plus en plus lente. Pourquoi? Que se passe-t-il?

Avec l'activation des logs du GC dans les options de la JVM, l'équipe s'aperçoit donc très vite que l'application arrive à bout de la mémoire disponible, mais pas de OutOfMemoryError (pourtant classique lors d'une fuite mémoire).
<pre class="lang:default decode:true">-Xloggc:-XX:+PrintGCDetails</pre>
&nbsp;

Lors de l'analyse des GC on remarque immédiatement une famine de mémoire, la JVM est obligée de faire des Full GC très souvent, et un Full GC c'est lent!

Pour avoir une représentation un peu compréhensible, on analyse ces logs avec <a href="http://www.tagtraum.com/gcviewer.html">GCViewer</a>. On a alors un graphe qui ressemble à ça :
<p style="text-align: center;"><span style="color: #ff0000;"><a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/application-gc.png"><img class="aligncenter size-full wp-image-68" title="application-gc" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/application-gc.png" alt="" width="600" height="472" /></a>
</span></p>
On voit comment se passe le consommation de la mémoire dans l'application, on sait que l'application est lente, maintenant pourquoi la consommation mémoire monte autant sans être libéré. Effectivement les raisons peuvent varier <strong>surtout qu'il n'y avait pas de OutOfMemoryError</strong>!
<ul>
	<li>Possibilité 1 : Un problème de concurrence (deadlock, point de contention sur une ressource, ...); c'est cette possibilité qui a été retenue pour l'investigation du problème. Les thread dump nous confortaient dans cette optique étant donné qu'on voyait régulièrement le même code revenir. Et les indicateurs sur le CPU montrait qu'il n'était pas énormément utilisé.</li>
	<li>Possibilité 2 : Une fuite mémoire, choix écarté parce qu'on ne voyait de <abbr title="OutOfMemoryError">OOME</abbr>.</li>
</ul>
Et bien on avait tort, il s'agissait d'une fuite mémoire. Avec un collègue plus expérimenté nous avons fait du profiling, très vite il a mis le doigt sur le code en tort. <strong>Mais quelque chose me choquait, pourquoi pas d'erreur </strong><abbr title="OutOfMemoryError"><strong>OOME</strong></abbr><strong> alors qu'il s'agissait manifestement d'une fuite mémoire.</strong>
<h1>La bonne rencontre</h1>
J'ai eu la chance de pouvoir rencontré <a href="http://www.javaspecialists.eu/">Heinz Kabutz</a> lors d'une conférence chez <a href="http://www.zenika.com/">Zenika</a>, en discutant avec lui j'ai eu l'occasion d'aborder ce sujet. Il m'a immédiatement demandé si notre application utilisait beaucoup d'introspection. Il m'a dit qu'il soupçonnait que ce genre de cas pouvait se produire, et il m'a ensuite aiguillé sur la manière dont le JDK de Sun utilise des SoftReference pour stocker les éléments issus de la reflection.

Et là, les cases manquantes n'étaient plus, en effet les objets <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/ref/SoftReference.html">SoftReference</a> sont des références qui sont réclamées par le GC lorsque la JVM a vraiment vraiment besoin de mémoire, juste avant de lever une OutOfMemoryError. En gros, ça se passe typiquement lors des Full GC.

Et donc comme l'application est toujours en état de marche, le code qui a besoin de reflection va recréer ces objets. Cette combinaison de Full GC et la recréation constante des références des éléments issus de l'introspection, va très fortement ralentir l'application sans lever cette fameuse <abbr title="OutOfMemoryError">OOME</abbr>. Ou en tout cas en repoussant dans le temps cette <abbr title="OutOfMemoryError">OOME</abbr>.
<h1>La preuve</h1>
Fort de cette nouvelle connaissance, j'ai été jeter un coup d'œil dans l'objet `java.lang.Class` pour effectivement y découvrir la mise en cache des éléments comme les méthodes et les champs dans une `SoftReference`. Ainsi en regardant le code source de OpenJDK:
<pre class="lang:java mark:51,53 decode:true">/*
 * Copyright 1994-2006 Sun Microsystems, Inc.  All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Sun designates this
 * particular file as subject to the &amp;quot;Classpath&amp;quot; exception as provided
 * by Sun in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
*/

...

// Returns an array of &amp;quot;root&amp;quot; methods. These Method objects must NOT
// be propagated to the outside world, but must instead be copied
// via ReflectionFactory.copyMethod.
private Method[] privateGetDeclaredMethods(boolean publicOnly) {
  checkInitted();
  Method[] res = null;
  if (useCaches) {
    clearCachesOnClassRedefinition();
    if (publicOnly) {
      if (declaredPublicMethods != null) {
        res = (Method[]) declaredPublicMethods.get();
      }
    } else {
      if (declaredMethods != null) {
        res = (Method[]) declaredMethods.get();
      }
    }
    if (res != null) return res;
  }
  // No cached value available; request value from VM
  res = Reflection.filterMethods(this, getDeclaredMethods0(publicOnly));
  if (useCaches) {
    if (publicOnly) {
      declaredPublicMethods = new SoftReference(res);
    } else {
      declaredMethods = new SoftReference(res);
    }
  }
  return res;
}</pre>
Bon voilà pour la preuve de ce qui était avancé, mais pour aller plus loin je vais reproduire le scénario.
<h1>La preuve par l'exemple</h1>
L'idée de l'exemple est d'avoir du code qui va simuler une fuite mémoire et un autre code qui va utiliser plus ou moins intensément l'introspection. On le verra plus tard mais le débit d'allocation d'objet de la fuite mémoire ne doit pas être trop important sinon on verra effectivement très vite l'erreur OutOfMemoryError.
<h2>Le processus métier qui utilise de l'introspection</h2>
Comme je suis fainéant, je n'ai pas spécialement envie de créer 300 classes, donc je vais les générer en utilisant l'API Compiler du JDK 6. Je me suis un peu inspiré de qui disponible sur le net à ce sujet. En particulier de cette <a href="http://speaking-my-language.blogspot.com/2008/04/instant-evaluation-of-java-code-in.html">entrée</a>. Je passe brièvement dessus pour simplement dire que c'est la méthode `processBusinessLogic` qui est intéressante, on charge des classes, et surtout on appelle une méthode par introspection.
<pre class="lang:java mark:23 decode:true">package com.brice.memoryleakwithoutoome;

import javax.tools.*;
import java.io.*;
import java.lang.reflect.Method;
import java.net.URI;
import java.nio.charset.Charset;
import java.util.*;

public class BusinessLayerWithALotOfReflection {
  private InMemoryClassLoader classLoader = new InMemoryClassLoader();
  private List&lt;String&gt; classNames = new ArrayList();

  public static void main(String... args) throws Exception {
    BusinessLayerWithALotOfReflection businessLayer = new BusinessLayerWithALotOfReflection(3);
    businessLayer.performBusinessLogic();
  }

  public BusinessLayerWithALotOfReflection(int toGenerate) throws Exception {
    init(toGenerate);
  }

  public void performBusinessLogic() throws Exception {
    for (String className : classNames) {
      Object o = Class.forName(className, true, classLoader).newInstance();
      Method method = o.getClass().getMethod("m1", null);
      method.invoke(o, null);
    }
  }

  private void init(int toGenerate) throws Exception {
    generateSources(toGenerate);
  }

  private void generateSources(int toGenerate) throws Exception {
    List&lt;JavaObjectFromString&gt; generatedSources = new ArrayList&lt;JavaObjectFromString&gt;();

    for (int genId=0; genId &lt; toGenerate; genId++) {
      String className = "$Generated" + genId;
      StringBuilder sb = new StringBuilder();
      sb.append("package com.brice.memoryleakwithoutoome.generated; ");
      sb.append("import java.util.Random;");
      sb.append("public class ").append(className).append(" {");
      sb.append("public void m1() { new Random().nextGaussian(); }");
      sb.append("}");

      classNames.add("com.brice.memoryleakwithoutoome.generated." + className);
      generatedSources.add(new JavaObjectFromString(className, sb.toString()));
    }
    generateClasses(generatedSources);
  }

  private void generateClasses(Iterable&lt;JavaObjectFromString&gt; javaObjects) throws IOException {

    JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
    StandardJavaFileManager javaFileManager = compiler.getStandardFileManager(null, null, Charset.defaultCharset());
    InMemoryJavaFileManager inMemoryJavaFileManager = new InMemoryJavaFileManager(javaFileManager, classLoader);

    compiler.getTask(null, inMemoryJavaFileManager, null, null, null, javaObjects).call();

    javaFileManager.close();
  }

  static class JavaObjectFromString extends SimpleJavaFileObject {
    private String contents = null;

    public JavaObjectFromString(String className, String contents) throws Exception {
      super(URI.create("string:///" + className.replace('.', '/') + Kind.SOURCE.extension), Kind.SOURCE);
      this.contents = contents;
    }

    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
      return contents;
    }
  }

  static class InMemoryJavaFileObject extends SimpleJavaFileObject {

    InMemoryJavaFileObject(String name, Kind kind) {
      super(URI.create(name), kind);
    }

    private ByteArrayOutputStream baos;

    @Override
    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException, IllegalStateException, UnsupportedOperationException {
      throw new UnsupportedOperationException();
    }

    @Override
    public InputStream openInputStream() throws IOException, IllegalStateException, UnsupportedOperationException {
      return new ByteArrayInputStream(baos.toByteArray());
    }

    @Override
    public OutputStream openOutputStream() throws IOException, IllegalStateException, UnsupportedOperationException {
      return baos = new ByteArrayOutputStream();
    }

    public byte[] getClassDefinition() {
      return baos.toByteArray();
    }
  }

  static class InMemoryJavaFileManager extends ForwardingJavaFileManager&lt;StandardJavaFileManager&gt; {
    private InMemoryClassLoader inMemoryClassLoader;

    protected InMemoryJavaFileManager(StandardJavaFileManager fileManager, InMemoryClassLoader classLoader) {
      super(fileManager);
      this.inMemoryClassLoader = classLoader;
    }

    @Override
    public JavaFileObject getJavaFileForOutput(Location location,
                                               String name,
                                               JavaFileObject.Kind kind,
                                               FileObject sibling) throws IOException {
      return inMemoryClassLoader.registerClassDefinition(new InMemoryJavaFileObject(name, kind));
    }
  }

  static class InMemoryClassLoader extends ClassLoader {
    private Map&lt;String , InMemoryJavaFileObject&gt; inMemoryClassObjects = new HashMap&lt;String , InMemoryJavaFileObject&gt;();

    protected Class findClass(String name) throws ClassNotFoundException {
      InMemoryJavaFileObject classObject = inMemoryClassObjects.get(name);
      if (classObject != null) {
        byte[] classDefinition = classObject.getClassDefinition();
        return defineClass(name, classDefinition, 0, classDefinition.length);
      }
      return super.findClass(name);
    }

    public InMemoryJavaFileObject registerClassDefinition(InMemoryJavaFileObject object) {
      inMemoryClassObjects.put(object.getName(), object);
      return object;
    }
  }
}</pre>
<h2>Le code avec la fuite mémoire</h2>
Bon voilà pour le code qui simule du code métier avec de l'introspection, maintenant c'est au tour de simuler le service qui engendre une fuite mémoire. L'utilisation des thread est accessoire cela dit, mais ça permet de rappeler le fonctionnement d'une véritable application.
<pre class="lang:java mark:30,48 decode:true">package com.brice.memoryleakwithoutoome;

import java.lang.management.ManagementFactory;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Logger;

public class Service {

  private static Set&lt;UUID&gt; sessions = new ConcurrentSkipListSet&lt;UUID&gt;();
  private static ExecutorService executor = Executors.newCachedThreadPool();
  private static BusinessLayerWithALotOfReflection businessLayer;
  static {
    try {
      businessLayer = new BusinessLayerWithALotOfReflection(300);
    } catch (Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
  }

  public static void main(String[] args) throws Throwable {
    System.out.println(ManagementFactory.getRuntimeMXBean().getName());
    try {
      while (true) {
        executor.submit(new LeakyThread(businessLayer));
        Thread.sleep(1);
      }
    } catch (Throwable t) {
      Logger.getAnonymousLogger().severe(t.toString());
      throw t;
    }
  }

  private static class LeakyThread extends Thread {
    private BusinessLayerWithALotOfReflection businessLayer;

    public LeakyThread(BusinessLayerWithALotOfReflection businessLayer) {
      this.businessLayer = businessLayer;
    }

    @Override
    public void run() {
      // leak
      sessions.add(UUID.randomUUID());

      // non leaky business logic using a lot reflection
      try {
        businessLayer.performBusinessLogic();
      } catch (Exception e) {
        e.printStackTrace();
        return;
      }
    }
  }
}</pre>
C'est à la ligne de 30 du code que je contrôle le débit de la fuite mémoire. En effet si je retire ce `Thread.sleep`, il y a très vite une <abbr title="OutOfMemoryError">OOME</abbr>. Pour la fuite mémoire, celle-ci consiste juste à alimenter un liste de `String`. On pourrait par exemple imaginer que dans une application réelle ce code stockerait des objets dans une Map pour chaque session.

Afin de ne pas attendre des heures avec juste quelques `String`, je vais limiter l'espace mémoire de mon application à 10MB:
<pre class="lang:default decode:true">-Xms10m -Xmx10m</pre>
&nbsp;

Je vais également ajouter les paramètres à la JVM pour suivre le GC.

Et le résultat est là, l'application ne plante toujours pas après 6 minutes.

Effectivement les paramètres de la JVM donnent une allure différente d'une application en production, mais ici le but est de reproduire un scénario de fuite mémoire sans OutOfMemoryError. Le GC a donc l'allure suivante :
<p style="text-align: center;"><a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/gc1.png"><img class="aligncenter size-full wp-image-64" title="gc" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/gc1.png" alt="" width="600" height="388" /></a></p>
On voit un premier Full GC vers 1min30 ou les SoftReferences sont nettoyées, et puis vers 2min30 c'est la catastrophe, il n'y a que des Full GC, la JVM va constamment réclamer les références issues de l'introspection, le programme va constamment en recréer, avec la saturation de la mémoire la lenteur de tous les FullGC devient manifeste. Et comme dit plus haut les thread dump ne vont pas révéler de point de contention, ils vont juste montrer que l'application est lente. En particulier les thread dump vont surtout révéler les stacks des modules ou l'application est plus lente!

D'ailleurs sur la sortie standard, on voit au premier Full GC les traces suivantes, et elles arrivent  plus régulièrement une fois que les GC s'enchainent :
<pre class="lang:default decode:true">...
[Unloading class sun.reflect.GeneratedConstructorAccessor147]
[Unloading class sun.reflect.GeneratedConstructorAccessor419]
[Unloading class sun.reflect.GeneratedMethodAccessor104]
[Unloading class sun.reflect.GeneratedMethodAccessor151]
[Unloading class sun.reflect.GeneratedMethodAccessor57]
[Unloading class sun.reflect.GeneratedMethodAccessor390]
[Unloading class sun.reflect.GeneratedConstructorAccessor8]
[Unloading class sun.reflect.GeneratedMethodAccessor207]
[Unloading class sun.reflect.GeneratedMethodAccessor395]
[Unloading class sun.reflect.GeneratedConstructorAccessor83]
...</pre>
&nbsp;
<p style="text-align: left;">Autre outil à utiliser, jVisualVM qui est disponible en standard avec le JDK6. On se retrouve avec onglet de monitoring sympa. A noter que les graphes d'activité du CPU ne sont pas disponible en standard sur jVisualVM avec la JDK6.</p>
<p style="text-align: center;"><a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/visualvm-mon1.png"><img class="aligncenter size-full wp-image-63" title="visualvm-mon" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/visualvm-mon1.png" alt="" width="600" height="438" /></a></p>
<p style="text-align: left;">Ce que je ne voyais pas avec GCViewer c'est que le nombre de threads actives a dramatiquement baissé, ce qui confirme la lenteur exécution, les traitements mettent vraiment plus longtemps, et les autres threads sont alors mises en standby. Si on fait attention à la fenêtre temporelle, ça passe vers 14h48, à ce moment là, la mémoire heap n'est pas encore complètement saturée les GC tenaient jusque là. C'est ensuite que <strong>les</strong> Full GC prennent le relai pour réclamer de la mémoire, c'est donc à ce moment que les SoftReference sont collectées. Et comme dit plus haut, ces références sont recréées par les <em>traitements métier</em>. Et comme le Full GC s'exerce en permanence après ce moment, les références qui viennent d'être recréés sont collectées à nouveau.  Et voilà la boucle est bouclée.</p>

<h1>Conclusion</h1>
<p style="text-align: left;">En conclusion, ce n'est pas parce qu'il n'y a pas de OutOfMemoryError qu'il n'y a pas de fuite mémoire. Plus généralement le réflexe c'est de se demander si notre application utilise beaucoup d'introspection ou plus simplement si l'application utilise beaucoup de références plus faibles comme les WeakReference, SoftReference.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date><![CDATA[2010-02-12 21:12:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-12 20:12:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[une-fuite-memoire-beaucoup-de-reflection-et-pas-de-outofmemoryerror]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="memoryleak"><![CDATA[memoryleak]]></category>
		<category domain="post_tag" nicename="outofmemoryerror"><![CDATA[OutOfMemoryError]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[reflection]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[suf_pseudo_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Ehab]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ehab.taleb@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.150.19.227]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-02 11:04:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-02 10:04:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[great article Brice, but what should be done in this case?

1- increase the heap size ?
2- control the use of reflection in our application ? we can not control all third parties
3- is there a param to avoid using the SoftRefrence and force the JVM not cache them. this way we create a lot of objects so the Iden will be full fast and we will have more GC and not Full GC.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Brice]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil+blog@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://fr.linkedin.com/in/dutheilbrice</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.150.19.227]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-02 11:52:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-02 10:52:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Ehab,

1,2 - Ce n'est pas un problème, c'est juste qu'il ne faut pas écarter la piste de la fuite mémoire parcequ'il n'y a pas de OOME. Ce que la JVM te garanti c'est qu'elle aura virer toutes les SoftReference avant de lever une OutOfMemoryError, la JVM indique quand elle vire ces classes (un extrait de la sortie est dans l'article).
3 - Il y a bien une propriété qui permet de ne pas utiliser de SoftReference (pour la reflection), mais dans ce cas, il n'y a pas de cache du tout, l'introspection fait alors contamment appel à la JVM via des appels natifs. Ce stress peut ralentir énormément l'introspection si elle est intensivement utilisée.

La prpriété en question se défini au démarrage de la JVM, donc :
<code>-Dsun.reflect.noCaches=true</code>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Controler son architecture à l&#039;aide d&#039;AspectJ</title>
		<link>http://www.blog2.arkey.fr/?p=130</link>
		<pubDate>Fri, 09 Apr 2010 08:04:00 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Avant-propos</h1>
Aujourd'hui les équipes qui utilisent les outils d'intégration peuvent suivre et contrôler que le code commité compile, et si il y a des TU que les tests sont passant. Certaines équipent vont plus loin en utilisant l'intégration continue pour tester l'intégration des composants, typiquement en les faisant fonctionner ensemble, ou encore en testant le déploiement.

Alors effectivement c'est déjà plus rare de voir des tests d'intégration et des tests de déploiement, même si le retour sur investissement est intéressant, ce genre de pratique est couteuse à mettre en place. Et d'autant plus qu'il faut maintenir ces tests quand le code évolue ou quand l'architecture évolue. Mais encore une fois ce genre de pratique peut vous sauver la vie, en vous assurant d'une qualité sur ces sujets respectifs.

Cela dit on voit plus rarement en intégration continue le contrôle des règles d'architecture, à supposer que ces règles soient établies et surtout connues des équipes. Certaines personnes se sont intéressées à la question.

Voici les entrées qui ont inspiré <strong>très fortement</strong> cet article :
<ul>
	<li> http://blog.jayway.com/2010/03/28/architectural-enforcement-with-aid-of-aspectj/</li>
	<li>http://www.theserverlabs.com/blog/2008/09/10/compile-time-architecture-enforcement-revisited-aspectj-maven-and-eclipse/</li>
</ul>
Avant de continuer je tiens à préciser que cette entrée n'est pas un retour d'expérience, mais plutôt une revue de ce qui peut être fait aujourd'hui à ce sujet.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2010-04-09 09:04:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-09 08:04:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[architecture]]></category>
		<category domain="post_tag" nicename="architecture"><![CDATA[architecture]]></category>
		<category domain="category" nicename="aspectj"><![CDATA[aspectj]]></category>
		<category domain="post_tag" nicename="aspectj"><![CDATA[aspectj]]></category>
		<category domain="category" nicename="maven"><![CDATA[maven]]></category>
		<category domain="post_tag" nicename="maven"><![CDATA[maven]]></category>
	</item>
	<item>
		<title>Les interfaces et leurs abus</title>
		<link>http://www.blog2.arkey.fr/?p=132</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=132</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>La question ?</h1>
Débat qui n'est pas particulièrement tranché : Faut-il toujours mettre des interfaces dans notre code ?

Les réponses à cette question vous vous en doutez ne sont pas manichéenne, bien évidement les extrêmes ne sont jamais bon. Les extrêmes se présentent ainsi :
<ul>
	<li>A une implémentation une interface.</li>
	<li>Les interfaces c'est nul, j'utilise à fond les objet entre eux.</li>
</ul>
Je pense que Andy Hunt a raison : Le contexte est roi !

Références :

http://stackoverflow.com/questions/90851/is-it-just-me-or-are-interfaces-overused

http://stackoverflow.com/search?q=one+interface+one+implementation+]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2010-04-20 20:41:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a2f0f548282605244d43815dea7a39b1]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3fda469ae4631c60fb9ec90fa4d21755]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cool stuff</title>
		<link>http://www.blog2.arkey.fr/cool-stuff/</link>
		<pubDate>Fri, 09 Jul 2010 10:12:22 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?page_id=164</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Le mouvement anti-if</h1>
<em>Pour que le design de notre code soit un peu plus objet!</em>
<a href="http://www.antiifcampaign.com"><img class="alignnone" src="http://www.antiifcampaign.com/_export/anti-if-campaign-ive-joined.gif" alt="I have joined Anti-IF Campaign" width="120" height="60" /></a>
<p>&nbsp;</p>
<h1>Quelques livres à posséder</h1>
[amazon asin=0321503627&template=the_info&live=1]
[amazon asin=0132350882&template=the_info&live=1]
[amazon asin=0321125215&template=the_info&live=1]
[amazon asin=0596809484&template=the_info&live=1]
[amazon asin=0321349601&template=the_info&live=1]
[amazon asin=0321356683&template=the_info&live=1]
[amazon asin=0557078326&template=the_info&live=1]
[amazon asin=1934356050&template=the_info&live=1]
[amazon asin=0321200683&template=the_info&live=1]
[amazon asin=143022889X&template=the_info&live=1]
[amazon asin=0321127420&template=the_info&live=1]
[amazon asin=0470876417&template=the_info&live=1]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[2010-07-09 11:12:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-09 10:12:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cool-stuff]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-excerpt-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-content-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-newwindow]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>L&#039;injection de dépendance dans JEE 6 rocks</title>
		<link>http://www.blog2.arkey.fr/?p=179</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[Pendant ma première mission dans le monde du travail en Java, on faisait du code à l'ancienne, j'essayais d'appliquer dès que je pouvais les patterns appris à l'école et dans les livres. J'ai vu des choses horrible comme le <em>pattern lessive</em> (comme dash 3 en 1), je ne suis pas l'inventeur de ce petit nom mais je l'aime bien. Et évidement l'instanciation, la création, et les dépendances des objets étaient gérés par le développeur.

Puis changement de mission je découvre un tout nouvel environnement basé sur Spring, je dois dire que j'ai été conquis à peu près immédiatement. Ça fait bien 4-5 ans que je travaille avec Spring aujourd'hui, et je dois dire que ce framework a vraiment changé la vie des développeurs. Mais voilà depuis quelques temps déjà, je commence à en avoir marre de gérer la configuration XML, et surtout, surtout j'en ai marre de la programmation procédurale dans des objets.
<h1>Le grief</h1>
Eh ouai les gars depuis que je travaille j'ai rarement vu de la programmation vraiment <strong>orientée objet</strong> à part dans le code de certains framework. La plupart du temps on fait appel à une méthode qui fait appel à une autre méthode qui fait appel une autre méthode dans un autre objet et ainsi de suite, histoire d'avoir l'impression de donner des responsabilités à des objets. <strong>Mais en prenant un peu de recul on observe qu'ils ne s'agit que d'appeler des scripts compilés qui sont donc rangés dans des répertoires différents. Les responsabilités sont réparties par *Helper, *Manager, *Service, *Facade, mais par par concept.</strong>

Et on balade, on modifie, on instancie une structure de données plus ou moins objet, avec dans 99% des cas 100% des propriétés publiques, mais avec des setters/getters qui ne font rien. Merci la convention JavaBean! Pour rappel ces beans ont été inventé en tant que composant pour les interfaces web. Le but étant d'alimenter les propriétés d'un bean dans un ordre quelconque, mais certainement pas pour tous les objets!

Pas de bol avec l'introspection, la plupart des frameworks ont utilisé ces getters/setters directement. Et Spring fait partie de ces framework (mais depuis Spring 2.5 il est possible de s'en passer avec l'autowiring). Heureusement les technologies ont évoluées, et on voit certains framework accéder à la propriété directement (par exemple mockito).

Le problème avec l'injection par setter c'est que :
<ol>
	<li>Il faut ajouter un setter, qui la plupart du temps ne sert vraiment à rien à part à avoir plus de code.</li>
	<li>L'injection est dépendante du framework d'injection, c'est-à-dire que le framework doit connaitre le bean et y injecter l'autre.</li>
	<li>Cette approche favorise le code procédural, je trouve assez difficile de travailler de manière orientée objet avec de l'injection et d'autres objets. Sinon on est obligé de recourir au fameux ApplicationContextAware qui injecte le contexte Spring, après il sera possible d'utiliser ce contexte Srring, mais du coup le code devient dépendant de Spring et voit des aspects techniques à des endroit non voulu.</li>
</ol>
<span style="color: #ff0000;">Exemple code</span>

Cette limite imposée par la manière d'injecter les beans avec des setters mine complètement l'architecture, ou le design du code, et donc la possibilité de travailler de manière orientée objet. Typiquement les gens qui veulent travailler en DDD avec Spring et consorts peuvent avoir des soucis de design assez pénible à résoudre.

Lorsque j'ai assisté à la conférence de Adam Bien (que je ne connaissais pas) au ParisJug de juillet, j'ai été particulièrement enjoué par ses propos, notamment sur les setters/getters, DDD, CDI dans JEE6, la campagne anti-if (anti-if campaign), la sur-utilisation des interfaces (que j'attaque assez régulièrement aussi), et encore d'autres sujets sujet à controverse. Bref ça m'a rappelé certaines discutions passionnantes avec Eric Lefevre.

Autant dire que je suis devenu fan.
<h1>CDI dans JEE6 ça déchire</h1>
Honnêtement dans les présentations JEE6 auquelles j'ai assisté, j'avais vu des trucs cool, des améliorations sur les EJB, les WebBeans, mais pas quelque chose qui remue vraiment la manière d'écrire une application. Jusqu'à cette fameuse présentation de Adam Bien.

Alors CDI, ça veut dire Contexts and Dependency Injection, c'est la <a href="http://jcp.org/en/jsr/summary?id=299">JSR 299</a>. Alors ok, super JEE permet de faire ce que fait Spring, Guice ou autres encore, mais regardons ce que CDI peut faire en plus ou mieux.

<span style="color: #ff0000;">S'inspirer de </span><a href="http://www.germanescobar.net/2010/01/from-seam-to-cdi.html"><span style="color: #ff0000;">http://www.germanescobar.net/2010/01/from-seam-to-cdi.html</span></a>

Intercepteur-Décorateur (penser aux traits en scala)
<h1>Morale</h1>
Enfin nous allons pouvoir penser en objet. Malheureusement beaucoup de personnes n'ont pas été habituée à penser objet. Les années d'expérience passées sur des projets réglé pour faire du code procédural n'ont pas vraiment aidé à renfocer les connaissances et l'utilisation des bonnes pratiques objets. Pour n'en nommer que quelques unes :
<ul>
	<li>LSP : Liskov Substitution Principle</li>
	<li>SRP : Single Responsability Principle</li>
	<li>SLAP : Single Level of Abstraction Principle</li>
	<li>OCP : Open Clased Principle</li>
	<li>Les patterns : Strategy, State, Chain Of Responsability, Command, Composite, Builder (à connaitre en particulier le Builder de Joshua Bloch cf. Effective Java §2.Item 11)</li>
	<li>L'encapsulation, eh oui en objet on encapsule les données et les comportements, et on design une api pour travailler avec l'objet.</li>
	<li>Le polymorphisme, ba ouai aussi en objet, plutôt que d'utiliser des ifs à outrance.</li>
</ul>
L'évolution va dans le bon sens, mais il va y avoir de la résistance, c'est normal, on se sent à l'aise dans les repères qu'on connait; c'est la zone de confort dont il faut sortir. Et puis bien sûr il y a les projets existants qui ne se modifient pas comme ça, mais là il faut y aller petit à petit. Quoiqu'il arrive il ne faut pas écrire du code legacy aujourd'hui sous prétexte que c'est la "norme". Il faut favoriser l'expérience des développeurs code legacy / code bien pensé (sans sur-ingénierie) pour qu'ils soit capable d'écrire du code correct, ça rends service à tout le monde!

Le TDD/BDD avec le pair-programming favorise l'exploitation du code objet dans beaucoup de dimensions. Je pense que les experts derrière JEE6 font partie de ces gens qui ont vécu avec les idées d'il y a 10ans voire plus, qui ont souffert comme nous, qui ont aussi fait des erreurs, et qui reviennent aujourd'hui avec des idées qui vont affranchir le développement actuel de limites bien pénibles.

Je ne travaille pas dans un projet JEE6 mais d'essayer JEE6 ce sera très probablement l'adopter.
<h1>Références</h1>
<a href="http://www.adam-bien.com/roller/abien/entry/encapsulation_violation_with_getters_and">http://www.adam-bien.com/roller/abien/entry/encapsulation_violation_with_getters_and</a>

<a href="http://jcp.org/en/jsr/summary?id=299">http://jcp.org/en/jsr/summary?id=299</a>

<a href="http://blogs.sun.com/enterprisetechtips/entry/using_cdi_and_dependency_injection">http://blogs.sun.com/enterprisetechtips/entry/using_cdi_and_dependency_injection</a>

<a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date><![CDATA[2010-07-12 22:18:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="adam-bien"><![CDATA[adam bien]]></category>
		<category domain="category" nicename="architecture"><![CDATA[architecture]]></category>
		<category domain="post_tag" nicename="cdi"><![CDATA[cdi]]></category>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="design"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="design"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="di"><![CDATA[di]]></category>
		<category domain="post_tag" nicename="injection-de-dependance"><![CDATA[injection de dépendance]]></category>
		<category domain="post_tag" nicename="jee6"><![CDATA[jee6]]></category>
		<category domain="post_tag" nicename="jsr299"><![CDATA[jsr299]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[spring]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_msp_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_msp_keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[injection de dépendance, di, cdi, dependency injection, jee6, jee 6, design, adam bien, spring, jsr299, jsr 299]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>La technique pomodoro</title>
		<link>http://www.blog2.arkey.fr/?p=198</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[Slide à lire pour écrire l'article : http://www.slideshare.net/alimenkou/effective-time-management-with-pomodoro-technique

Technique

http://www.pomodorotechnique.com/

Les outils

http://www.focusboosterapp.com/

http://code.google.com/p/pomodairo/

http://pomodoro.ugolandini.com/

http://reborg.github.com/pomodori/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2010-08-17 09:35:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile"><![CDATA[agile]]></category>
		<category domain="category" nicename="agilite"><![CDATA[agilité]]></category>
		<category domain="post_tag" nicename="agilite"><![CDATA[agilité]]></category>
		<category domain="post_tag" nicename="pair-programming"><![CDATA[pair-programming]]></category>
		<category domain="post_tag" nicename="pomodoro"><![CDATA[pomodoro]]></category>
		<category domain="post_tag" nicename="scrum"><![CDATA[scrum]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5ffbf6da610e7b22f33f1ff9938e1dd2]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c979f386f8ea435cdd244c6cb1f86284]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_45ca02ef2ce844042362f54e0b2bc866]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2fd9101a5f83be685319ed4697a027b1]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0e6954b8f998b454732852bd8380d4c5]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello world!</title>
		<link>http://www.blog2.arkey.fr/2010/01/24/hello-world-2/</link>
		<pubDate>Sun, 24 Jan 2010 19:48:05 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[Well, let's get started!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date><![CDATA[2010-01-24 19:48:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-24 19:48:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="miscellanees"><![CDATA[miscellanées]]></category>
	</item>
	<item>
		<title>A Propos</title>
		<link>http://www.blog2.arkey.fr/apropos/</link>
		<pubDate>Sun, 24 Jan 2010 19:48:05 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[N'ayant pas forcément une mémoire d'éléphant, j'ai créé ce blog en tant que petit aide-mémoire et aussi pour communiquer sur quelques sujets sympa.

Il est orienté en particulier sur les technologies et les pratiques gravitant autour de Java. Tous les sujets ne resterons pas forcément cantonnés à Java.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date><![CDATA[2010-01-24 19:48:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-24 19:48:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[apropos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>100</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>intellij_found_it</title>
		<link>http://www.blog2.arkey.fr/2012/07/30/script-pour-installer-le-jdk-5-sur-macosx-lion/intellij_found_it/</link>
		<pubDate>Mon, 29 Aug 2011 18:33:50 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2011/08/intellij_found_it.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date><![CDATA[2011-08-29 20:33:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-08-29 18:33:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[intellij_found_it]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>274</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2011/08/intellij_found_it-e1314642860664.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/intellij_found_it-e1314642860664.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"496";s:6:"height";s:3:"325";s:14:"hwstring_small";s:23:"height='83' width='128'";s:4:"file";s:44:"2011/08/intellij_found_it-e1314642860664.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"intellij_found_it-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"intellij_found_it-300x196.png";s:5:"width";s:3:"300";s:6:"height";s:3:"196";}s:5:"large";a:3:{s:4:"file";s:30:"intellij_found_it-1024x671.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"671";}s:14:"post-thumbnail";a:3:{s:4:"file";s:29:"intellij_found_it-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:20:"copperific-thumbnail";a:3:{s:4:"file";s:29:"intellij_found_it-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:18:"copperific-gallery";a:3:{s:4:"file";s:29:"intellij_found_it-479x240.png";s:5:"width";s:3:"479";s:6:"height";s:3:"240";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:9:"full-orig";a:3:{s:5:"width";s:4:"1040";s:6:"height";s:3:"682";s:4:"file";s:21:"intellij_found_it.png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microbenchmark introspection JDK / CGLIB</title>
		<link>http://www.blog2.arkey.fr/?p=299</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=299</guid>
		<description></description>
		<content:encoded><![CDATA[Petit article sur les performances de la réflection dans Java, et au cours d'un micro-benchmark. Comme beaucoup l'ont dit avant moi, un micro-benchmark est difficile à mettre en oeuvre correctement. Et si c'est le cas, il faut savoir qu'un microbenchmark ne représente justement pas les performances du code testé dans la nature, ou dans la jungle d'une grosse application et dont la JVM est le biotope.

DISCLAIMER : Sans rentrer dans les détails, et étant donné que je ne suis pas expert du microbenchmarking, j'ai fait un peu de lecture par ci par là pour me raviver l'esprit :
<ul>
	<li>Sur le blog de Khanh : http://jetoile.blogspot.com/2011/03/microbenchmark-par-la-pratique.html</li>
	<li>Sur devlopperWorks l'articles de  : http://www.ibm.com/developerworks/java/library/j-benchmark1.html</li>
</ul>
Pour m'amuser comme Khanh, j'ai également choisi d'utiliser <a title="Caliper" href="http://code.google.com/p/caliper/">Caliper</a> pour faire mes microbenchmark.
<h2>Ce que je veux tester</h2>
Connaitre la performance de différents aspects de l'introspection, notamment :
<ul>
	<li>avec l'outillage du JDK</li>
	<li>avec l'outillage FastClass / FastMethod de CGLIB</li>
	<li>comment ce comporte ce benchmark compilé en version majeure 50 et lancé sur une VM Java 6</li>
	<li>comment ce comporte ce benchmark compilé en version majeure 51 et lancé sur une VM Java 7</li>
	<li>comparer avec un appel direct</li>
</ul>
<h2>Le code des différents benchmarks</h2>
Pour commencer le setUp, je prévoie ici toute les variables qui devront être initialisées en dehors des benchmarks.

[java]private FastClass cglib_stringFastClass;
private FastMethod cglib_hashCodeFastMethod;
private final Class[] emptyParameterTypes = {};
private final Object[] emptyArgs = {};
private Class&lt;String&gt; jdk_stringClass;
private Method jdk_hashCodeMethod;

@Override
public void setUp() throws Exception {
cglib_stringFastClass = FastClass.create(String.class);
cglib_hashCodeFastMethod = cglib_stringFastClass.getMethod(&quot;hashCode&quot;, emptyParameterTypes);

jdk_stringClass = String.class;
jdk_hashCodeMethod = jdk_stringClass.getMethod(&quot;hashCode&quot;, emptyParameterTypes);
}[/java]
<h3>Récupérer la classe</h3>
Premièrement je voudrais connaitre les performances de créations d'une classe CGLIB. Pour comparer l'incomparable, du coté du JDK j'ai choisi de faire un benchmark sur Class.forName, plutôt que d'utiliser la référence à la classe (HashMap.class). Depuis le JDK5, cette instruction est directement transposée dans le bytecode par l'opcode <strong>LWC</strong> qui va chercher la classe dan le pool de classe de la VM.

A contrario, jusqu'au JDK 1.4, l'instruction <strong>HashMap.class</strong> faisait donc un <strong>Class.forName()</strong> et stoquait la référence dans un champs synthétique comme celui-là <strong>class$java$util$HashMap</strong>. On pouvit d'ailleurs s'amuser avec des Puzzlers du genre, comment faire pour que cette ligne

[java]System.out.println(&quot;String.class : &quot; + String.class);[/java]

renvoie

[pre]String.class : int[/java]

Je ferme la parenthèse, de toute façon ce puzzler n'est plus valable.

[java]public void timeJDK_GetClass(int reps) throws Exception {
for (int i = 0; i &lt; reps; i++) {
Class&lt;HashMap&gt; hashMapClass = (Class&lt;HashMap&gt;) Class.forName(&quot;java.util.HashMap&quot;);
}
}[/java]

&nbsp;

[java]public void timeCGLIB_FastClassCreate(int reps) throws Exception {
for (int i = 0; i &lt; reps; i++) {
FastClass.create(HashMap.class); // CGLIB utilise un cache interne quand même
}
}[/java]

A noter que ce code là ne sera pas élider par le compiler, ni le JIT, simplement parce qu'il y a potentiellement un effet de bord sur ces appels. Dans les faits il y en a vraiment un, le code fait bien du travail à coté.
<h3>Récupérer la méthode</h3>
Là on commence à avoir des éléments un peu plus intéressants, quels performances attendre d'un getMethod coté JDK ou coté CGLIB. Sur chaque benchmarks on vite de se taper la récupération de la classe / construction de la FastClass

[java]public void timeJDK_GetMethod(int reps) throws Exception {
for (int i = 0; i &lt; reps; i++) {
jdk_stringClass.getMethod(&quot;hashCode&quot;, emptyParameterTypes);
}
}[/java]
[java]public void timeCGLIB_GetFastMethod(int reps) throws Exception {
for (int i = 0; i &lt; reps; i++) {
cglib_stringFastClass.getMethod(&quot;hashCode&quot;, emptyParameterTypes);
}
}[/java]
<h3>Invoquer la méthode</h3>
Ces différents tests vont mesurer l'efficacité de la réflection du JDK, de CGLIB, par rapport à un appel direct.

[java]public void timeJDK_InvokeMethod(int reps) throws Exception {
for (int i = 0; i &lt; reps; i++) {
jdk_hashCodeMethod.invoke(&quot;bob&quot;, emptyArgs);
}
}[/java]
[java]public void timeCGLIB_InvokeFastMethod(int reps) throws Exception {
for (int i = 0; i &lt; reps; i++) {
cglib_hashCodeFastMethod.invoke(&quot;bob&quot;, emptyArgs);
}
}[/java]

Pour information il existe quelques astuces pour améliorer les performances de la réflection du JDK, notamment de bypasser les vérifications de sécurité, avec l'appel suivant <strong>setAccessible(true)</strong>.

[java]public void timeJDK_InvokeMethod_with_SetAccessible(int reps) throws Exception {
jdk_hashCodeMethod.setAccessible(true);
for (int i = 0; i &lt; reps; i++) {
jdk_hashCodeMethod.invoke(&quot;bob&quot;, emptyArgs);
}
}[/java]

Enfin le tube témoin :  l'appel direct :

[java]public void timeDirect_Invocation(int reps) throws Exception {
for (int i = 0; i &lt; reps; i++) {
&quot;snfvklsdnflslùkgvhdklsqhvljdshvljhndsljvnsldjùnvjslbvjsbjkvbkmbb&quot;.hashCode();
}
}[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>299</wp:post_id>
		<wp:post_date><![CDATA[2011-10-11 20:29:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[microbenchmark-introspection-jdk-cglib]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cglib"><![CDATA[cglib]]></category>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="introspection"><![CDATA[introspection]]></category>
		<category domain="post_tag" nicename="java6"><![CDATA[java6]]></category>
		<category domain="post_tag" nicename="java7"><![CDATA[java7]]></category>
		<category domain="post_tag" nicename="jdk6"><![CDATA[jdk6]]></category>
		<category domain="post_tag" nicename="jdk7"><![CDATA[jdk7]]></category>
		<category domain="post_tag" nicename="microbenchmark"><![CDATA[microbenchmark]]></category>
		<category domain="category" nicename="performance"><![CDATA[performance]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[reflection]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-excerpt-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-content-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-newwindow]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jdk5_install_mountain_lion</title>
		<link>http://www.blog2.arkey.fr/2012/07/30/script-pour-installer-le-jdk-5-sur-macosx-lion/jdk5_install_mountain_lion/</link>
		<pubDate>Sun, 29 Jul 2012 22:14:13 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/wp-content/uploads/2011/08/jdk5_install_mountain_lion.png</guid>
		<description></description>
		<content:encoded><![CDATA[JDK 5 installation on Mountain Lion]]></content:encoded>
		<excerpt:encoded><![CDATA[JDK 5 installation on Mountain Lion]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date><![CDATA[2012-07-30 00:14:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-29 22:14:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jdk5_install_mountain_lion]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>274</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.blog2.arkey.fr/wp-content/uploads/2011/08/jdk5_install_mountain_lion.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/jdk5_install_mountain_lion.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"955";s:6:"height";s:3:"626";s:14:"hwstring_small";s:23:"height='83' width='128'";s:4:"file";s:38:"2011/08/jdk5_install_mountain_lion.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:38:"jdk5_install_mountain_lion-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:38:"jdk5_install_mountain_lion-300x196.png";s:5:"width";s:3:"300";s:6:"height";s:3:"196";}s:14:"post-thumbnail";a:3:{s:4:"file";s:38:"jdk5_install_mountain_lion-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:20:"copperific-thumbnail";a:3:{s:4:"file";s:38:"jdk5_install_mountain_lion-140x140.png";s:5:"width";s:3:"140";s:6:"height";s:3:"140";}s:18:"copperific-gallery";a:3:{s:4:"file";s:38:"jdk5_install_mountain_lion-479x240.png";s:5:"width";s:3:"479";s:6:"height";s:3:"240";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[JDK 5 installation on Mountain Lion]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Home</title>
		<link>http://www.blog2.arkey.fr/2012/08/30/home/</link>
		<pubDate>Thu, 30 Aug 2012 16:31:30 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=379</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date><![CDATA[2012-08-30 18:31:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-30 16:31:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[home]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="blog"><![CDATA[Blog]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[379]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://www.blog2.arkey.fr/]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.blog2.arkey.fr/2012/08/30/380/</link>
		<pubDate>Thu, 30 Aug 2012 16:32:00 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=380</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>380</wp:post_id>
		<wp:post_date><![CDATA[2012-08-30 18:32:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-30 16:32:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[380]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="blog"><![CDATA[Blog]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[164]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.blog2.arkey.fr/2012/08/30/381/</link>
		<pubDate>Thu, 30 Aug 2012 16:32:00 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=381</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date><![CDATA[2012-08-30 18:32:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-30 16:32:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[381]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="blog"><![CDATA[Blog]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.blog2.arkey.fr/2012/08/30/382/</link>
		<pubDate>Thu, 30 Aug 2012 16:32:00 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=382</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>382</wp:post_id>
		<wp:post_date><![CDATA[2012-08-30 18:32:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-30 16:32:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[382]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="blog"><![CDATA[Blog]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[245]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mockito 1.8.3</title>
		<link>http://www.blog2.arkey.fr/2010/03/09/mockito-1-8-3/</link>
		<pubDate>Tue, 09 Mar 2010 20:41:20 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[Le voilà il est sorti. Ce framework de mock digne épigone de easymock, a su plaire et propose plus que son ancêtre. Mais quoi de neuf qui vaut la peine d'être mentionné?!
<h2>Extensions des annotations</h2>
Le code ci-dessous présente le support étendu des annotations.
<ul>
    <li><strong>@InjectMock</strong>, qui permet donc d'injecter les bouchons et les espions dans l'instance de ce champs. Il s'agit le plus souvent de classe testée. Attention la classe instanciée ne doit pas être nulle.</li>
    <li><strong>@Mock</strong> a été étendu pour fournir des paramètres, équivalent aux possibilités offertes par <strong>withSettings</strong>, par exemple :[java]Mockito.mock(Class< ?>, Mockito.withSettings().name("a mock for bob"))[/java]</li>
    <li><strong>@Spy</strong> qui comme son nom l'indique permet de créer un espion à partir d'une instance déjà créé.</li>
    <li><strong>@Captor</strong> qui permet d'instancier un <strong>ArgumentCaptor</strong>.</li>
</ul>
 
<pre class="lang:java mark:18,21,27,30 decode:true " >import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertSame;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class BusinessTestStuff {

  @InjectMocks
  private BusinessStuff stuffToTest = new BusinessStuff();

  @Mock(name = "businessMethods")
  private List&lt;String&gt; methodList;

  @Mock(name = "technicalMethods")
  private List&lt;String&gt; methodList2;

  @Spy
  private Map&lt;Class &lt;?&gt;, Object&gt; classInstances = new HashMap&lt;Class &lt;?&gt;, Object&gt;();

  @Captor
  private ArgumentCaptor&lt;String&gt; methodCaptor;

  @Test
  public void shouldDoSomethingWithBusinessAndTechnicalMethod() {
    // given
    given(methodList.get(15)).willReturn("businessMethod");
    given(methodList2.get(15)).willReturn("technicalMethod");

    // when
    stuffToTest.doSomething(15);

    // then
    // ne lève pas d'exception
  }

  @Test
  public void shouldCaptArgument() {
    // given
    // when
    stuffToTest.addBusinessStuff("businessMethod");

    // then
    verify(methodList).add(methodCaptor.capture());
    assertSame("businessMethod", methodCaptor.getValue());
  }

  @Test
  public void shouldSpyMyMap() {
    // given
    // when
    classInstances.put(String.class, "instance");

    // then
    verify(classInstances).put(eq(String.class), any(String.class));
  }
}</pre> 


Pourquoi ces annotations? Eh bien afin de rendre les tests plus clairs. Faire du beau code dans le code de production ne suffit pas, il faut faire attention à la clareté et l'expressivité de ces tests. Il ne faut pas oublier qu'on écrit seulement une fois du code et qu'on le relit bien plus. Parlez à vos équipe de maintenance ou d 'évolutions combien de temps il passent à comprendre ce que vous avez voulu coder.

L'idée c'est d'écrire du code le plus propre possible, mais d'avoir aussi les tests les plus propres possibles, ceci aidera à comprendre à votre lecteur quelle(s) responsabilité(s) et quelle(s) comportement(s) son attendu.
<h2>Pour tester du code <span style="text-decoration: underline;">legacy</span></h2>
Ah voilà qui va en intéresser plus d'un. Pour votre ancien code ou vous devez traverser une grappe d'objet pour mocker le dernier, c'était plutôt fastidieux.

<pre class="lang:java decode:true " >Mockito.when(mockedLegacyCode.getTop()).thenReturn(mockedTop);

Mockito.when(mockedTop.getMiddle()).thenReturn(mockedBottomRight);

Mockito.when(mockedBottomRight.getId()).thenReturn("BR");</pre>

Pour information, depuis longtemps déjà Mockito supporte la création de mock avec des réponses prédéfinies. Jusque là par défaut, les mock retournait les valeur par défaut, 0 pour un entier, null pour une référence, etc... Typiquement on évitais les null avec la réponse, qui renvoyait donc des mocks :

[java]Mockito.mock(LegacyCode.class, Mockito.RETURNS_MOCKS);[/java]

Cependant la limite de cette réponse était qu'on ne pouvait pas créer des comportements pour des objets profonds dans la grappe d'objet. Et c'est là que la version 1.8.3 fournit un petit ajout assez sympa, on pourra maintenant écrire des choses comme :

[java]CrapyLegacy mock = Mockito.mock(CrapyLegacy.class, Mockito.RETURNS_DEEP_STUBS);

Mockito.when(mock.getTop().getMiddle().getBottomRight().getId()).thenReturn("deep id");

assertEquals("deep id", mock.getTop().getMiddle().getBottomRight().getId());[/java]

De la même manière avec les annotations étendues, on déclarera le mock de cette façon :

[java]@Mock(answer = RETURNS_DEEP_STUBS)

private CrapyLegacy mock;[/java]

<strong>Attention cependant, ceci est une facilité pour tester le code legacy, utiliser cette facilité aujourd'hui pour du nouveau est un signe grave que vous êtes en train de développer du code Legacy!</strong>

<strong>En effet vous jouez avec la loi de Demeter, et quand on joue à la loi de Demeter c'est très souvent parce que le code créé n'est pas <span style="text-decoration: underline;">orienté objet</span> : il s'agit de code procédural! <span style="color: #800000;">Le code procédural peut coûter cher voire très cher à maintenir et à faire évoluer</span> <sup style="vertical-align: super;">[1]</sup>. C'est un des élément de la dette technique et financière qui coutera plus cher d'année en année!</strong>
<h2>Un mot sur le TDD</h2>
Mockito s'enrichit, fournit des facilités, permet d'éclaircir le code, pour véritablement être dans l'esprit TDD. L'esprit TDD ce n'est pas de faire de la couverture de code, ce n'est pas d'écrire du code puis de le tester après, ce n'est pas de tester la mécanique interne d'une classe. C'est juste commencer par écrire un test simple pour exprimer une responsabilité et un comportement qu'on attend sur un objet, puis d'enrichir le code et le test associé.

Si vous voulez faire du reverse engineering ou essayer des framework inconnus, commencez par écrire un test qui correspond à ce que vous attendez, puis refactorer petit à petit le code testé et le test. Le code s'enrichira petit à petit, si ça devient difficile peut-être que voues êtes face à un problème de découpage de responsabilités, ça peut induire de créer de nouveaux objets et donc de spliter le test également. Ce faisant vous réduisez la complexité du code et du test.

Si vous le nom de vos classes ou de vos méthodes ne sont pas satisfaisant c'est que les responsabilités ne sont pas clairement définies/identifiées, un refactoring est à prévoir.

Au début c'est un peu difficile, mais avec un peu d'exercice on devient meilleur! N'est-ce pas le but de l'agilité, de s'améliorer!

MAJ : Source [1] : <a href="http://www3.interscience.wiley.com/journal/114082374/abstract?CRETRY=1&amp;SRETRY=0">http://www3.interscience.wiley.com/journal/114082374/abstract?CRETRY=1&amp;SRETRY=0</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date><![CDATA[2010-03-09 21:41:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-09 20:41:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mockito-1-8-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile"><![CDATA[agile]]></category>
		<category domain="post_tag" nicename="agilite"><![CDATA[agilité]]></category>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="mockito"><![CDATA[mockito]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-excerpt-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-content-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-newwindow]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[un dba qui connait Brice]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[casimir@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.178.155.99]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-25 17:30:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-25 16:30:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bonjour, 

A ton avis, faut-il réévaluer la spéculation astro-mythologique de Freud dans son approche structuraliste de la psychosomatique fliessienne ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Brice]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil+blog@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://fr.linkedin.com/in/dutheilbrice</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.150.19.227]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-25 19:40:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-25 18:40:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah, ça dépend!

Et connais-tu le théorème de Palachu ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>10</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>A propos du design de vos objets, des getters et setters, de equals/hashCode et de la mutabilité</title>
		<link>http://www.blog2.arkey.fr/2010/03/30/a-propos-du-design-de-vos-objets-des-getters-et-setters-de-equalshashcode-et-de-la-mutabilite/</link>
		<pubDate>Tue, 30 Mar 2010 17:20:52 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Prologue</h1>
A l'école nos professeurs nous apprenaient ce qu'était la programmation orientée objet; en particulier l'encapsulation. En effet avoir un accès public aux variables internes d'un objet n'est pas particulièrement recommandé, pourtant nous avons connaissons tous la convention JavaBean :

<pre class="lang:java decode:true " >class Bean {
  /** constructeur sans argument, optionnel si c'est le seul constructeur de la classe */
  public Bean() { }

  public void setBeanName(String name) {
    beanName = name;
  }

  public String getBeanName() {
    return beanName;
  }
}</pre> 


Manque de bol, cette convention qui a pourtant son utilité -voire sa nécéssité- peut dans certains contextes  briser l'encapsulation, et plus dangereux pour votre code, elle permet à vos objets d'être mutable, c'est à dire de pouvoir modifier l'état d'un objet après sa création. Bien que dans certains cas le design ou le rôle de la classe demande cette caractéristique, dans beaucoup d'autres situations la mutabilité peut poser problème.

D'ailleurs historiquement les JavaBeans ont été pensé pour être utilisé par des applications  graphiques afin d'être construit itérativement et finalement pour être facilement dé/sérialisés [1]. Mais ces objets exposent publiquement leurs états, du coup :
<ol>
    <li>Il y a de l'adhérence à des propriétés internes d'un objet, s'il y a beaucoup de code qui utilise ces propriétés internes, l'évolutivité et la maintenance de ce code peut très vite devenir difficile et donc couteuse.</li>
    <li>Ce n'est plus vraiment de la programmation orientée objet. C'est en quelque sorte des variables globales, ça fait plus de 30 ans qu'on sait que les variables globales c'est mal! Demandez à Barbara Liskov [2].</li>
    <li>Avec cette possibilité de muter les objets, il peut y avoir des problèmes au runtime, et croyez moi avec l'arrivée de la parallélisation en plus dans vos applications il va y avoir des surprises.</li>
</ol>
Bon revenons au design, et aux problèmes rencontrés.
<h1>Illustration des problèmes de design du code</h1>
<h2>hashCode et equals</h2>
Donc pour commencer, on va juste faire quelques tests sur un objet sans les méthodes <em>hashCode()</em> et <em>equals()</em>. Prenons les test suivants, je créé 4 instances de beans, <em>obj1</em> et <em>obj3</em> puis <em>obj2</em> et <em>obj4</em> ont les mêmes propriétés.

Ce test montre les problèmes quand on oublie les méthodes <em>equals</em> et <em>hashCode</em>.

<pre class="lang:java mark:44,45,51,52 decode:true " >public class MutabilityCanBeBadTest {
  private AJavaBean obj1;
  private AJavaBean obj2;
  private AJavaBean obj3;
  private AJavaBean obj4;

  @Before
  public void initTheBeans() {
    obj1 = new AJavaBean();
    obj1.setName("paraboot");
    obj1.setSellingDate(new GregorianCalendar(2010, 03, 30).getTime());

    obj2 = new AJavaBean();
    obj2.setName("ethnies");
    obj2.setSellingDate(new GregorianCalendar(2010, 10, 30).getTime());

    obj3 = new AJavaBean();
    obj3.setName("paraboot");
    obj3.setSellingDate(new GregorianCalendar(2010, 03, 30).getTime());

    obj4 = new AJavaBean();
    obj4.setName("ethnies");
    obj4.setSellingDate(new GregorianCalendar(2010, 10, 30).getTime());
  }

  @Test
  public void objectsShouldBeEquals() throws Exception {
    assertEquals(obj2, obj4); // fail
    assertEquals(obj1, obj3); // fail
  }

  @Test
  public void hashCodeShouldBeEquals() throws Exception {
    assertEquals(obj1.hashCode(), obj3.hashCode()); // fail
    assertEquals(obj2.hashCode(), obj4.hashCode()); // fail
  }

  @Test
  public void addAndRemoveToHashBasedCollection() throws Exception {
    Set&lt;AJavaBean&gt; set = new HashSet&lt;AJavaBean&gt;();

    assertTrue(set.add(obj1));
    assertTrue(set.add(obj2));
    assertFalse(set.add(obj3)); // fail
    assertFalse(set.add(obj4)); // fail

    assertEquals(2, set.size()); // fail

    assertTrue(set.remove(obj1));
    assertTrue(set.remove(obj2));
    assertFalse(set.remove(obj3)); // fail
    assertFalse(set.remove(obj4)); // fail
  }
}</pre>

Si l'implémentation de AJavaBean oublie donc le <em>hashCode</em> et le <em>equals</em>, la plus part des assertions ne marchent plus.

<pre class="lang:java decode:true " >public class AJavaBean {
  private String name;
  private Date sellingDate;

  public String getName() {
    return name;
  }

  public void setName(final String name) {
    this.name = name;
  }

  public Date getSellingDate() {
    return sellingDate;
  }

  public void setSellingDate(final Date uid) {
    this.sellingDate = uid;
  }

  @Override
  public String toString() {
    return "AJavaBean [name=" + name + ", sellingDate=" + sellingDate + "]";
  }
}</pre>

En bref :<a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/fail.jpg"><img class="size-full wp-image-98 alignnone" title="fail" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/fail.jpg" alt="" width="160" height="110" /></a>

Que s'est-il passé? S'il n'y a pas de <em>hashCode</em> et de <em>equals</em>, ce sont les méthodes de la super classe qui sont utilisées, dans le code listé plus haut ce sont les méthodes de Object qui seront utilisées pour tester l'égalité et le hashCode.
<ul>
    <li>Donc pour l'égalité Object.equals(Object) vérifie uniquement si l'instance est la même. Ce qui explique que les tests d'égalité échouent plus haut.</li>
    <li>Pour le hashCode, c'est la JVM qui le génère, bref autant dire que le hashcode est différent pour chaque instance. Ceci explique que les instances <em>obj1</em> et <em>obj2</em> sont ajoutées au HashSet, si le hashcode avait été le même alors les opérations d'ajout et de suppression auraient renvoyé <em>false</em> (n'oublions pas qu'il s'agit d'un <strong>Hash</strong>Set).</li>
</ul>
<h2>Et donc pour le code mutable</h2>
Ok, bon maintenant qu'on a vu ça, notre bean implémente les méthodes equals et hashCode de manière idoine, c'est à dire dans notre cas que le code se base sur les attributs <em>name</em> et <em>sellingDate</em>. Pas de mystère, on peut utiliser l'outils de génération de l'IDE.

Eclipse génère ça:

<pre class="lang:java decode:true " >@Override
public int hashCode() {
  final int prime = 31;
  int result = 1;
  result = prime * result + ((name == null) ? 0 : name.hashCode());
  result = prime * result + ((sellingDate == null) ? 0 : sellingDate.hashCode());
  return result;
}

@Override
public boolean equals(final Object obj) {
  if (this == obj) { return true; }
  if (obj == null) { return false; }
  if (getClass() != obj.getClass()) { return false; }
  AJavaBean other = (AJavaBean) obj;
  if (name == null) {
    if (other.name != null) { return false; }
  } else if (!name.equals(other.name)) { return false; }
  if (sellingDate == null) {
    if (other.sellingDate != null) { return false; }
  } else if (!sellingDate.equals(other.sellingDate)) { return false; }
  return true;
}</pre>

Bon à priori on se dit que notre code est safe puisqu'on a nos méthodes <em>equals</em> et <em>hashcode</em>, mais on se fourvoie ; notre objet est mutable!

Exemple :

<pre class="lang:java mark:10-12 decode:true " >  @Test
  public void playWithMutabilityWithABeanInHashBasedCollection() throws Exception {
    Set&lt;AJavaBean&gt; set = new HashSet&lt;AJavaBean&gt;();

    assertTrue(set.add(obj1));
    assertTrue(set.add(obj2));

    obj2.setSellingDate(new GregorianCalendar(2010, 05, 30).getTime()); // valeur précédente : 2010-10-30

    assertTrue(set.remove(obj2)); // owned
    assertEquals(2, set.size()); // owned
    assertFalse(set.add(obj2)); // owned
  }</pre>

Surprise! You just got <a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/pwned.jpg"><img class="alignnone size-full wp-image-101" title="pwned" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/02/pwned.jpg" alt="" width="160" height="118" /></a>

Alors on sait que les méthodes <em>equals</em> et <em>hashCode</em> utilisent les deux propriétés <em>name</em> et <em>sellingDate</em>, donc quand on ajoute un objet dans le HashSet le hashCode correspondra au calcul fait partir des valeurs des ces attributs. Mais voilà le hashcode de l'objet n'est calculé qu'une fois, au moment de l'interaction dans la Map (ajout, suppression, contains, etc...).

Donc ce qu'il se passe c'est qu'on a fait muter l'état de notre objet, du coup le hashcode est différent, mais la collection conserve la référence de l'objet qu'elle contiens et ne recalcule pas son hashcode! C'est aussi avec avec ce genre de code que vous pouvez avoir des fuites mémoires. Et on est même pas dans un contexte multithreadé, alors imaginez si la collection est partagée entre plusieurs thread!
<h2>Attention aux collections ou aux dates du JDK</h2>
Par ignorance puis par laxisme, j'avoue que j'ai écris du code qui ressemble à ça (et j'ai honte de le dire) :

<pre class="lang:java decode:true " >public class AnotherSupposedImmutableClass {

  private final String name;
  private final Date aDate;
  private final Map&lt;String , Integer&gt; aMap;

  public AnotherSupposedImmutableClass(final String name, final Date aDate, final Map&lt;String , Integer&gt; aMap) {
    super();
    this.name = name;
    this.aDate = aDate;
    this.aMap = aMap;
  }

  public String getName() {
    return name;
  }

  public Date getADate() {
    return aDate;
  }

  public Map&lt;String , Integer&gt; getAMap() {
    return aMap;
  }
}</pre>

Et forcement il y a des hics! A priori notre classe n'est pas mutable. Mais cela ne vous aura pas échappé, les propriétés <em>aDate</em> et <em>aMap</em> sont mutable!

<pre class="lang:java mark:9-11 decode:true " >@Test
public void playWithInternalMutability() throws Exception {
  Map&lt;String , Integer&gt; map = new HashMap&lt;String , Integer&gt;();
  AnotherSupposedImmutableClass supposedImmutableClass = new AnotherSupposedImmutableClass(
    "name",
    new GregorianCalendar(2010, 05, 30).getTime(),
    map
    );
  supposedImmutableBean.getADate().setTime(123456789l); // oups
  supposedImmutableBean.getAMap().put("trente quatre", Integer.valueOf(34)); // oups
  supposedImmutableBean.getAMap().clear(); // oups, again
}</pre>

Et là, vous vous retrouverez les mêmes surprises que celles vu plus haut, ou évidement pire si vous êtes dans une application multithreadée.  A ce sujet j'ai vu des <em>ConcurrentModificationException</em> parceque levé par du code à priori immutable, une optimisation d'un vieux code multithreadé avait déplacé une section qui modifiait une Map.

Je vous conseille vivement d'utiliser des objets immutables pour vos property, les librairies Joda-Time [3] et Google-Collections [4] fournissent des objets immutables.
<h2>Le pattern Builder de Joshua Bloch</h2>
Pour Joshua Bloch, c'est un peu une référence en Java, je pense qu'on peut lui faire confiance. Il est l'auteur du fameux livre <em>Effective Java</em> [5].

Alors pourquoi le <strong>pattern Builder de Joshua Bloch</strong> et non le <strong>pattern Builder du </strong><strong>GoF</strong> ? En fait ce design vient d'une constatation au sujet de la construction d'objet complexes et pour s'affranchir des inconvénients des accesseurs.

En gros un objet du genre agrégat pourrait être construit avec un constructeur avec un paquet d'argument ou itérativement avec une foule de setter. Mais, un les gros constructeur ce n'est pas très pratique, puis deux les setters ça peux vite être lourd et ça rends votre objet mutable (ce qui n'est donc pas souhaité dans tous les cas).

Cette déclinaison du builder permet de construire un objet itérativement sans forcer la mutabilité.

Exemple les collections google :

<pre class="lang:java mark:5,11,16,23 decode:true " >public abstract class ImmutableMap&lt;K , V&gt; implements Map&lt;K , V&gt;, Serializable {

  // ...

  public static &lt;K , V&gt; Builder&lt;K , V&gt; builder() {
  return new Builder&lt;K , V&gt;();
  }

  // ...

  public static class Builder&lt;K , V&gt; {
    final List&lt;Entry &lt;K , V&gt;&gt; entries = Lists.newArrayList();

    public Builder() {}

    public Builder&lt;K , V&gt; put(K key, V value) {
      entries.add(entryOf(key, value));
      return this;
    }

    // ...

    public ImmutableMap&lt;K , V&gt; build() {
      return fromEntryList(entries);
    }
  }

    private static &lt;K , V&gt; ImmutableMap&lt;K , V&gt; fromEntryList(List&lt;Entry &lt;K , V&gt;&gt; entries) {
      // ...
    }

  // ...

}</pre>

Ou encore avec une classe de notre domaine :

<pre class="lang:java decode:true " >public class ACoolImmutableClass {
  private final String name;
  private final DateTime sometime;
  private final List&lt;String&gt; listOfStuff;
  // many other fields

  public String getName() {
    return name;
  }

  public DateTime getSometime() {
    return sometime;
  }

  public static class Builder {
    private String name;
    private DateTime sometime;
    private List&lt;String&gt; listOfStuff = new ArrayList&lt;String&gt;();

    public Builder withName(String name) {
      this.name = name;
      return this;
    }

    public Builder at(DateTime moment) {
      this.sometime = moment;
      return this;
    }

    public Builder addThisThing(String thing) {
      this.listOfStuff.add(thing);
      return this;
    }

    public ACoolImmutableClass build() {
      return new ACoolImmutableClass(this);
    }
  }

  private ACoolImmutableClass(Builder builder) {
    this.name = builder.name;
    this.sometime = builder.sometime;
    this.listOfStuff = ImmutableList.copyOf(builder.listOfStuff);
  }
}</pre>

A noter que cette classe utilise des objets immutables pour ces attributs (DateTime, et ImmutableList).

Un des avantages, c'est qu'il est possible de valider les propriétés avant la création effective de l'objet. Avec les setters c'est faisable mais ça peut être délicat dans certaines situations.

Il y a un plugin Eclipse, qui permet de générer ces Builder, celà dit il est loin d'être super user friendly.

<a href="http://code.google.com/p/bpep/">http://code.google.com/p/bpep/</a>

Quoiqu'il en soit en aucun cas ce pattern n'est un remplacement du pattern Builder du GoF, il s'agit plus d'un pattern à appliquer dans un contexte ou il faut des objets immutable. Et encore ce n'est pas la seule solution, JodaTime typiquement n'utilise pas de builders.
<h1>Comment gérer la modification de l'objet</h1>
Si un comportement qui fait partit du domaine de l'objet et doit modifier l'état, alors il faut peut-être créer une nouvelle instance. La bibliothèque Joda-Time fait typiquement ça lorsqu'il y a modification d'un champs.

<pre class="lang:java decode:true " >DateTime instance1 = new DateTime("2009-04-01");
DateTime instance2 = instance1.withYear(2010);
</pre>

Je ne m'étends pas sur le sujet, mais ce genre de choses dépends de votre contexte, du rôle et du besoin. Un objet devrait être par défaut immutable, sauf si vraiment votre domaine identifie un cas ou l'état doit bouger et alors vous aurez des méthodes documentées qui appliqueront cette modification.
<h1>Conclusion</h1>
Mieux vaut des objets bien pensés et immutables que d'introduire la possibilité de changer l'état d'un objet et avoir des surprises. Et puis aussi :
<ol>
    <li>Il y a un risque fort d'avoir des problèmes au runtime, d'autant plus 10 ans après lorsqu'il y a une évolution à apporter et que plus personne ne sait qu'à tel endroit dans le code il y a le truc qui fout tout en l'air. Et les problèmes au runtime ca peut vite couter cher à analyser.</li>
    <li>Si vos objets ne peuvent pas être modifié alors vous n'aurez pas à vous soucier des problèmes de concurrences, c'est manifestement un gain de temps au développement et en maintenance. (Et donc un gain d'argent sur le long terme.)</li>
    <li>Bon ces objets sont bien cool, mais voilà il y a encore plein de framework (à tord ou à raison) qui se basent sur la convention JavaBean, je pense notamment aux objets marshallés en XML et consort.</li>
    <li>Ce code basé sur les builders est propre, mais il faut passer un petit peut plus de temps pour le faire. Il y a bien un plugin pour Eclipse, mais quid des autres IDE.</li>
</ol>
<strong>Quoi qu'il en soit, ces solutions sont toujours à appliquer avec du recul et toujours en fonction du contexte de votre domaine.</strong>

D'ailleurs cette entrée parle des problèmes rencontrés avec les collections du JDK, mais le problème pourrait se manifester différemment si une collection ou un de vos objets fonctionne autrement.

Encore une fois les remarques sont les bienvenues, ça fait plus de 40 ans que l'Homme fait du logiciel, et mafois on se plante encore assez souvent.
<h1>Références</h1>
<ol>
    <li><a href="http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html">http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html</a></li>
    <li><a href="http://www.infoq.com/presentations/liskov-power-of-abstraction">http://www.infoq.com/presentations/liskov-power-of-abstraction</a></li>
    <li><a href="http://dutheil.brice.online.fr/blog/index.php/2010/02/09/a-propos-de-joda-time/">http://dutheil.brice.online.fr/blog/index.php/2010/02/09/a-propos-de-joda-time/</a></li>
    <li><a href="http://dutheil.brice.online.fr/blog/index.php/2010/02/16/les-collections-par-google-comment-sy-retrouver/">http://dutheil.brice.online.fr/blog/index.php/2010/02/16/les-collections-par-google-comment-sy-retrouver/</a></li>
    <li><a href="http://www.amazon.fr/Effective-Java-Joshua-Bloch/dp/0321356683/ref=sr_1_1?ie=UTF8&amp;s=english-books&amp;qid=1269958692&amp;sr=8-1">http://www.amazon.fr/Effective-Java-Joshua-Bloch/dp/0321356683/ref=sr_1_1?ie=UTF8&amp;s=english-books&amp;qid=1269958692&amp;sr=8-1</a></li>
    <li><a href="http://rwhansen.blogspot.com/2007/07/theres-builder-pattern-that-joshua.html">http://rwhansen.blogspot.com/2007/07/theres-builder-pattern-that-joshua.html</a></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2010-03-30 18:20:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-30 17:20:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-propos-du-design-de-vos-objets-des-getters-et-setters-de-equalshashcode-et-de-la-mutabilite]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="contrat"><![CDATA[contrat]]></category>
		<category domain="category" nicename="design"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="design"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="equals"><![CDATA[equals]]></category>
		<category domain="post_tag" nicename="fuite"><![CDATA[fuite]]></category>
		<category domain="post_tag" nicename="hashcode"><![CDATA[hashcode]]></category>
		<category domain="category" nicename="pattern"><![CDATA[pattern]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Les visiteurs, une question de nommage, et le double-dispatch</title>
		<link>http://www.blog2.arkey.fr/2010/05/06/les-visiteurs-une-question-de-nommage-et-le-double-dispatch/</link>
		<pubDate>Thu, 06 May 2010 15:02:10 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Une histoire qui commence mal</h1>
OK, je tranche le malheureux pattern Visiteur a la vie dure; on ne l'aime pas trop, il est mal compris, et le pauvre est sous utilisé. Alors bon même s'il a ses défauts, pourquoi lui en vouloir autant, alors qu'il apporte justement ses avantages au <strong>code orienté objet</strong>.

Et oui vous avez bien lu orienté objet. Jusqu'à aujourd'hui j'ai vu du code qui ressemble à ça?
<ol>
    <li>On a soit des objets très complexes, avec des comportements qu'il n'est pas forcément intéressant de mettre dans l'objet même. Le code ci-dessous montre un objet ou les méthodes qui permettent de récupérer les livres d'un certain genre ne sont pas forcément appropriées dans cette partie du code. Pourquoi parce qu'il est envisageable (selon le bon sens) que d'autres genres serait apprécié. Et s'il faut ajouter d'autres méthodes encore.

<pre class="lang:java decode:true " >public class FatObject {
  private Iterable&lt;book&gt; books;

  public Iterable&lt;Book&gt; selectOnlySciFi() { ... }
  public Iterable&lt;Book&gt; selectOnlyThriller() { ... }
  public Iterable&lt;Book&gt; selectOnlyDetectiveStory() { ... }
  public Iterable&lt;Book&gt; selectOnlyRomance() { ... }
  public Iterable&lt;Book&gt; selectOnlyManga() { ... }
}</pre> 
</li>
    <li>Ou alors on a des objets anémiques (cf <a href="http://www.martinfowler.com/bliki/AnemicDomainModel.html">Martin Fowler</a>) et le comportement est bien en dehors des objets traités, mais, et c'est la ça pèche, le comportement est délocalisé dans des helpers. Bref en gros c'est de la programmation procédurale, ce sont des structures qui sont manipulées par des fonctions, c'est du C avec des espaces de nommage (les classes <em>*Helper.java</em>). La programmation objet en prends un coup, pas étonnant que les principes objets ne marchent pas dans ce contexte, mais je diverge. Bref on a du code qui ressemble à ce qui suit. Un objet anémique qui ne fait rien. Au mieux il aura probablement les méthodes <em>equals</em> et <em>hashCode</em> et peut-être un <em>toString</em>. 
<pre class="lang:java decode:true " >public class AnemicObject {
private Iterable&lt;Book&gt; books;
  public void setBooks(Iterable&lt;Book&gt; books) { this.books = books; }
  public Iterable&lt;Book&gt; getBooks() { return books; }
  @Override public boolean equals(Object o) { ... }
  @Override public int hashCode() { ... }
}</pre> 


Et le démoniaque helper :

<pre class="lang:java decode:true " >public class Helper {
  public void iDoSomethingWith(AnemicObject anemicObject) { ... }
  public Price iExtractTotalPriceFrom(AnemicObject anemicObject) { ... }
  public Iterable&lt;Book&gt; getSciFiBooks(AnemicObject anemicObject) { ... }
  public Iterable&lt;Book&gt; getDetectiveStoryBooks(AnemicObject anemicObject) { ... }
}</pre> 
</li>
</ol>
Comme vous le voyez les deux exemples ci-dessus ne sont pas vraiment élégants, même si je préfère la première voie. A long terme ce n'est probablement pas une bonne idée. J'aimerais d'ailleurs avoir l'avis des gens du <a href="http://fr.wikipedia.org/wiki/Conception_pilot%C3%A9e_par_le_domaine"><acronym title="Domain Driven Design">DDD</acronym></a>?

Et c'est là que notre ami le visiteur va nous aider.
<h1>Pourquoi le visiteur nous aide, qu'apporte-t-il ?</h1>
Bonne question, ce pattern est souvent incompris, et pour cause, il ne porte pas un nom qui lui facilite la vie.

Et oui pour le coup un <strong>visiteur n'est pas fait pour visiter</strong>. Page 387 de la traduction française du livre Design Patterns (par le GoF), nous pouvons lire :
<blockquote>Le visiteur fait la représentation d'une opération applicable aux éléments d'une structure d'objet. <strong>Il permet de définir une nouvelle opération, sans qu'il soit nécessaire de modifier la classe des éléments sur lesquels il agit.</strong></blockquote>
Effectivement aussi, ce livre donne comme un exemple un arbre. Et le visiteur prends toute sa puissance sur un arbre ou sur une structure composite. Mais ce n'est le seul cas ou celui-ci est utile, dans tous les cas <strong>il s'agit bien de permettre l'ajout / la suppression / la modification de comportements d'une manière objet sans retoucher à ce qui existe déjà</strong>. <strong><span style="color: #800000;"><span style="font-weight: normal;"><span style="color: #000000;">Je le répète le fait que le visiteur marche super bien sur un arbre est un bonus, mais le problème adressé</span></span><span style="font-weight: normal;"><span style="color: #000000;">, </span></span>l'intention du visiteur n'est pas de visiter, mais de définir une nouvelle opération sans changer l'existant sur lequel il agit.</span></strong>

Il faut mesurer l'intérêt du visiteur suivant deux axes.
<ol>
    <li>S'il y a beaucoup d'objet du domaine qui peuvent avoir le même comportement, ou si la grappe de nœud d'un arbre est importante, un ou des visiteurs sera une bonne solution de conception pour mutualiser du code.</li>
    <li>S'il n'y a pas énormément d'objet du domaine, voir qu'un seul, mais que les comportements relatifs sont à la fois divers et volatiles. Alors le visiteur est un candidat pour ajouter des comportements sans faire de satané helper et sans avoir à modifier les éléments du domaine.</li>
    <li>Si vous avez des opérations différentes et un arbre ou des objets composite, le visiteur est le pattern pour vous, c'est la qu'il prendra toute son essence.</li>
    <li>Si finalement vous n'avez pas beaucoup de comportement, qu'ils ne risque pas beaucoup de bouger et que vous n'avez pas des objets variés pour mutualiser ce code, alors le visiteur n'est probablement pas pour vous.</li>
</ol>
Egalement aussi le visiteur étant un objet permet de conserver un état, ce que ne permettent pas les objets même du domaine ou les helpers (sauf si on utilise des objets contextes passé de fonction en fonction, ce n'est pas exceptionnel).
<h2>Exemple sans prétention de visiteurs</h2>
D'abord la grappe d'objet "<em>complète</em>" :

<pre class="lang:java mark:6 decode:true " >public class CoolBookCollection {
    private Collection&lt;Book&gt; books;
    private String owner;
    private CollectionStatus status;
    private void accept(DomainOperation operation) {
        operation.operateOn(this);
    }
    public Collection&lt;Book&gt; books() { return books; }
    public static enum CollectionStatus {
        TIDY, MESSY, OK
    }
    // ...
}</pre> 


 
<pre class="lang:java decode:true " >public class Book {
    private Price price;
    private String title;
    private String author;

    public Price price() { return price; }
    public String title() { return title; }
    public String author() { return author; }
}</pre> 


<pre class="lang:java decode:true " >public class Price {
    public Price() { }
    public Price(Price priceA, Price priceB) { }
    public Price add(Price price) { return new Price(this, price); }
}</pre>

Et la partie relatives aux visiteurs, d'abord l'interface (ou j'ai choisi volontairement de ne pas mettre les mot Visitor et visit) :

<pre class="lang:java mark:2 decode:true " >public interface DomainOperation {
    void operateOn(CoolBookCollection coolBookCollection);
}</pre>

<pre class="lang:java mark:4 decode:true " >public class CountAllBooks implements DomainOperation {
    private int count;

    public void operateOn(CoolBookCollection coolBookCollection) {
        count = coolBookCollection.books().size();
    }

    public int bookCount() {
        return count;
    }
}</pre>

<pre class="lang:java mark:9 decode:true " >public class ObtainCollectionPriceByGenre implements DomainOperation {
    private final String genre;
    private Price totalPrice = new Price();

    public ObtainCollectionPriceByGenre(String genre) {
        this.genre = genre;
    }

    public void operateOn(CoolBookCollection coolBookCollection) {
        for (Book book : coolBookCollection.books()) {
            totalPrice.add(book.price());
        }
    }
    public Price totalPrice() { return totalPrice; }
}</pre>

Et voilà on des comportements différents liés à un objet en particulier, pas besoin de retoucher notre élément. Et on a une manière élégante de sortir nos comportements. Bien entendu, ce genre de chose est à faire avec du bon sens, en fonction du contexte et de l'opération à effectuer.
<h2>Quand on a davatage d'objets du domaine à visiter, attention!</h2>
Attention quand même, comme précisé plus haut, le visiteur n'est pas non plus sans défaut. Sur une structure d'objet profonde ou large, votre pattern visiteur va créer une dépendance cyclique entre lui et les objets sur lesquels il est sensé s'appliquer.

<pre class="lang:java mark:2 decode:true " >public interface DomainOperation {
    void operateOn(CoolBookCollection coolBookCollection);
}</pre>

Si mon visiteur doit par exemple travailler sur plusieurs sous type de l'objet (on pourrait typiquement avoir ce genre de problème avec les structures composites) :

<pre class="lang:java mark:2 decode:true " >public interface DomainOperation {
    void operateOn(BookCollection bookCollection);
    void operateOn(CoolBookCollection coolBookCollection);
    void operateOn(CheesyBookCollection cheesyBookCollection);
    void operateOn(InTheCaveBookCollection inTheCaveBookCollection);
}</pre>

On voit vite le problème ou le visiteur est forcé d'implémenter des opérations pour des objets qui ne l'intéresse pas forcément. Le problème est contournable en utilisant intelligemment les interfaces, mais cette solution palliative a également des limites; on ne va faire implémenter 45 interfaces à nos objets.

Pour cela il y a une solution un peu plus complexe qui est également un pattern, c'est le <a href="http://www.objectmentor.com/resources/articles/acv.pdf">Visiteur Acyclique</a>. Je n'approfondie pas trop, mais l'idée est d'avoir pour chaque sous type du domaine une interface de visiteur qui permet de vérifier que l'instance du visiteur est acceptable. Evidemment vous pourrez adapter le comportement, et vous n'êtes non plus obligé d'implémenter toutes les méthodes, c'est le but de ce pattern acyclique.
<p style="text-align: center;"><a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/05/VisiteurAcyclique.png"><img class="size-full wp-image-142 aligncenter" title="VisiteurAcyclique" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/05/VisiteurAcyclique.png" alt="" width="627" height="428" /></a></p>
Et typiquement le code du accept pour chaque sous-type de collection aurait une tête du genre :

<pre class="lang:java decode:true " >public void accept(DomainOperation operation) {
    if(operation instanceOf BookCollectionOperation) {
        ((BookCollectionOperation) operation).operateOn(this);
    }
}</pre>

Et voilà on a cassé les dépendance, et on est pas obligé d'implémenter toute les interfaces de chaque type de collection.

<strong>Le double dispatch, à ne pas confondre avec un visiteur</strong>

Le lecteur avertit aura vite deviné que ça ressemble au pattern stratégie, et il aura raison, ce sont des patterns comportementaux. Mais là ou le visiteur se distingue, et notamment dans des langages comme Java, .Net, C++ c'est qu'il utilise la technique du <strong>double dispatch</strong>.

Alors le double dispatch (double répartition) c'est quoi exactement, c'est un moyen pour le logiciel de résoudre au runtime les méthodes à exécuter.

Je vais citer les exemples <a href="http://en.wikipedia.org/wiki/Double_dispatch">wikipédia</a> et transformer leurs exemples en Java.

On a donc deux catégories d'objets, des astéroïdes et des vaisseaux spatiaux.

<pre class="lang:java decode:true " >public class SpaceShip {
}</pre>

<pre class="lang:java decode:true " >public class GiantSpaceShip extends SpaceShip {
}</pre>

<pre class="lang:java decode:true " >public class Asteroid {
    void collideWith(SpaceShip spaceShip) {
        System.out.println("Asteroid hit a SpaceShip");
    }
    void collideWith(GiantSpaceShip giantSpaceShip) {
        System.out.println("Asteroid hit a GiantSpaceShip");
    }
}</pre>

<pre class="lang:java decode:true " >public class ExplodingAsteroid extends Asteroid {
    void collideWith(SpaceShip spaceShip) {
        System.out.println("ExplodingAsteroid hit a Spaceship");
    }

    void collideWith(GiantSpaceShip giantSpaceShip) {
        System.out.println("ExplodingAsteroid hit a GiantSpaceShip");
    }
}</pre>

Ok, maintenant dans le code on a ça

<pre class="lang:java decode:true " >Asteroid theAsteroid = new ExplodingAsteroid();
SpaceShip theSpaceShip = new GiantSpaceShip();
GiantSpaceShip theGiantSpaceShip = new GiantSpaceShip();

theAsteroid.collideWith(theSpaceShip);
theAsteroid.collideWith(theGiantSpaceShip);</pre>

Comme en java c'est la méthode de l'instance qui est appelée, pas de problème pour nos astéroïdes. Mais là ou ça coince c'est au niveau des vaisseaux spatiaux. Les deux appels vont afficher sur la sortie sandard:

<pre class="decode:true " >ExplodingAsteroid hit a SpaceShip

ExplodingAsteroid hit a GiantSpaceShip</pre>

En effet le type réel du vaisseau spatial n'est pas connu, sauf si on fait de la reflection avec un instanceof, mais il y a plus élégant, c'est le double dispatch.

Si maintenant nos vaisseaux spatiaux ont tous les deux cette méthode définie :

<pre class="lang:java decode:true " >public class SpaceShip {
    void collideWith(Asteroid asteroid) {
        asteroid.collideWith(this);
    }
}</pre>

<pre class="lang:java decode:true " >public class GiantSpaceShip extends SpaceShip {
    void collideWith(Asteroid asteroid) {
        asteroid.collideWith(this);
    }
}</pre>

Maintenant notre code utilisera l'API de cette façon :

<pre class="lang:java decode:true " >Asteroid theAsteroid = new ExplodingAsteroid();
SpaceShip theSpaceShip = new GiantSpaceShip();
GiantSpaceShip theGiantSpaceShip = new GiantSpaceShip();

theSpaceShip.collideWith(theAsteroid);
theGiantSpaceShip.collideWith(theAsteroid);</pre>

Et on aura le code correcte utilisé.

Cette technique est utilisée par le visiteur, mais nous ne somme pas obligé d'avoir des visiteurs pour l'utiliser (la preuve par l'exemple grâce à wikipédia). C'est utilisé régulièrement dans la JDK, typiquement pour la sérialisation (même si c'est caché). Coté performance si on a le choix, le double dispatch sera toujours plus rapide qu'un instanceof. Coté design c'est pratique quand on a des branches d'objets qui travaillent ensemble.

Certains langages proposent nativement un support pour ces problèmes de résolution de type d'opérande, comme Nice.

A regarder aussi, c'est le multi dispatch ou les multi-méthodes, il y a notamment une implémentation de Rémy Forax de l'université de Marne-la-Vallée, cette implémentation a le mérite d'être standard Java, c'est à dire qu'elle n'étends pas le langage lui-même.

Pour y jeter un <span style="font-size: 10.0pt; line-height: 115%; font-family: &amp;amp;quot; mso-fareast-font-family: Calibri; mso-fareast-theme-font: minor-latin; mso-bidi-font-family: &amp;amp;quot; mso-bidi-theme-font: minor-bidi; color: black; mso-ansi-language: FR; mso-fareast-language: EN-US; mso-bidi-language: AR-SA;">œil</span> : <a href="http://www-igm.univ-mlv.fr/~forax/works/jmmf/index.html">http://www-igm.univ-mlv.fr/~forax/works/jmmf/index.html</a>
<h1>Récapitulatif sur le visiteur</h1>
Le visiteur est bien un ami, mais comme tous les potes, il ne sait pas tous faire non plus.

Un visiteur sait parcourir des arbres, il se débrouille super bien avec, mais il est aussi utile quand il n'y a pas d'arbre.

Un visiteur sert avant tout à extraire des comportements lié à un structure d'objet qui bouge peu. La structure peut être plate, ou en profondeur (cela dit je privilégierait la composition à la lace de l'héritage).

Le visiteur utilise la technique du double dispatch, ne pas confondre les deux.

Le visiteur permet de respecter le SRP (Single Responsibility Principle).

Le visiteur aide à maintenir le CCP (Common Closure Principle), c'est une histoire de cohésion entre les classes qui sont regroupées dans un même package.
<blockquote>The classes in a package should be closed together against the same kind of changes. A change that affects a package affects all the classes in that package.</blockquote>
Bon voilà, le débat reste ouvert, si vous pensez que j'ai tort, que j'oublie un point important, ou pour autre chose, il y a les commentaires.
<h1>Références</h1>
<a href="http://www.objectmentor.com/omSolutions/oops_what.html">http://www.objectmentor.com/omSolutions/oops_what.html</a>

<a href="http://www.objectmentor.com/resources/articles/visitor.pdf">http://www.objectmentor.com/resources/articles/visitor.pdf</a>

<a href="http://www.objectmentor.com/resources/articles/acv.pdf">http://www.objectmentor.com/resources/articles/acv.pdf</a>
<div><a href="http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/be-not-afraid-of-the-visitor-the-big-bad-composite-or-their-little-friend-double-dispatch.aspx">http://codebetter.com/blogs/jeremy.miller/archive/2007/10/31/be-not-afraid-of-the-visitor-the-big-bad-composite-or-their-little-friend-double-dispatch.aspx</a></div>
<a href="http://www.artima.com/cppsource/top_cpp_aha_moments.html">http://www.artima.com/cppsource/top_cpp_aha_moments.html</a>

<a href="http://butunclebob.com/ArticleS.UncleBob.VisitorVersusInstanceOf">http://butunclebob.com/ArticleS.UncleBob.VisitorVersusInstanceOf</a>

<a href="http://www.javaperformancetuning.com/articles/ddispatch.shtml">http://www.javaperformancetuning.com/articles/ddispatch.shtml</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2010-05-06 16:02:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-06 15:02:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[les-visiteurs-une-question-de-nommage-et-le-double-dispatch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="design"><![CDATA[design]]></category>
		<category domain="category" nicename="pattern"><![CDATA[pattern]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[sebty]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[seb.ty@laposte.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.13.97.240]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-05-11 09:53:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-05-11 08:53:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Salut,

Tu as une coquille dans ton exemple de code (méthodes CollideWith au lieu de collideWith).
Pour ma part, je trouve le design pattern visiteur dangereux et redondant car nécessitant de redéfinir la fameuse méthode accept qui effectue le double dispatch (attention au effets de bord si on sous-classe ...). 
De plus il lie fortement objet visité et visiteur ....]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil+blog@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://fr.linkedin.com/in/dutheilbrice</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.56.57.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-05-11 12:57:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-05-11 11:57:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Fixed, merci pour le "bugreport"

En fait je suis d'accord, que la définition (et la redéfinition) d'une méthode accept n'est pas vraiment super, surtout lorsqu'on a une gamme importante d'objet qui acceptent des visiteurs. Mais malgré tout je trouve que ça reste le moindre mal pour un logiciel orienté objet.

D'une manière générale, déjà je privilégierait la composition à l'héritage (à ce sujet n'oublions pas que l'héritage casse très facilement l'encapsulation si chère à l'OOP, bref quand on prévoit l'héritage il faut bien réfléchir à l'Open Closed Principle (OCP)). Donc si l'arbre d'héritage est peu profond, on peu s'en sortir.

C'est tout à fait vrai, le visité et le visiteur sont liés et c'est normal d'avoir des classes qui fonctionnent ensemble, il s'agit bien de pouvoir externaliser (ou même de mutualiser) les comportements des objets visités (cf le livre du GoF <strong>et</strong> l'article de Scott Meyers).

Il ne faut pas se voiler la face, pendant des années on a créé des applications avec des objets métier anémiques, et avec un comportement entièrement localisé dans des helper ou des services ça ressemblait plus à du script dans des objets (donc en clair on utilisait  juste la fonction namespace des objets). Je ne dis pas que tout ça était absolument mal, mais il aurait fallu mieux gérer les responsabilités et les rôles, quelles sont les classes qui fonctionnent ensemble ou qui sont cohésives, quelles sont les classes qui bougent le plus souvent et comment. Bref faire du véritable objet, à ce titre j'attends beaucoup à ce titre du <strong>Domain Driven Design</strong>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>12</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Lenteur d&#039;une appli Web sur une JVM IBM</title>
		<link>http://www.blog2.arkey.fr/2010/08/09/lenteur-dune-appli-web-sur-une-jvm-ibm/</link>
		<pubDate>Mon, 09 Aug 2010 15:16:43 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[Sujet intéressant, les problèmes en production sont quand même pour beaucoup des casse-têtes. Effectivement c'est bien vrai, les problèmes en production sont difficiles à résoudre. Il y a bien une partie technique souvent absconse, mais ce n'est pas un travail en solitaire, c'est un travail d'équipe. L'organisation dans la boite favorise ou freine cette opportunité de résoudre un problème à travers les différentes équipe impliquées. Dans ce billet je vous fait un petit retour d'expérience sur un problème de lenteur sur une application web genre "<em>CRUD</em>" sur une JVM IBM.
<h1>Le contexte</h1>
<em>"The context is King"</em> disait Andy Hunt dans son livre Pragmatic Learning and Thinking. Alors brève introduction au contexte du problème.
<ul>
	<li>Application assez simple qui permet de rechercher, consulter, créer, modifier des données différentes issues du domaine métier.</li>
	<li>L'application tourne sur un WebSphere.</li>
	<li>WebSphere tourne sur une JVM IBM. <em>Ah là ça sent la pêche aux informations, n'ayant jamais travaillé sur cette JVM, et pas de bol non plus la JVM IBM sur Windows n'est pas accessible gratuitement depuis le site de IBM.</em></li>
	<li>L'ensemble tourne sur une machine AIX.</li>
	<li>L'entreprise utilise l'outils Introscope qui permet d'avoir plein de métriques.</li>
</ul>
<h1>Le problème</h1>
Les utilisateurs ressentent des lenteurs, voire des freezes. L'outil INSC identifie ces threads en <em>Stalled</em>, et permet de donner des métriques sur les temps d'attentes et de réponses de certains éléments du systèmes, les ingénieurs systèmes utilisent abondamment cet outils. Bref, les temps de réponses vont de quelques dizaines de secondes à plusieurs minutes.

Il y a définitivement un problème. Forcément quand on a un super outils comme INSC qui a plein de métriques, on se balade dedans pour essayer de trouver le problème. Malheureusement <strong>un seul</strong> thread dump pour voir ce qu'il se passe dans les threads ne suffit pas. Le thread dump révèle que la plupart des threads sont à l'état "<strong>Waiting On Condition</strong>". Le super outils INSC indique un usage de la heap, il indique aussi que certaines requêtes SQL sont très très longues, il indique les sessions web ouvertes une petite trentaine, pas de quoi fouetter un chat. Et pourtant il y aurait du CPU assez fortement utilisé, vu depuis Introscope.

Mais voilà l'analyse tourne un peu autour du pot. Pourquoi ces threads sont-elles bloquées? Pourquoi les requêtes SQL sont-elles aussi longues?!
<h1>Le problème dans l'analyse</h1>
Récapitulons, dans cette situation les métriques de Introscope ont été regardées, et on a un seul thread dump.

Introscope malgré ces métriques ne dit pas ou est le problème, il ne dit même pas quel est le type de problème. Les métriques affichées sont pour certaines intéressantes, je pense à l'identification des threads figées, les temps de réponses de certains composants, la consommation mémoire, et l'utilisation du CPU.

Mais pourquoi cet outils n'a pas aidé à trouver le problème, parce qu'il ne mesure pas les bonnes choses. Et il faut en particulier comprendre que quand un système fonctionne mal il y a un effet de corrélation qui s'applique sur un ensemble de variable. Et ce n'est pas avec Introscope qu'on va pouvoir identifier la cause du ralentissement généralisé, ni trouver<strong> une relation de cause-à-effet</strong>.
<blockquote>Pour résoudre un problème, il faut s'équiper avec les bons outils! Il faut aussi regarder les bonnes données, au bon endroit, et au bon moment!</blockquote>
<h1>A la poursuite du vrai problème (partie 1)</h1>
Bon hop, déjà pour commencer j'écarte pour le moment Introscope. Et j'ai un thread dump ... de la JVM de IBM, il va falloir essayer les outils IBM qui permettent de traiter ces informations. Je vais me satisfaire ça pour l'instant.
<h2>L'analyse du thread dump</h2>
<h3>Avec : IBM Thread and Monitor Dump Analyzer for Java</h3>
Évidement le format ne correspond pas à celui de Sun, heureusement IBM nous fournit des outils pour analyser ces informations. Direction <a href="http://www.alphaworks.ibm.com/tech/jca">http://www.alphaworks.ibm.com/tech/jca</a>.

A l'ouverture un rapport apparait, il commence par ça en rouge :
<blockquote><span style="color: #993300;">***WARNING*** Java heap is almost exhausted : 0% free Java heap Please enable verbosegc trace and use IBM Pattern Modeling and Analysis Tool(http://www.alphaworks.ibm.com/tech/pmat) to analyze garbage collection activities. If heapdumps are generated at the same time, please use IBM HeapAnalyzer(http://www.alphaworks.ibm.com/tech/heapanalyzer) to analyze Java heap.</span></blockquote>
Ok, là c'est assez facile de savoir ou ça va! Mais allons plus loin!

Il y a également :
<blockquote><strong>Number of Processors : </strong><strong>4</strong>
Java version : J2RE 5.0 <strong>IBM J9</strong> 2.3 AIX ppc64-64 build j9vmap6423-20090707

Java Heap Information
<strong>Maximum Java heap size : 384m
Initial Java heap size : 384m</strong></blockquote>
OK, j'en apprends un peu plus sur la JVM et la machine.
<blockquote>Free Java heap size: 0 bytes

Allocated Java heap size: 402 653 184 bytes</blockquote>
Ok évidement tout s'explique il ne reste plus rien pour allouer dans la Heap.

Tiens dans la ligne de commande je voit que Introscope est un agent de le JVM:
<blockquote>
<pre class="lang:default decode:true ">-Xshareclasses:name=webspherev61_%g,groupAccess,nonFatal
-Dibm.websphere.internalClassAccessMode=allow
-Dcom.wily.introscope.agentProfile=/opt/wily/wilyAgent/AvtAgent.profile
-javaagent:/opt/wily/wilyAgent/Agent.jar</pre>
</blockquote>
<strong>C'est intéressant, si la JVM est lente, ca peut vouloir dire que les mesures Introscope sont aussi soumises aux lenteurs de la JVM.</strong>

Le rapport est sympa, il donne la répartition de la mémoire de la JVM :
<blockquote>Memory Segment Analysis
<table style="background-color: #000000; width: 557px; height: 193px; border: 1px solid #000000;" border="1" cellspacing="1" cellpadding="2">
<thead>
<tr>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Memory Type</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right"># of Segments</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Used Memory(bytes)</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Used Memory(%)</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Free Memory(bytes)</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Free Memory(%)</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Total Memory(bytes)</td>
</tr>
</thead>
<tbody>
<tr>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Internal</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">13</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">1 191 740</td>
<td style="border: 0px solid #000000;" align="right"><span style="background-color: #ffff00;">88,4</span></td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">156 452</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">11,6</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">1 348 192</td>
</tr>
<tr>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Object (reversed)</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">1</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">402 653 184</td>
<td style="border: 0px solid #000000;" align="right"><span style="background-color: #ffff00;">100</span></td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">0</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">0</td>
<td style="border: 0px solid #000000;" align="right"><span style="background-color: #ffff00;">402 653 184</span></td>
</tr>
<tr>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Class</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">9 735</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">228 637 344</td>
<td style="border: 0px solid #000000;" align="right"><span style="background-color: #ffff00;">90,96</span></td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">22 724 116</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">9,04</td>
<td style="border: 0px solid #000000;" align="right"><span style="background-color: #ffff00;">251 361 460</span></td>
</tr>
<tr>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">JIT Code Cache</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">5</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">41 943 040</td>
<td style="border: 0px solid #000000;" align="right"><span style="background-color: #ffff00;">100</span></td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">0</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">0</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">41 943 040</td>
</tr>
<tr>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">JIT Data Cache</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">3</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">17 018 496</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">67,63</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">8 147 328</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">32,37</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">25 165 824</td>
</tr>
<tr>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">Overall</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">9 757</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">691 443 804</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">95,71</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">31 027 896</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">4,29</td>
<td style="border: 0px solid #000000; background-color: #ffffff;" align="right">722 471 700</td>
</tr>
</tbody>
</table>
</blockquote>
Ok, c'était un tableau intéressant, on voit clairement que dans une JVM il n'y a pas que de la Heap (pour ceux qui ne le savait pas), en effet on voit donc les sections suivantes (les passages surlignés viennent de moi, malheureusement l'outil d'IBM ne nous aide pas là dessus) :
<ul>
	<li>la mémoire interne de la JVM (les objets internes, les structure de thread, et autres objets natifs) : bonne utilisation</li>
	<li>les objets, en une seule section de mémoire, c'est la Heap, et là ben effectivement elle utilisée à 100%.</li>
	<li>les sections des classes, c'est la ou le byte code de vos classes est stocké par la JVM, <strong>mais ce n'est pas dans la Heap</strong> (chez la JVM de Sun ça correspondrait à la PermGen area), bref là aussi 90% d'utilisation c'est plutôt pas mal.</li>
	<li>JIT Code Cache et JIT Data Cache, c'est là ou la JVM va stocker le code natif qu'elle aura compilée depuis le bytecode, là aussi c'est rempli à100% mais c'est peut-être normal, après tout la taille totale est plus petite.</li>
</ul>
On voit aussi que la mémoire accessible dans la Heap est quand même supérieure a ce qui est indiqué dans la ligne de commande, à savoir les 384 MB. Ne connaissant pas la JVM IBM, je ne suis pas certains des raisons induisant ce phénomène.

Mais à 100% d'utilisation, ça sent le GC qui s'excite pour garder ses petits. Mais le rapport est long et n'est pas terminé, il reste des choses à lire.
<blockquote>Thread Status Analysis
<table style="background-color: #000000; border: 1px solid #000000;" border="1" cellspacing="1" cellpadding="2">
<tbody>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Status</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Number of Threads : 170</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Percentage</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Deadlock</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Runnable</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">12</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">7 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Waiting on Condition</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">158</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">93 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Waiting On Monitor</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Suspended</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Object.wait()</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Blocked</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Parked</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">0 %</td>
</tr>
</tbody>
</table>
</blockquote>
Vous vous souvenez des threads vues en <strong>Wait on Condition</strong> au tout début, on les retrouve donc ici dans les stats du thread dump. Il y a environ 158 thread qui ne font rien et 12 threads qui travaillent. Alors petite parenthèse, qu'est ce que ça veut dire ce Waiting on Condition. Les raisons peuvent être les suivantes :
<ul>
	<li>Thread.sleep(), en gros on indique simplement à la thread de ne rien faire, mais c'est quand même la JVM qui gère ce sleep()</li>
	<li>Object.wait(), en gros quelque part dans le code un thread est en attente pour qu'une condition se réalise, voire le code en question pour en savoir plus sur la condition. Cette condition peut aussi être une condition interne à la JVM.</li>
	<li>La thread est en train de se synchroniser avec une autre, elle doit donc attendre que l'autre thread finisse son job, on verra probablement dans la stack un appel à un Thread.join().</li>
	<li>Unsafe.park, et autres support pour les lock</li>
	<li>La thread est blockée par des opérations d'I/O.</li>
</ul>
Déjà ce n'est pas forcément un problème pour toutes les threads, typiquement on peut s'attendre à voir des threads relatives aux systèmes de cache (ehcache et consorts) qui sont dans ces états. Ensuite il faut comprendre que ce mécanisme implique des conditions internes à la JVM. L'ordonnanceur (scheduler) de la JVM, qui en réalité fait appel au scheduler de l'OS, donne la main à d'autres traitements (java ou pas).

Le prochain tableau du rapport nous indique ou sont (toutes) nos threads, mais pas d'analyse par type de statut. On observe bien certaines des raisons citées plus haut.
<blockquote>Thread Method Analysis
<table style="background-color: #000000; border: 1px solid #000000;" border="1" cellspacing="1" cellpadding="2">
<tbody>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Method Name</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Number of Threads : 170</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">Percentage</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">java/lang/Object.wait(Native Method)</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">88</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">52 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">java/lang/Thread.sleep(Native Method)</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">63</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">37%</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">NO JAVA STACK</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">6</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">4 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">java/net/PlainSocketImpl.socketAccept(<strong>Native Method</strong>)</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">5</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">3 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">java/net/SocketInputStream.socketRead0(<strong>Native Method</strong>)</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">3</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">2 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">com/ibm/misc/SignalDispatcher.waitForSignal(<strong>Native Method</strong>)</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">1</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">1 %</td>
</tr>
<tr>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right">d'autres ligne à 1%...</td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right"></td>
<td style="border-width: 0px; border-style: solid; background-color: #ffffff;" align="right"></td>
</tr>
</tbody>
</table>
</blockquote>
Pas mal de thread sont en attente, et beaucoup d'autres dorment. Quelques threads sans stack Java, ce sont des threads qui appartiennent à la JVM.

J'arrête là pour le moment  sur le rapport de cet outils IBM, mais ce qu'il faut retenir c'est que le thread dump est utile pour étudier des threads, mais c'est utile sur un laps de temps, avec un seul cliché on ne se rends pas compte réellement du comportement. Et en plus ces données ne sont pas intéressantes pour savoir ce qu'il se passe coté gestion mémoire. Heureusement que J9 (la JVM de Mr IBM) fournit quelques infos, sinon je ne vois pas comment diagnostiquer le problème sans jeter un œil sur les données adéquates, c'est à dire le log du Garbage Collector.
<h2>L'analyse du log GC, enfin!</h2>
Après l'obtention du fameux log, il faut encore trouver un outil IBM pour analyser le fichier. Les choses deviennent intéressantes. Comme je l'ai déjà dit, les logs sont au format IBM, ça ressemble à du XML. Et pour analyser ces logs rien de mieux que les outils de IBM, non? Google me dit rapidement qu'il me faut donc ce truc <strong>Pattern Modeling and Analysis Tool for Java Garbage Collector</strong>, direction <a href="http://www.alphaworks.ibm.com/tech/pmat">http://www.alphaworks.ibm.com/tech/pmat</a>.
<h3>Avec : Pattern Modeling and Analysis Tool for Java Garbage Collector</h3>
Un petit graphique pour regarder ce qu'il se passe.

<a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/07/gclog.png"><img class="alignnone size-full wp-image-148" title="gclog" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/07/gclog.png" alt="" width="869" height="621" /></a>

En rouge l'usage de la Heap, en bleu le marquage des objets à virer, et en vert les temps de compression de la mémoire. Effectivement le GC à l'air de bien s'amuser dans la mémoire, et d'être appelé assez souvent.

Bon celà dit je ne suis pas convaincu par l'outil IBM, il manque des informations que j'avais vu en texte dans le log GC ; un évènement GC à  cette tête là :

 
<pre class="lang:xml mark:1,4,8,17,21 decode:true " >&lt;af type="tenured" id="388571" timestamp="Jun 21 03:01:11 2010" intervalms="228.858"&gt;
  &lt;minimum requested_bytes="168" /&gt;
  &lt;time exclusiveaccessms="0.489" /&gt;
  &lt;tenured freebytes="0" totalbytes="402653184" percent="0" &gt;
    &lt;soa freebytes="0" totalbytes="402653184" percent="0" /&gt;
    &lt;loa freebytes="0" totalbytes="0" percent="0" /&gt;
  &lt;/tenured&gt;
  &lt;gc type="global" id="388576" totalid="388576" intervalms="230.720"&gt;
    &lt;refs_cleared soft="0" threshold="32" weak="76" phantom="0" /&gt;
    &lt;finalization objectsqueued="0" /&gt;
    &lt;timesms mark="408.282" sweep="5.061" compact="0.000" total="415.341" /&gt;
    &lt;tenured freebytes="209018360" totalbytes="402653184" percent="51" &gt;
      &lt;soa freebytes="209018360" totalbytes="402653184" percent="51" /&gt;
      &lt;loa freebytes="0" totalbytes="0" percent="0" /&gt;
    &lt;/tenured&gt;
  &lt;/gc&gt;
  &lt;tenured freebytes="209013328" totalbytes="402653184" percent="51" &gt;
    &lt;soa freebytes="209013328" totalbytes="402653184" percent="51" /&gt;
    &lt;loa freebytes="0" totalbytes="0" percent="0" /&gt;
  &lt;/tenured&gt;
  &lt;time totalms="417.431" /&gt;
&lt;/af&gt;</pre> 


Vu l'allure du log, on a pas l'impression d'être sur un GC de type generationnel, mais je ne suis pas encore sûr, c'est une JVM IBM. Bon revenons à nos moutons:
<ul>
	<li>il y a eu 230 ms d'écoulées avant le dernier GC.</li>
	<li>la tenured indique directement qu'il n'y a plus de place dans la mémoire,</li>
	<li>on voit que le GC est de type global, ce qui veut dire que c'est toute la zone mémoire qui est affectée par le GC, c'est long</li>
	<li>la tenured libère environ 200 MB, soit 51%!</li>
	<li>le temps total mis par ce GC est de 420 ms, c'est long.</li>
</ul>
Et il y a plein d'entrées comme ça, ça fait beaucoup de GC globaux de 1 demi-secondes, tous les 5ème de secondes. Le GC prends du temps CPU pour nettoyer la mémoire un peu trop souvent. Et ce ci pourrait bien être la cause des ralentissements observés. En gros soit il n'y a simplement pas assez de mémoire, soit il y a une fuite mémoire.
<h3>Avec : IBM Support Assistant et Garbage Collection and Memory Visualizer</h3>
En me renseignant, je voulais jeter un œil aux outils IBM plus récents, tel que celui mentionné par <a href="http://www.parisjug.org/xwiki/bin/view/Meeting/20100608">Holly Cummins au ParisJug</a> (le 8 Juin 2010). Pour commencer il faut un compte IBM et télécharger <strong>IBM Support Assistant</strong>, direction <a href="http://www-01.ibm.com/software/support/isa/">http://www-01.ibm.com/software/support/isa/</a>.

Après une fois qu'on a l'outil, il faut à nouveau télécharger des plugins (nommé <em>additif</em> sur l'interface en français). Bon en fait le Health Center en me sert à rien puisqu'il il faut se connecter à une <strong>JVM IBM</strong>, ayant une JVM Sun sur mon poste je ne vais quand même pas aller taper sur la prod si tenté que ce soit possible. Finalement j'opte pour le plugin : <strong>Garbage Collection and Memory Visualizer</strong>.

Donc finalement j'essaye cet outils d'analyse, et j'ai un rapport bien plus sympa et complet avec plein de graphiques qui m'intéressent.

Déjà le rapport débute par :
<blockquote>Your application appears to be leaking memory. This is indicated by the used heap increasing at a greater rate than the application workload (measured by the amount of data freed). To investigate further see <a href="http://publib.boulder.ibm.com/infocenter/javasdk/tools/index.jsp?topic=/com.ibm.java.doc.igaa/_1vg00011e17d8ea-1163a087e6c-7ffe_1001.html">Guided debugging for Java</a></blockquote>
Ok, je m'en doutais déjà mais c'est quand même mieux que de dire que la mémoire est quasiment entièrement utilisée. Et on retrouve les alertes suivantes dans le rapport :
<blockquote>The application seems to be using some quite large objects. The largest request which triggered an allocation failure (and was recorded in the verbose gc log) was for 5242904 bytes.</blockquote>
5MB quand même! Cela dit ça n'arrive pas souvent, c'est peut-être un cache qui charge des données depuis le disque. Le graphe suivant (choisir Object Size dans les templates de graphique sur la droite) montre la taille des allocations demandées.

<a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/07/object_sizes.jpg"><img class="alignnone size-full wp-image-156" title="object_sizes" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/07/object_sizes.jpg" alt="" width="823" height="682" /></a>

Mais la concomitance de ses demandes d'allocation avec l'utilisation de la heap fait sourciller.

On continue
<blockquote>Garbage collection is causing some large pauses. The largest pause was 7362 ms. This may affect application responsiveness. If responsiveness is a concern then a switch of policy or reduction in heap size may be helpful.</blockquote>
Effectivement le temps passé dans l'application et le temps passé dans le GC indique manifestement qu'il y a une suractivité anormale du GC.

<a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/07/compaction_pauses.jpg"><img class="alignnone size-full wp-image-157" title="compaction_pauses" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/07/compaction_pauses.jpg" alt="" width="823" height="682" /></a>

En fait on voit même que le GC est en train de compacter la mémoire au moment  de l'incident, c'est la courbe rouge clair (entre ~0.5s et 1s), ajouté à cela le temps de marquage des objets à virer (<em>bon en fait dans le graphique que j'ai fait, le temps de pause est principalement du au temps de marquage</em>), l'ensemble donnant un temps de pause pour laisser le GC travailler allant de 1 à 7s (par GC bien évidement).

Et là effectivement expliquer les ralentissements de l'application devient plus facile, merci à ces beaux graphiques explicites.

On peut regarder vraiment beaucoup de chose avec cet outils, même s'il y a des défauts manifestes dans l'interface utilisateur. C'est quand même plutôt pas mal.

Je termine sur un petit résumé des valeurs intéressantes que nous donne cet outils.
<blockquote>
<table style="width: 400px; height: 200px; background-color: #000000; border: 1px solid #000000;" border="1" cellspacing="1" cellpadding="2">
<tbody>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Allocation failure count</td>
<td style="background-color: white; border-width: medium; border-style: none;">59971</td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Forced collection count</td>
<td style="background-color: white; border-width: medium; border-style: none;">3</td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">GC Mode</td>
<td style="background-color: white; border-width: medium; border-style: none;"><span style="background-color: #ffff99;">optthruput</span></td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Largest memory request (bytes)</td>
<td style="background-color: white; border-width: medium; border-style: none;">5242904</td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Mean garbage collection pause (ms)</td>
<td style="background-color: white; border-width: medium; border-style: none;">491</td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Mean heap unusable due to fragmentation (MB)</td>
<td style="background-color: white; border-width: medium; border-style: none;">0.2</td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Mean interval between collections (minutes)</td>
<td style="background-color: white; border-width: medium; border-style: none;"><span style="background-color: #ffff99;">0.01</span></td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Number of collections</td>
<td style="background-color: white; border-width: medium; border-style: none;">59974</td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Proportion of time spent in garbage collection pauses (%)</td>
<td style="background-color: white; border-width: medium; border-style: none;"><span style="background-color: #ffff99;">58.24</span></td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Proportion of time spent unpaused (%)</td>
<td style="background-color: white; border-width: medium; border-style: none;"><span style="background-color: #ffff99;">41.76</span></td>
</tr>
<tr>
<td style="background-color: white; border-width: medium; border-style: none;">Rate of garbage collection (MB/minutes)</td>
<td style="background-color: white; border-width: medium; border-style: none;"><span style="background-color: #ffff99;">13250</span></td>
</tr>
</tbody>
</table>
</blockquote>
Tiens le mode GC est optthruput, en fait c'est une des polices du comportement du GC, et probablement de la manière de segmenter la mémoire (Nursery (Young), Old (Tenured)).

En effet dans les logs GC, je n'ai pratiquement vu que des GC globaux et uniquement sur la section de la tenured, à priori pas de zone nursery, c'est probablement du à ce comportement du GC.

En me renseignant donc, il y a 4 polices de GC dans la JVM J9 de IBM :
<ul>
	<li><strong>optthruput</strong> : Optimisé pour throughput (le débit), flat heap <strong>&lt;= Bingo</strong></li>
	<li><strong>optavgpause</strong> : Optimisé pour les temps de pause (Stop-The-World), le CMS est configuré pour prendre le moins de temps, flat heap</li>
	<li><strong>subpool</strong> : Un police optimisé pour les machine multi-processeur, flat heap</li>
	<li><strong>gencon</strong>: C'est le GC générationnel, qui est divisé en zone
<ul>
	<li>nursery : qui permet la collection rapide et efficace des objets de vie courte, pas de pause</li>
	<li>tenured : zone des vieux objets, mais un GC dans cette zone est global et demande à pauser l'application</li>
</ul>
</li>
</ul>
<h1>A la poursuite du vrai problème (partie 2)</h1>
<h2>La pèche aux informations</h2>
Après avoir passé le GC au mode générationnel, il y a toujours ces problèmes de lenteurs mais ce n'est plus généralisé à toute l'appli, pas de log GC pour vérifier mais Introscope indique une utilisation relativement correcte de la mémoire, bizarre. Back to basics!

Le thread dump de la JVM IBM me dit toujours que la Heap est utilisée à 100%, mais je vois quand même
<blockquote>Free Java heap size: 72 041 864 bytes

Allocated Java heap size: 402 653 184 bytes</blockquote>
Et plus loin :

<pre class="lang:default decode:true ">Last Garbage Collection Detail

Nursery Area Free : 59 307 392 bytes Total : 60 397 568 bytes 98 % free
Tenured Area Free : 17 058 368 bytes Total : 335 544 320 bytes 5% free
Global Garbage Collector Counter : 148</pre>

La tenured est bien remplie et utilise un très grosse partie de la heap ; memory leak ou beaucoup d'objet à mettre en cache. Ou encore autre chose, sans mesures claires pour écarter les hypothèses ces dur.

Pour quoi ne pas <strong>activer dans tous les cas le log GC</strong>, la JVM IBM offre des option pour gérer la rotation des logs GC, comme ça l'argument de saturation du disque tombe à l'eau. Mais bon il faut lire la documentation; donc petit passage chez IBM grâce à Google, et hop :
<pre class="lang:sh decode:true">-Xverbosegclog[:&lt;file&gt;[,&lt;x&gt;,&lt;y&gt;]]</pre>
Et voilà : <strong>file</strong> étant le couple chemin + fichier, <strong>X</strong> le nombre de fichier maximum (ça tourne et écrase les fichiers), <strong>Y</strong> le nombre de cycle GC. Ce que ne dis pas par contre la doc IBM c'est la taille approximative d'un GC, donc 700 cycles de GC ≃ 1 MB. Il est même possible d'utiliser des tokens utilisés pour les dumps dans WAS 7 (voir <a href="http://www-01.ibm.com/support/docview.wss?rs=180&amp;context=SSEQTP&amp;dc=DB560&amp;dc=DB520&amp;uid=swg21384096&amp;loc=en_US&amp;cs=UTF-8&amp;lang=en&amp;rss=ct180websphere">ici</a>).
<h2>Recoupement des informations</h2>
Le log du Garbage Collector ne venant pas, il faut chercher autrement. Je demande au moment ou le problème se reproduit , de faire plusieurs thread dump d'affilé séparé de quelques secondes (~20s) et de faire également un listing des sous-processus java.

En effet le thread dump est bien sympa, mais il ne donne pas la consommation CPU des threads.

Dans un environnement il faut entre dans le terminal (Dans Linux l'identifiant des thread est dans la colonne LWD.) :
<pre class="lang:sh decode:true">ps -fLp &lt;processid&gt; -L</pre>
Evidement il s'agit d'un AIX et les commendes sont différents, pas de soucis un petit tour dans la doc IBM et il faut entrer la commande suivante, et là l'identifiant de la thread est dans la colonne TID :
 
<pre class="lang:sh decode:true " >ps -mp -o THREAD</pre> 

On a alors un listing énorme, que j'ai tronqué ici.

<pre class="lang:default mark:2,8 decode:true ">USER    PID   PPID       TID S  CP PRI SC    WCHAN        F     TT BND COMMAND
wasadmin 393262 401580         - A 188  60 203        *   202001      -   - /opt/was61/java/bin/java ...
 -      -      -    700535 S   0  82  1 f100070f1000ab40  8410400      -   - -
 -      -      -    741581 S   0  82  1 f100070f1000b540  8410400      -   - -
 -      -      -    802997 S   0  82  1 f100070f1000c440  8410400      -   - -
 -      -      -    884895 S   0  82  1 f100070f1000d840  8410400      -   - -
 -      -      -   1183791 Z   0  82  1         -       c00001         -   - -
 -      -      -   1667157 R  60 122  0            -    400000       -   - -
 -      -      -   1708269 S   0  82  1 f100070f1001a140  8410400      -   - -
 -      -      -   1736831 S   0  82  1 f100070f1001a840  8410400      -   - -</pre>

La colonne CP me dit que manifestement la thread <strong>1667157</strong> utilise plutôt pas mal le CPU, qu'est-ce que donne cette thread du coté du thread dump ?! Au fait on repère 3 threads dans le même cas.

Il faut savoir que dans le thread dump il y a l'identifiant de la thread en Java, mais qu'il y a aussi et surtout de mentionné l'identifiant natif de la thread, par exemple <strong>NID</strong>.

Je google "<strong>1667157 in hex</strong>" ce qui me renvoie <strong>0x197055</strong>. En utilisant l'outils IBM mentionné plus haut, on voit clairement que la thread en cause correspond à du code métier, développé ici.

<a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/08/tdump-cause2.png"><img class="alignnone size-full wp-image-200" title="tdump-cause" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/08/tdump-cause2.png" alt="" width="1103" height="700" /></a>

Chacune des 3 threads passent dans le même bout de code. Autant au début j'ai des doutes, après toute la présomption d'innocence compte aussi pour le code, d'autant plus qu'il s'agit d'un code lent qui utilise beaucoup de reflection. Mais faut prendre en compte aussi le fait que la pile descend à chaque fois dans la couche Hibernate, ça vaut le coup d'aller voir. Les développeurs qui connaissent un peu mieux le code poussent dans cette direction.

Entre temps les DBA confirme que la base de données réponds très bien, mais qu'elle enregistre un très fort nombre d'un certain type de requête SQL.

Bingo, il y a une race condition dans une des boucles, et celle-ci part en boucle infinie. Ceci explique la très forte utilisation de la mémoire et les lenteurs remarquées.
<h1>Bilan</h1>
Un problème peut en cacher un autre, ou plus exactement un problème peut en provoquer d'autres. Il faut juste avoir des moyens de mesurer les changements qu'on apporte si on veut isoler / écarter des catégorie de problèmes.

L'outillage on l'a vu est essentiel, Introscope apporte des choses, mais il ne permet pas tout. Qui plus est, on ne sait pas précisément ce qu'il mesure et ou! Les temps de réponses SQL, n'étaient par exemple pas crédible, car Introscope mesurait également les GC.

Dans notre cas ici, j'aurais aussi bien aimé avoir une JVM IBM sur mon poste histoire de jouer plus facilement avec. C'est dommage que IBM ne fournisse pas gratuitement sa JVM au moins pour le développement.

Accessoirement ce serait bien un jour d'avoir des format de log normalisé entre les JVM, ainsi que certaines des options afférentes.

Finalement ce qui a pris le plus de temps était d'obtenir les bonnes données, pour prendre les meilleurs choix. L'impression de travailler les mains dans le noir n'était pas l'idéal pour résoudre le problème, mais c'est au moins formateur. Je peux dire que j'ai bien apprécié certains retours et recommandations des  développeurs. L'équipe système étant surchargée n'a pas pu nous donné un support optimal, et cette carence s'est ressentie notamment pour avoir les données à temps. Mais leur vu du problème a permis d'orienter la recherche sur les parties qui pouvait poser problème.
<h1>Références &amp; Documentation</h1>
<ul>
	<li><a href="http://websphere.sys-con.com/node/921279?page=0,1">http://websphere.sys-con.com/node/921279?page=0,1</a></li>
	<li><a href="http://sites.google.com/site/threaddumps/java-thread-dumps">http://sites.google.com/site/threaddumps/java-thread-dumps</a></li>
	<li><a href="http://java.sun.com/developer/technicalArticles/Programming/Stacktrace/">http://java.sun.com/developer/technicalArticles/Programming/Stacktrace/</a></li>
	<li><a href="http://geekexplains.blogspot.com/2008/07/threadstate-in-java-blocked-vs-waiting.html">http://geekexplains.blogspot.com/2008/07/threadstate-in-java-blocked-vs-waiting.html</a></li>
	<li><a href="http://www.ibm.com/developerworks/java/library/j-nativememory-aix/">http://www.ibm.com/developerworks/java/library/j-nativememory-aix/</a></li>
	<li><a href="http://www.ibm.com/developerworks/ibm/library/i-garbage1/">http://www.ibm.com/developerworks/ibm/library/i-garbage1/</a></li>
	<li><a href="http://www-01.ibm.com/support/docview.wss?rs=180&amp;context=SSEQTP&amp;dc=DB560&amp;dc=DB520&amp;uid=swg21384096&amp;loc=en_US&amp;cs=UTF-8&amp;lang=en&amp;rss=ct180websphere">http://www-01.ibm.com/support/docview.wss?rs=180&amp;context=SSEQTP&amp;dc=DB560&amp;dc=DB520&amp;uid=swg21384096&amp;loc=en_US&amp;cs=UTF-8&amp;lang=en&amp;rss=ct180websphere</a></li>
	<li><a href="http://publib.boulder.ibm.com/infocenter/javasdk/v6r0/index.jsp?topic=/com.ibm.java.doc.diagnostics.60/diag/appendixes/cmdline/cmdline_gc.htm">http://publib.boulder.ibm.com/infocenter/javasdk/v6r0/index.jsp?topic=/com.ibm.java.doc.diagnostics.60/diag/appendixes/cmdline/cmdline_gc.htm</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date><![CDATA[2010-08-09 16:16:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-09 15:16:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lenteur-dune-appli-web-sur-une-jvm-ibm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="fuite"><![CDATA[fuite]]></category>
		<category domain="category" nicename="mco"><![CDATA[mco]]></category>
		<category domain="post_tag" nicename="memoryleak"><![CDATA[memoryleak]]></category>
		<category domain="category" nicename="performance"><![CDATA[performance]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<category domain="category" nicename="prod"><![CDATA[prod]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_msp_keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[IBM, J9, IBM J9, WebSphere, JVM, Thread Dump, ps, Waiting On Condition, GC, Garbage Collector]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[lenteur-dune-appli-web-sur-une-jvm-ibm-partie-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_msp_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Petit retour sur le pair-programming</title>
		<link>http://www.blog2.arkey.fr/2010/07/11/petit-retour-sur-le-pair-programming/</link>
		<pubDate>Sun, 11 Jul 2010 20:44:41 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=169</guid>
		<description></description>
		<content:encoded><![CDATA[Lors de ma mission précédente, une des unités business a décidé d'investir dans Scrum, avec ce changement de méthodologie, les équipes de développement étant relativement enthousiastes, ont été formées au TDD et au pair-programming. Une discussion avec un pote, nous a amené à parler du pair-architecturing, ou la confrontation des idées, le challenge apporté par son alter-ego, m'a conduit à écrire ce petit retour à propos du pair-programming, et pourquoi l'appliquer à d'autres discipline n'est pas une mauvaise idée, au contraire.

Après plus d'un an passé dans ce contexte d'agilité avec Scrum, je vous livre quelques pensées sur le pair-programming.
<h1>D'abord l'évolution</h1>
Toutes les équipes n'ont pas choisi d'adopter le pair-programming comme pratique régulière pour l'ensemble des développements.
<ol>
	<li>Avant Scrum, les développeurs se voyaient confiés certains dossiers, et chacun travaillait vaguement dans son coin avec parfois l'aide des autres.</li>
	<li>Coup de bol expérience de refactoring de l'architecture. J'ai eu l'occasion en temps que développeur de travailler avec un autre développeurs sur l'architecture de l'application. Les enjeux sont importants, ce serait dommage de se louper et de planter une version.
<blockquote>A cette époque là j'ai vraiment eu plaisir à travailler avec l'autre développeur, à faire ce que j'appellerai du <em><strong>pair-architecturing</strong></em>.</blockquote>
</li>
	<li>En effet, au démarrage de Scrum les développeurs n'étaient pas encore près à faire le changement, moi y compris:
<blockquote>J'étais à l'aise seul devant mon poste, et parfois je demandais l'aide ou le retour des membres de mon équipes, et cela me convenait bien.</blockquote>
</li>
	<li>Ensuite l'assignation des taches est petit à petit sorti mais en partie seulement de la responsabilité des développeurs, par conséquent le choix de faire du pair-programming était de moins en moins une option possible pour le développement. C'est dommage.</li>
	<li>Pendant les phases (par développeur) destinées à la maintenance, il fallait transmettre la connaissance métier, j'ai vu et même participé à l'analyse de problèmes métier complexes, très spécifiques, mais sur des domaines très variés. A ce moment il ne s'agit pas encore véritablement de pair-programming, mais de <em><strong>pair-analysing</strong></em>. Cette étape finalement couteuse en temps pour ceux qui possèdent la connaissance métier et la connaissance du code afférent est nécessaire pour les développeurs qui passent donc par cette case maintenance.</li>
<blockquote>J'ai trouvé ces moments de pair-analysing comme particulièrement intéressant, car très riche en métier, et surtout très formateurs sur les chose à ne pas faire, typiquement lorsqu'il faut corriger du code legacy, le design de celui-ci devient une caractéristique majeure du temps de compréhension et du temps de correction d'anomalies. Egalement je ne faisais déjà plus vraiment confiance aux commentaires, mais ces passages ont à nouveau enfoncé le clou.</blockquote>
	<li>Un sujet technique assez poussé et sur un sujet délicat à maitriser, pour terminer ce projet, il a été décidé de staffer les deux personnes qui avait bossé dessus (seules mais à la suite l'une de l'autre pour des raisons de planning). A deux donc nous avons décidé de faire du pair-programming. C'est la première véritable expérience de pair que j'ai eu.
<blockquote>Et j'en ai été très heureux, car à deux avec un niveau relativement équivalent, on a pu travailler avantageusement le design du code, et la testabilité de nos design. Egalement aussi on a pu penser au cas limites bien mieux que lorsqu'on avait travaillé chacun de notre coté, et pourtant nous avions fait régulièrement des réunions (informelles) avec l'architecte pour discuter des points sombres.</blockquote>
</li>
	<li>Puis arrivé dans une équipe avec des newbies sur le projet; il fallait transmettre les connaissances. Et là c'est la volonté forte du nouveau scrum master de pousser le pair-programming, j'ai définitivement apprécié cette pratique quand j'ai travaillé dans cette équipe, j'ai vécu la plupart du temps des succes story, mais aussi quelques petits écueils et inconvénients, j'en fait donc part dans la suite de l'article.
Nous avons pratiqué le pair-programming pour l'écriture de nouveau code, pour la réhabilitation de code legacy, et pour le refactoring de code legacy (ce n'est pas la même chose).
<blockquote>Ce que je retiendrais c'est que l'équipe était reconnue comme véloce, et de mon point de vue je pense que le travail réalisé était plutôt bon. Et que définitivement le travail aurait pris bien plus de temps et aurait été moins bien fait si chacun était resté sur ses tâches.</blockquote>
</li>
</ol>
<h1>Les retours enfin</h1>
Honnêtement je pense que travailler en binôme est vraiment très bien et très bon pour un projet, en particulier si le code du projet doit survivre longtemps. Mais il y a certaines choses à éviter.
<ol>
	<li>Le pair-programming c'est lent et ça coute cher, c'est ce qu'on peut vous dire, mais ceux qui avancent ça n'ont aucun argument pour étayer ces propos.
<ol type="a">
	<li>A propos de la lenteur : il n'y a pas de mesures que je connait qui vont dans ce sens ou dans l'autre d'ailleurs.
<blockquote>C'est la raison pour laquelle je souhaite témoigner, et je tiens à dire que c'est <strong>l'équipe qui favorisait au maximum le pair-programming qui était ressentie comme la plus véloce</strong>.</blockquote>
</li>
	<li>A propos du coût, effectivement il y a deux éléments qui travaillent ensemble sur un sujet, mais le sujet fonctionnel est finalement mieux maitrisé par les développeurs, les aller-retours entre les deux personnes favorisent l'échange d'information et les réflexions relatives, bref ça favorise le bon sens et l'intelligence. Ces deux choses donnent naturellement <strong>un code mieux réfléchi, plus robuste et plus évolutif</strong>, pour sûr <strong>pour les besoins du présent</strong>, et très probablement <strong>pour les besoins futurs</strong> comme les évolutions ou la maintenance (on ne sait jamais). Évidement faire du vrai code objet et utiliser avantageusement TDD/BDD permet de booster cet aspect. Il en résulte que sur le moyen et le long terme, les couts deviennent avantageux, et encore plus si d'autres aspects entre en jeux comme le <acronym title="Service Level Agreement">SLA</acronym>, les aspects contractuels, légaux, et autres.</li>
</ol>
</li>
	<li>Travailler à deux n'est pas de tout repos, si vraiment il y a un échange intense, <strong>6h de travail à deux c'est déjà une grosse journée</strong>, franchement on est ruiné, l'un comme l'autre. Faites le comprendre à votre entourage que travailler en binôme est fatiguant (mais productif).</li>
	<li>Quoi qu'il arrive il y a toujours des mails à dépiler, il y a toujours des interruptions, et même parfois il faut aller interrompre d'autres personnes. Organisez votre temps à deux pour faire ces activités sans gêner le binôme.</li>
	<li>Quand vous travaillez à deux n'oublier pas d'échanger régulièrement les rôles de pilote (celui qui code) de celui qui observe. C'est très important d'échanger les rôles, ça permet de faire fonctionner l'esprit avec un point de vue différent, ça stimule le cerveau. Le binôme choisira sa cadence.</li>
	<li>Ce n'est pas une relation professeur/enseignant, c'est une relation qui se base sur les responsabilités :
<ul>
	<li>celui qui code qui a le clavier entre les mains qui a la seule responsabilité de penser le code et de l'écrire</li>
	<li>celui qui à accès aux docs papier qui a le temps de prendre du recul</li>
</ul>
Encore une fois il doit y avoir un échange régulier entre le driver et l'observer.</li>
	<li><strong>Il faut savoir essayer les idées des autres!</strong> Surtout s'il n'y a pas de contre-indications et que les deux idées se valent (avant de les mettre en application).</li>
	<li><strong>La différence de niveau des deux commendataires ne doit pas être trop grande</strong>, effet, c'est irritant, ennuyant, pénible, une perte de temps pour celui qui a les compétences, et ça ne permet pas de former adéquatement le plus faible. En bref ce binôme est à la fois une perte d'argent et de temps. Pour former le newbie il faut utiliser autre chose.</li>
	<li>Tous le monde ne sait pas travailler en binôme, il ne faut pas forcer une personne qui ne sait pas ou ne veut pas faire du binômage. Cette approche demande des compétences sociales importantes (quelque soit le rôle) comme de la patience, de l'humilité, du calme. Et ce que je peux dire c'est que j'ai vraiment eu la chance de m'améliorer sur ces qualité grâce au pair-programming.</li>
	<li>Le design du code et des tests est plus propre, plus intelligibles, les impacts des changements mieux maitrisés, bref que du bien pour le code (même s'il peut toujours y avoir mieux, mais le mieux est l'ennemi du bien à ce qu'il parrait).</li>
	<li><strong>C'est un tandem dans lequel chacun protège l'autre de faire de la sur-ingénierie, ou inversement de prendre des raccourcis</strong>. Il ne faut pas seulement avoir du code correct, il faut aussi avoir un code solide pour les gens de la maintenance, pour les gens de l'exploitation, pour les futurs ingénieurs.</li>
</ol>
<h1>Finalement</h1>
Le pair programming est une pratique remarquablement efficace, quand elle est bien appliquée. C'est un véritable bénéfice pour tout de suite, mais surtout pour demain. Et c'est bien le demain qui est souvent le grand oublié des clients, ils ne voient pas les couts et les problèmes de notre métier qu'il faudra adresser sur du code legacy lors d'un refactoring, lors d'une évolution ,ou lors d'une correction d'anomalie.

Egalement je trouve que le code objet est véritablement le meilleur outils lorsqu'on travaille en pair-programming. Ce langage permet vraiment de mieux exprimer ce qui ressort des échanges observateurs/pilote. A deux il faut se protéger et s'inciter mutuellement pour faire du bon code.

L'utilisation en plus de TDD, et même de BDD qui est plus orienté responsabilité et comportement booste encore la qualité du code et de réfléchir en terme de business, de métier.

Pour aller plus loin je pense que le travaille en binôme favorise l'intellect et la consommation la plus exhaustive des scénarii métier. L'appliquer au développement est manifestement très bien, mais l'appliquer à d'autre métier est encore mieux. Typiquement pour des rôles aussi importants et impactants que l'architecture, avoir en face de soi un challenger, qui remet véritablement en question les élément sur les quels il n'est pas d'accord est un vrai plus. En plus de transmettre la connaissance, cette confrontation solidifie l'ensemble.

Je suis content et même reconnaissant d'avoir pu travailler avec la plupart des personnes en binôme, il m'ont énormément appris. Pour peu que chacun accepte le dialogue et argumente constructivement, il n'en ressortira que du bon.

Vous avez des remarques ou des retours à faire partagez, n'hésiter pas!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2010-07-11 21:44:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-11 20:44:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[petit-retour-sur-le-pair-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile"><![CDATA[agile]]></category>
		<category domain="category" nicename="agilite"><![CDATA[agilité]]></category>
		<category domain="post_tag" nicename="agilite"><![CDATA[agilité]]></category>
		<category domain="category" nicename="architecture"><![CDATA[architecture]]></category>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="design"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="pair-programming"><![CDATA[pair-programming]]></category>
		<category domain="category" nicename="perso"><![CDATA[perso]]></category>
		<category domain="post_tag" nicename="scrum"><![CDATA[scrum]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_msp_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Retour d'expérience pair-programming, binomage]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_msp_keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[pair-programming, binomage, binome, expérience, agile, scrum]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>S&#039;exprimer régulièrement (Partie 1)</title>
		<link>http://www.blog2.arkey.fr/2010/09/27/sexprimer-regulierement-partie-1/</link>
		<pubDate>Mon, 27 Sep 2010 14:52:58 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Il était une fois les expressions régulières</h1>
Depuis bien longtemps je connais et pratique les expressions régulières, à la fois au moment de coder, mais également dans mes éditeurs de texte, parfois aussi dans le shell, lors d'un <a href="http://www.panix.com/~elflord/unix/grep.html">grep</a> par exemple. Bref les expressions régulières sont pratiques dans la vie de tous les jours pour un ingénieur logiciel.

Seulement voilà je me suis aussi rendu compte que certains d'entre nous n'ont pas une connaissance approfondie des expressions régulières et de leurs arcanes. Effectivement il y a parfois certaines expressions qui sont assez absconses. Et aujourd'hui les moteurs des expressions régulières dépassent ce le cadre dans lequel ces expressions ont été conçue. Elle permettent certaines constructions qui sont peu connues.
<h2>Les expressions régulières hier et aujourd'hui</h2>
Sans remonter aux origines des expressions régulières -cette partie là est couverte par wikipedia- il est intéressant de noter que les expressions régulières et leur moteur ont bien évoluées en 60ans. En effet le mot <em>régulier</em> vient de l'état de fait que ces expressions permettaient de rechercher dans des <strong>langages formels</strong> et <strong>non-contextuel</strong>; aujourd'hui les recherches ont avancées et les moteurs permettent maintenant de dépasser le cadre du langage formel pour permettre de travailler dans l'espace du <strong>langage contextuel</strong>. Les racines des expressions régulières remontent bien avant l'avènement de l'informatique pour aller jusqu'aux raisonnements complexes de la logique mathématique.

Il y a une une grosse différence entre un langage non-contextuel et un lange contextuel, dans les faits cette évolution explique pourquoi il y a aujourd'hui des différences dans les moteurs qui sont intégrés dans les différents programmes (en fonction de la plateforme, des outils, du langages etc.) Aujourd'hui en Perl, en C#, et en Java nous avons la chance d'avoir des moteurs qui font partie des dernières générations. C'est sur cet héritage que je vais disserter, cela dit uniquement dans le cadre de Java et de sa fameuse classe <strong>Pattern</strong>. (<em>Vous remarquerez d'ailleurs que le moteur est nommé </em>Pattern<em> plutôt que Regex ou quelque chose du genre, l'explication est simple : cette génération de moteur n'est plus simplement à propos d'expression régulière mais donc de <strong>pattern</strong>.</em>) Je tiens aussi à préciser que cet article se concentre sur la création d'expressions régulières et non sur l'usage de la classe Pattern.
<h1>Les différentes constructions</h1>
<h2>Petit rappel</h2>
Je passe rapidement sur les bases, j'imagine que tout le monde connaît les constructions basiques d'une expression régulière :
<ul>
	<li>Les classes de caractères `[ ]` et les compléments `[^ ]`</li>
	<li>L'opérateur de Kleene `*`</li>
	<li>L'alternative `|` (le pipe)</li>
	<li>Les autres quantificateurs : `+`, `?`, `{}`, ces quantificateurs ne sont vraiment que des raccourcis de ce qui est déjà exprimable avec les autres constructions, mais ils nous simplifient la vie.</li>
	<li>Les groupes `()`</li>
</ul>
Globalement pas de surprises ici, avec ses constructions il assez facile d'écrire l'expression la plus simple jusqu'à l'expression un poil plus élaborée.

Par exemple pour valider un mail (sans rentrer dans les arcanes de la RFC) on peut avoir ça:
<pre class="lang:java decode:true">@Test
public void simpleEmailMatch() {
  String regex = "[a-z]+(\\.[a-z]+)*@[a-z]+\\.[a-z]{2,6}";

  assertTrue(Pattern.compile(regex).matcher("brice.dutheil@gemail.com").matches());
}</pre>
Ok, c'est déjà pas mal, mais si on veut extraire une section d'un texte ou valider précisément certaines sections d'un texte, il faut connaitre les constructions un peu plus pointues.
<h2>Les ancres</h2>
Les ancres sont rangées dans la javadoc de la classe <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html">Pattern</a> sous la catégorie <strong>Boundary matchers<span style="font-weight: normal;">. Une ancre identifie juste une position à laquelle elle matche, elle ne consomme pas de caractères dans la séquence traitée.</span></strong>
<h3>Le début et la fin d'une ligne</h3>
Généralement les personnes qui ont beaucoup travaillé avec le shell connaissent les deux principales ancres, à savoir le début d'une ligne `^` et la fin d'une ligne `$`. Mais il y a une astuce en Java, c'est que par défaut `^` et `$` repèrent le début et la fin du `CharSequence` uniquement, pas de notion de saut de ligne!

Pour s'en convaincre on écrit un petit test simple qu'on enrichira d'assertions, la méthode `regexFirstMatch` extrait la première section du texte qui matche la regex :
<pre class="lang:java mark:8,9 decode:true">@Test
public void startEndOfLineVsPermanentStartEndOfString() {
  String text = "The account number is \n" +
  "\t123456789\n" +
  "\tthe client phone number is :\n" +
  "\t0-987-654-321\n";

  assertEquals("T", regexFirstMatch(text, "^.")); // Tout le temps le début de la séquence
  assertEquals("1", regexFirstMatch(text, ".$")); // Tout le temps la fin de la séquence
}

private String regexFirstMatch(String text, String regex) {
  Matcher matcher = Pattern.compile(regex).matcher(text);
  return matcher.find() ? matcher.group(0) : "";
}</pre>
Et ouai, on ne s’attend pas à ça (matche `T` et `1`) surtout quand la description de ces ancres utilise le mot <strong>ligne</strong>. En fait il faut activer l'option multiligne `Pattern.MULTILINE` dans le moteur, pour que celui-ci identifie les sauts de ligne.

Ainsi dans le contexte du bout de code du dessus, les lignes suivantes permettent de voire qu'il s'agit bien du caractère `:` de la première ligne qui est trouvé.
<pre class="lang:java mark:1,3 decode:true">Matcher matcher = Pattern.compile(".$", Pattern.MULTILINE).matcher(text);
matcher.find();
assertEquals(":", matcher.group(0));</pre>
Nice, mais il y a encore mieux, le moteur de regex de Java (comme certains autres) permet de donner les options à l'intérieur de la regex, la javadoc de Pattern donne cette info dans la catégorie <strong>Special constructs (non-capturing)</strong>, celle qui nous intéresse est la construction sur les options pour toute l'expression.
<ul>
	<li><em><strong>(?idmsux-idmsux)</strong> Nothing, but turns match flags on - off</em></li>
</ul>
Il faut le placer au début de l'expression régulière, ici `(?m)` :
<pre class="lang:java decode:true">assertEquals(":", regexFirstMatch(text, "(?m).$"));</pre>
On choppe alors bien le caractère à la fin de la première ligne.
<h3>Le début et la fin d'une séquence de caractères</h3>
Dans notre expression si on veut se caler dans tous les cas sur le début et la fin d'une séquence de caractères, il y a des ancres dédiées `\A` et `\Z`. Celles-ci ne sont bien entendu pas affectées par l'option multiligne.
<pre class="lang:java decode:true">assertEquals("T", regexFirstMatch(text, "\\A.")); // Tout le temps le début de la séquence
assertEquals("1", regexFirstMatch(text, ".\\Z")); // Tout le temps la fin de la séquence
assertEquals("1", regexFirstMatch(text, "(?m).\\Z")); // Tout le temps la fin de la séquence</pre>
Notez quand même qu'en ce qui concerne le `\Z` le dernier caractère de la séquence qui est un séparateur de ligne n'est pas retourné! Comme indiqué dans la javadoc, cette ancre repère la position avant le dernier caractère séparateur (écrit comme <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html#lt">terminators</a> dans la javadoc).

Il existe d'autres ancres, mais elles sont moins utiles, je vous laisse voir par vous même.
<h2>Les options</h2>
On a vu qu'on pouvait activer des options pour une expression régulière, effectivement c'est assez pratique.

Les options possibles utilisables à la construction ou dans le pattern sont dans la javadoc, mais les plus intéressantes sont :
<table>
<tbody>
<tr>
<td><strong>Option</strong></td>
<td><strong>Flag</strong></td>
<td><strong>Flag à la construction</strong></td>
</tr>
<tr>
<td>Multi-ligne</td>
<td>`m`</td>
<td>`Pattern.MULTILINE`</td>
</tr>
<tr>
<td>Insensibilité à la casse</td>
<td>`i`</td>
<td>`Pattern.CASE_INSENSITIVE`</td>
</tr>
<tr>
<td>Matching de la casse relatif aux règles Unicode</td>
<td>`u`</td>
<td>`Pattern.UNICODE_CASE`</td>
</tr>
<tr>
<td>Matching des caractère en fonction de leur forme canonique</td>
<td></td>
<td>`Pattern.CANON_EQ`</td>
</tr>
</tbody>
</table>
Certaines options comme vu dans le tableau n'ont pas d'équivalence dans la regex.

Bon c'est bien pratique ça, mais parfois on aimerait bien s'assurer que la casse est ou n'est pas vérifiée sur une portion de la regex. Il existe une construction qui permet d'activer/désactiver une option dans une section de l'expression régulière :
<ul>
	<li><em><strong>(?idmsux-idmsux:X)</strong> X, as a non-capturing group with the given flags on - off</em></li>
</ul>
A peu près la même chose que pour les options avec une portée sur toute la regex, sauf que cette fois, la portion soumise à l'option changée est à l'intérieur d'un <strong>groupe</strong>. Et là vous remarquerez que la javadoc dit bien "<em>non-capturing</em>" ça veut dire que la regex ne gardera pas en mémoire le contenu de ce groupe, contrairement aux groupes qui, donc, <em>capturent</em> et sont identifiables par l'encadrement du groupe par des parenthèses `(X)`.

Ainsi par exemple si on ne veut pas tenir compte de la casse dans une portion de la regex on écrirait:
<pre class="lang:java decode:true">assertFalse(Pattern.compile("(?-i)[a-z]+ [a-z]+ [a-z]+").matcher("jqsdfkjkd fdfhJGJKGFQSDKjb ckbvg").matches());
assertTrue(Pattern.compile("(?-i)[a-z]+ (?i:[a-z]+) [a-z]+").matcher("jqsdfkjkd fdfhJGJKGFQSDKjb ckbvg").matches());</pre>
Dans la première expression, qui ne marche pas, l'ensemble de l'expression est sensible à la casse c'est l'option `(?-i)` en début d'expression. Mais au milieu on voudrait quand même autoriser les majuscules. Pour ce faire on active l'insensibilité uniquement pour le groupe du milieu `(?i:[a-z]+)`.
<h2>Les bornes de mot</h2>
Les bornes de mots sont des ancres de type particulier. Comme n'importe quelle ancre, ces bornes ne consomment aucun caractère. La borne `\b` s'utilise avant ou après un mot pour marquer le début ou la fin d'un mot.

Par exemple en utilisant la classe de caractère `\w`.
<pre class="lang:java decode:true">assertTrue("word".matches("\\bword"));
assertTrue("word".matches("word\\b"));
assertTrue("word".matches("\\bword\\b"));
assertTrue("word".matches("\\b\\w+\\b"));

assertTrue("12dsk_".matches("\\b\\w+\\b"));

assertTrue("12dsk;  fdg987".matches("\\w+\\b.*\\b\\w+"));

assertFalse("12dsk;   ;:!,:".matches("\\w+\\b.*\\b\\w+"));

assertTrue(Pattern.compile("\\bes\\b").matcher("Tu es encore dans ces histoires ").find());
assertFalse(Pattern.compile("\\bes\\b").matcher("Tu as encore des histoires ").find());</pre>
<div>Effectivement `\b` marque la différence entre une classe de caractère de type lettre par rapport aux classes adjacentes. On remarque néanmoins que s'il n'y a donc pas de classes de type caractère avant ou après, la borne fait sauter l'expression. De la même manière la borne ne fonctionne pas avec une classe de caractère composée de caractères qui sont considérés comme ne faisant pas partie des mots (exemple en ajoutant le tiret à la classe suivante : `[0-9a-z-]`).</div>
<div>
<pre class="lang:java decode:true">assertFalse("12dsk-".matches("\\w+"));

assertFalse("12dsk-".matches("\\w+-\\b"));
assertTrue("12dsk-".matches("[0-9a-z-]+"));
assertFalse("12dsk-".matches("[0-9a-z-]+\\b"));

assertFalse("12dsk. ".matches("\\w+.\\b."));</pre>
</div>
<div>Évidemment aussi, mettre une borne dans une regex au milieu de caractères ne marchera pas.</div>
<div>
<pre class="lang:java decode:true">assertFalse("bobEtLéa".matches("bob\\b\\w+\\bLéa"));</pre>
Bon c'est bien cool, mais si je veux matcher un texte en allemand, du grec ou simplement des lettres accentuées de notre bon français ? Là ça pèche un peu si on utilise le `\w`.

</div>
<pre class="lang:default decode:true">assertFalse("Éole".matches("\\b\\w+"));
assertTrue("Éole".matches("\\bÉole"));

assertTrue("Éole".matches("\\b[Éa-z]+"));
assertTrue("Éole".matches("\b\p{L}+"));</pre>
En effet la classe `\w` ne connait que les caractères ASCII et plus précisément; uniquement ceux de cette classe `[a-zA-Z0-9_]` tel que c'est mentionné dans la javadoc. Pour palier à cette limitation soit il faut ajouter le caractère accentué à une classe de caractère, soit on utilise une <strong>classe de caractère Unicode</strong>, c'est ce qui est fait dans la dernière assertion j'utilise `\p{L}` ! Je reviendrais plus tard sur Unicode avec les expressions régulières.
<p style="color: #a42713;">Attention à l'encodage de vos codes source ! J'ai eu des erreurs d'encodage du fichier sur Eclipse, IntelliJ et NetBeans qui provenaient de plateformes différentes (MacOSX et Windows), du coup le caractère `É` n'était pas bien encodé (comprendre que l'IDE encodait ce caractère dans autre chose qu'une lettre), ce qui faisait évidement échouer l'expression.</p>
Enfin le complément d'une borne `\b` est représenté par la borne `\B`, celle-ci matche tout ce que `\b` ne matche pas. Dans les faits `\B` marque la borne entre deux classes de caractères à l'exception d'une classe composée des caractères qu'on peut trouvé dans `\w`.
<pre class="lang:java decode:true crayon-selected">assertTrue("12dsk-".matches("\\w+-\\B")); // B capture l'inverse b
assertTrue("12dsk.".matches("\\w+\\.\\B"));
assertTrue(".!? nt".matches("[.!?]+\\B\\s+"));
assertTrue(".!?,,,;:".matches("[.!?]+\\B[,;:]+"));</pre>
<h1>Fin de la partie 1</h1>
Voilà pour la première partie, la plus simple, sur les expressions régulières en Java. Pour la suite qui arrive très bientôt j'exposerai la manière de fonctionner de certaines constructions un peu particulières :  les backreferences, les quantificateurs possessifs, les possibilités de lookahead / lookbehind.
<h2>Références</h2>
<ul>
	<li><a href="http://en.wikipedia.org/wiki/Regular_expression">http://en.wikipedia.org/wiki/Regular_expression</a></li>
	<li><a href="http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html">http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html</a></li>
	<li><a href="http://perldoc.perl.org/perlretut.html">http://perldoc.perl.org/perlretut.html</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2010-09-27 15:52:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-09-27 14:52:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sexprimer-regulierement-partie-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="design"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="expression-reguliere"><![CDATA[expression régulière]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="pattern"><![CDATA[pattern]]></category>
		<category domain="post_tag" nicename="pattern"><![CDATA[pattern]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<category domain="post_tag" nicename="regex"><![CDATA[regex]]></category>
		<category domain="post_tag" nicename="regexp"><![CDATA[regexp]]></category>
		<category domain="post_tag" nicename="regular-expression"><![CDATA[regular expression]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[suf_pseudo_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[louis gueye]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[louis.gueye@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://deepintojee.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.109.82.235]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-11-08 10:27:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-11-08 09:27:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Je ne peux que saluer l'initiative de l'auteur pour plusieurs raisons : 
 - le sujet est tout sauf trivial,
 - la restitution de notre compréhension du sujet est tout sauf triviale,
 - les exemples sont clairs, précis et bien contextualisés.

Merci pour cet excellent article]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>S’exprimer régulièrement (Partie 2)</title>
		<link>http://www.blog2.arkey.fr/2010/10/15/sexprimer-regulierement-partie-2/</link>
		<pubDate>Fri, 15 Oct 2010 13:40:15 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=211</guid>
		<description></description>
		<content:encoded><![CDATA[La première partie de cette mini-série s'est focalisée sur une petite intro, je n'ai pas vraiment insisté sur les bases des expressions régulières, j'ai juste abordé les ancres et les options, et j'ai parlé de certaines astuces à connaître. La suite de cette série continue comme prévu sur les constructions suivantes :
<ul>
	<li>Les groupes qui ne capturent pas (<em>non-capturing group</em>)</li>
	<li>Les backreferences</li>
	<li>Les autres quantificateurs
<ul>
	<li>Les quantificateurs gourmands (dits <em>greedy quantifiers</em>)</li>
	<li>Les quantificateurs paresseux (dits <em>lazy quantifiers</em> ou comme le dit la javadoc de Pattern <em>reluctant quantifiers</em>)</li>
	<li>Les quantificateurs possessifs (dits <em>possessive quantifiers</em>)</li>
</ul>
</li>
	<li>Le backtracking</li>
</ul>
Certaines des constructions présentées ici démontrent que le moteur de regex de java fait partie des toutes dernières générations. Afin de mieux expliquer la manière de fonctionner des quantificateurs, je vais faire un tour sur la technique de backtracling du moteur de regex, feature essentiel pour faire fonctionner ces constructions.

Et aussi pourquoi certaines expressions régulières sont risquées en ce qui concerne les performances.
<h1>Les groupes qui ne capturent pas</h1>
<h2>Pour comparer voici les groupes capturant</h2>
Vous connaissez certainement déjà les groupes, par exemple :
<pre class="lang:java decode:true">public class Groups {
  private static final String mail = "brice [dot] dutheil [at] gmail [dot] com";

  @Test
  public void grouping() {
    Matcher matcher = Pattern.compile("([a-z]+) ( ?\\[[a-z]+\\] ([a-z]+))+").matcher(mail);
    matcher.find();

    assertEquals("brice", matcher.group(1));
  }
}</pre>
Dans l'expression ci-dessus, il y a trois groupes définis dans l'expression rationnelle.
<ul>
	<li>`<span style="color: black; background-color: rgba(0, 20, 255, 0.37);">(</span><span style="background-color: rgba(0, 20, 255, 0.1);">[a-z]+</span><span style="color: black; background-color: rgba(0, 20, 255, 0.37);">)</span> ( ?\[[a-z]+\] ([a-z]+))+` qui est donc le groupe 1</li>
	<li>`([a-z]+) <span style="color: black; background-color: rgba(0, 20, 255, 0.37);">(</span><span style="background-color: rgba(0, 20, 255, 0.1);"> ?\[[a-z]+\] ([a-z]+)</span><span style="color: black; background-color: rgba(0, 20, 255, 0.37);">)</span>+` qui est le <strong>groupe 2</strong></li>
	<li>`([a-z]+) ( ?\[[a-z]+\] <span style="color: black; background-color: rgba(0, 20, 255, 0.37);">(</span><span style="background-color: rgba(0, 20, 255, 0.1);">[a-z]+</span><span style="color: black; background-color: rgba(0, 20, 255, 0.37);">)</span>)+` enfin qui est le <strong>groupe 3</strong> il est défini à l'intérieur du groupe 2</li>
</ul>
Le moteur de l'expression régulière enregistre juste la référence du groupe, et lorsque qu'il y a récursion sur les groupes, le groupe prend la valeur du dernier contenu matché. Ainsi dans cet exemple après un premier appel à <strong>find</strong>, l'ensemble de la chaîne de caractère a été consommée, et les groupes 2 et 3 son valorisés par :
<pre class="lang:java decode:true">assertEquals("[dot] com", matcher.group(2));
assertEquals("com", matcher.group(3));</pre>
En plus de ça, les références aux groupes sont limitées à 10. Honnêtement c'est rare d'avoir besoin de plus de 10 groupes. Dans ce cas il faut splitter la chaîne ou la regex.

Cependant on peut en partie s'arranger pour que les groupes qui ne nous intéressent pas ne soit pas référencés, il faut utiliser un groupe on-capturant.
<h2>Les non-capturing groups</h2>
C'est presque à la fin de la javadoc de la classe Pattern. Ils se construisent de la manière suivante :
<pre class="lang:java decode:true">(?:regex)</pre>
Pour reprendre l'exemple plus haut, le groupe 2 n'est pas vraiment utile à notre expression régulière. Du coup on pourrait écrire :
<pre class="lang:java mark:7 decode:true">@Test
public void groupingNonCapturing() {
  Matcher matcher = Pattern.compile("([a-z]+) (?:[ ]?\\[[a-z]+\\] ([a-z]+))+").matcher(mail);
  matcher.find();

  assertEquals("brice", matcher.group(1));
  assertEquals("com", matcher.group(2));
}</pre>
Il y a alors 2 groupes uniquement qui sont référencés.

Les constructions avancées des groupes sont la preuve que le moteur fait partie des dernière générations.
<h1>Les backreferences</h1>
Les références des groupes qui capturent, elles sont utilisées dans les moteurs de recherche et de remplacement. Typiquement avec Eclipse, le format utilisé pour faire référence à un groupe est :
<pre>X</pre>
Ou X est le numéro du groupe, sa référence.

En fait cette notation peut également s'utiliser à l'intérieur d'une expression régulière, c'est ce qu'on appelle donc une <strong>backrefrence</strong>. Pour back; parceque le groupe doit déjà être défini et matché pour être référencé dans une regex. Par exemple le cas le plus simple :
<pre class="lang:java decode:true">assertTrue(Pattern.compile("([0-9]+) \\1").matcher("123 123").matches());
assertFalse(Pattern.compile("([0-9]+) \\1").matcher("123 1234").matches());</pre>
Première assertion; le groupe 1 matche 123, la backreference va chercher à matcher le contenu exacte qui a été matché par le groupe 1, donc 123. La deuxième assertion montre bien que la backreference ne matchera pas 1234, car elle s'attend donc au même contenu que 123 (notez quand même l'utilisation de l'appel `matches()` plutôt que `find()`).

Bien entendu il faut que ce soit un groupe capturant, sinon la backreference ne sait pas ou chercher sa valeur. L'exemple qui suit montre un Pattern qui compile, mais qui ne fonctionnera pas:
<pre class="lang:java decode:true">assertFalse(Pattern.compile("(?:[0-9]+) \\1").matcher("123 123").matches());</pre>
Le simple fait que ce pattern compile m'étonne, j'aurais plutôt choisi une approche <em>fail-fast</em> dans ce cas, c'est peut-être un oubli.

Ce genre de construction est assez pratique si on veut valider un langage comme le XML.
<pre class="lang:java decode:true">assertTrue(Pattern.compile("&lt;([a-z]+)&gt;.*&lt;/\\1&gt;").matcher("&lt;strong&gt;dude!&lt;/strong&gt;").matches());
assertTrue(Pattern.compile("&lt;([a-z]+)[^&gt;]*&gt;.*&lt;/\\1&gt;").matcher("&lt;strong style=\"\"&gt;dude!&lt;/strong&gt;").matches());
assertTrue(Pattern.compile("&lt;([a-z]+)[^&gt;]*&gt;.*&lt;/\\1&gt;").matcher("&lt;strong&gt;dude!&lt;/strong&gt;").matches());</pre>
Attention il peut y avoir des astuces, en particulier sur le groupe qui fait le premier match. Par exemple dans le suivant on va voir le moteur regex valider l'expression, alors que la chaîne à valider n'est pas correcte :
<pre class="lang:java decode:true">assertTrue(Pattern.compile("&lt;([a-z]+)[^&gt;]*&gt;.*!&lt;/\\1&gt;").matcher("&lt;strong&gt;dude!&lt;/s&gt;").matches());</pre>
Effectivement `&lt;strong&gt;&lt;/s&gt;` n'est pas correct syntaxiquement pour du XML pourtant, le moteur valide la séquence de caractère. En fait c'est un des features du moteur de regex, le <em>backtracking</em>, que je vais expliquer dans la section suivante. L'idée c'est que le moteur matche bien `strong` pour le <em>groupe 1</em>, mais lorsqu'il essaye de matcher la backreference avec `strong`, il n'y arrive pas donc il reviens en arrière jusqu'à ce que le <em>groupe 1</em> est pour valeur `s`, ce qui permet à la backreference de matcher. Le reste de la balise `trong` est matchée par cette partie de l'expression `[^&gt;]*`.

La solution, est d'utiliser une borne de mot vu dans la partie 1 de cette petite série d'article.
<pre class="lang:default decode:true">assertFalse(Pattern.compile("&lt;([a-z]+\\b)[^&gt;]*&gt;.*!&lt;/\\1&gt;").matcher("&lt;strong&gt;dude!&lt;/s&gt;").matches());</pre>
De cette façon le <em>groupe 1</em> `([a-z]+\b)` est littéralement obligé d'être suivi par autre chose qu'un caractère de mot (class `\w`). Avec cette expression la mauvaise séquence de caractère XML n'est donc plus validée.

Utilisation sympa des backreferences est de chercher dans un texte les mots répétés :
<pre class="lang:java decode:true">assertTrue(Pattern.compile("\\b(\\w+)\\s+\\1\\b").matcher("the the is repeated").find());</pre>
<h1>Les quantificateurs</h1>
Les quantificateurs permettent comme leur nom l'indique de quantifier (une expression). À l'exception de l'opérateur de Kleene, géré par les moteurs de regex depuis très longtemps, tous les autres quantificateurs sont des représentations simplifiées de ce qui est exprimable par des constructions basiques.
<ul>
	<li style="text-align: justify;">`dady?` Le quantificateur optionnel peut s'exprimer par une alternative (attention à l'ordre) : `dady|dad`</li>
	<li style="text-align: justify;">`(?:pa){1,3}` Le quantificateur borné peut s'exprimer en répétant les termes et/ou avec une alternative : `pa|papa|papapa`</li>
	<li style="text-align: justify;">`vrou+m` Le quantificateur 1 ou plus peut être remplacé par l’occurrence 1 puis par une construction avec l'opérateur de Kleene : `vrouu*m`</li>
</ul>
Bref ces notations simplifiées sont bien pratiques.
<h2>Les quantificateurs gourmands (greedy quantifiers)</h2>
Pas de surprise ces quantificateurs font partie de la catégorie des quantificateurs dit gourmands. Vous savez certainement déjà les utiliser, cependant il peut y avoir des cas qui peuvent poser problèmes.

Dans l'exemple suivant je voudrais chopper la balise ouvrante.
<pre class="lang:default decode:true">public class Quantifiers {
  @Test
  public void greedy() {
    assertEquals("&lt;h1&gt;wont match&lt;/h1&gt;", regexFirstMatch("&lt;h1&gt;wont match&lt;/h1&gt;", "&lt;.+&gt;")); // greediness busted
    assertEquals("&lt;h1&gt;", regexFirstMatch("&lt;h1&gt;wont match&lt;/h1&gt;", "&lt;.+?&gt;"));
    assertEquals("&lt;h1&gt;", regexFirstMatch("&lt;h1&gt;wont match&lt;/h1&gt;", "&lt;[^&gt;]+&gt;"));
  }

  private String regexFirstMatch(String text, String regex) {
    Matcher matcher = Pattern.compile(regex).matcher(text);

    return matcher.find() ? matcher.group(0) : "didnt found match";
  }
}</pre>
Dans la première approche on utilise un quantificateur gourmand `&lt;.+&gt;` ce qui veut dire que le moteur va essayer de consommer au maximum la séquence de caractères.
<ol>
	<li>Pour la section `.+` de la regex, le quantificateur va essayer de valider au maximum le `.`
<ul>
	<li>Du coup le premier caractère `&gt;` est validé par la construction `.`,</li>
	<li>Puis le deuxième (le dernier caractère) `&gt;` est également validé par `.`.</li>
</ul>
</li>
	<li>Après ce dernier `&gt;` dans la séquence de caractère la chaîne complète est consommée, mais il reste le dernier `&gt;` <strong>dans l'expression rationnelle</strong>.</li>
	<li>Du coup le moteur utilise le mécanisme de backtracking pour revenir en arrière, il tombe alors sur le `1` de `&lt;/h1&gt;`.</li>
	<li>Finalement le `&gt;` de l'expression matche le `&gt;` de la séquence de caractère.</li>
</ol>
Comme ce n'est pas ce qu'on veut récupérer, la balise ouvrante, une solution serait donc de prendre un <strong>quantificateur paresseux</strong> identifiable par le point d’interrogation qui suit le quantificateur.

Question performance dans le cas présent, il est plus intéressant de ne pas utiliser le point `.` avec un quantificateur paresseux mais plutôt d'utiliser un complément de l'ensemble qu'on ne veut pas matcher, c'est à dire une classe de caractère avec exclusion du caractère non voulu `&gt;`. C'est la troisième solution du bout de code (ligne 6).
<h2>Les quantificateurs paressseux (lazy quantifiers)</h2>
Ces quantificateurs sont bien nommés parce dans le genre, ils vont en faire vraiment le moins possible. Pour les comparer donc avec un quantificateur gourmand ou la séquence maximum est consommée (notez que la méthode <strong>regexFirstMatch</strong> est la même que dans le bout de code ci-dessus) :
<pre class="lang:java decode:true">assertEquals("abc1abc2", regexFirstMatch("abc1abc2", "abc1(?:abc\\d)?"));</pre>
Le quantificateur `?` essaye de matcher la regex du groupe, et il y arrive, donc la séquence complète est consommée. Par contre ci la regex utilise une construction avec un quantificateur paresseux `??` :
<pre class="lang:java decode:true">assertEquals("abc1", regexFirstMatch("abc1abc2", "abc1(?:abc\\d)??"));</pre>
Alors le quantificateur ne va pas s'emmerder à matcher, si la regex matche déjà ce qui est fait par la première partie de la regex `abc1`. Ce qu'il faut retenir c'est qu'un lazy quantifier, ne matchera jamais si le moteur valide déjà l'expression, et le corollaire est que le lazy quantifer cherchera toujours à matcher si et uniquement si la regex n'a pas déjà été validée.

Autre exemple avec un quantificateur borné :
<pre class="lang:java mark:2 decode:true">assertEquals("abc1abc2abc3", regexFirstMatch("abc1abc2abc3", "(?:abc\\d){2,3}")); // greediness busted
assertEquals("abc1abc2", regexFirstMatch("abc1abc2abc3", "(?:abc\\d){2,3}?")); // lazyness
assertEquals("didnt found match", regexFirstMatch("abc1", "(?:abc\\d){2,3}?"));</pre>
À la ligne 2, le quantificateur paresseux est obligé d'être exécuté une fois au moins pour matcher, mais il en fait le moins possible.
<h2>Les quantificateurs possessifs (possessive quantifiers)</h2>
Les quantificateurs gourmands et paresseux, utilisent intelligement la capacité de backtracking afin d'évaluer les permutations possible qui permettent de valider l'expression régulière suivant leur stratégies respectives (<em>en faire le plus</em> ou <em>en faire le moins</em>). Cette propriété permet d'avoir des expressions assez souples pour matcher un grand nombre de séquence de caractère.

Cependant <strong>cette souplesse a un coût, le backtracking a un coût en mémoire et en temps CPU</strong>. Ce coût monte suivant la complexité de l'expression rationnelle et en fonction de la séquence de caractère. Pour des raisons de performance les créateurs des moteurs de regex ont introduit une nouvelle construction qui améliore les performances de votre regex : les quantificateurs possessifs.

Cette catégorie de quantificateur est un peu différente des deux autres, dans la mesure ou le <strong>backtracking est désactivé</strong>. Ce qui veut dire, si vous avez suivi, que l'expression régulière ne peut pas revenir en arrière chercher une précédente position ou la regex validait. Cependant il faut noter qu'un possessive quantifier cherche également à matcher le plus possible.

Typiquement dans le code suivant :
<pre class="lang:java decode:true">assertEquals("&lt;h1&gt;will match&lt;/h1&gt;", regexFirstMatch("&lt;h1&gt;will match&lt;/h1&gt;&amp;amp;nbsp;", "&lt;.+&gt;"));</pre>
La partie de l'expression régulière `.+` va tout matcher jusqu'au point virgule `;`. Seulement comme expliqué plus haut, une fois que la String est consommée, le caractère `&gt;` dans la regex ne peut pas matcher, donc le moteur reviens plusieurs fois sur ses pas, puis ressaye de matcher le `&gt;` de la regex. Ce comportement peut être désiré dans certains cas, mais parfois si on souhaite juste rechercher quelque chose de spécifique ou valider très vite un texte sans chercher d'autres combinaisons alors ce n'est pas l'idéal.
<pre class="lang:java decode:true">assertEquals("didnt found match", regexFirstMatch("&lt;h1&gt;will match&lt;/h1&gt;&amp;amp;nbsp;", "&lt;.++&gt;"));</pre>
Ici l'expression est constituée d'un possessive quantifier, et en effet l'expression ne matche pas parce qu’une fois que la regex a consommée l'ensemble de la chaîne, et qu'elle ne peut plus matcher le dernier `&gt;`, elle se déclare en erreur. On peut voir ça comme une construction du genre <em>fail-fast</em>.

L'intérêt véritable des constructions de cette catégorie est intéressante uniquement si les <strong>sections adjacentes de la regex sont mutuellement exclusives</strong>. L'exemple le plus prégnant est lorsqu'on utilise un complément avec un quantificateur possessif :
<pre class="lang:default decode:true">assertFalse(Pattern.compile("&lt;[^&gt;]++&gt;").matcher("&lt;property attr1=\"blah\" ....&gt;&gt;").matches());</pre>
Ici le complément `[^&gt;]` est naturellement mutuellement exclusif avec le caractère `&gt;`, ce qui permet à la regex d'invalider très vite la séquence de caractères (notez la fin de la chaîne `&gt;&gt;`). Si on avait utilisé un greedy quantifier, alors le moteur serait revenu en arrière autant de fois que possible pour tenter de valider l'expression, ce qui est impossible avec la séquence passée en paramètre.

Exemple à ne pas faire, car les tokens ne sont pas mutuellement exclusifs ; `a*+` immédiatement suivi d'un `a`, du coup la regex ne peut pas matcher car `a*+` consomme tous les `a` :
<pre class="lang:java decode:true">assertFalse(Pattern.matches("\\ba*+ab\\b", "aaaaaaab"));</pre>
Les quantificateurs possessifs sont des constructions qui sont supportées par les dernières générations de moteur de regex, parce qu'ils sont en réalité des groupes spéciaux. En effet dans la Javadoc de la classe <a href="http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html">Pattern</a>, on trouve à la fin une partie sur les constructions spéciales, et celle qui nous intéresse dans ce cas, c'est celle là :
<ul>
	<li><strong>(?&gt;X)</strong> X, as an <strong>independent, non-capturing group</strong></li>
</ul>
<ol>
	<li><em>"non capturing"</em> : Simplement parce que le groupe ne fait pas de capture lorsque X matche.</li>
	<li><em>"independant"</em> : Ici ce n'est pas très clair dans la javadoc de Pattern, pour trouver la signification il faut se rendre sur la <a href="http://perldoc.perl.org/perlretut.html">documentation des regex en Perl</a>, on y apprend qu'il s'agit d'un groupe indépendant du reste de l'expression régulière, que ce groupe ne sait pas revenir en arrière (pas de backtracking), en gros le moteur de regex permet à ce groupe de consommer tout ce qu'il peut sans considérer les autres parties de la regex.</li>
</ol>
Une petite vérification :
<pre class="lang:default decode:true">assertTrue(Pattern.matches("\\ba*+b\\b", "aaaaaaab"));
assertFalse(Pattern.matches("\\ba*+b\\b", "aaaaaaa"));

assertTrue(Pattern.matches("\\b(?&gt;a*)b\\b", "aaaaaaab"));
assertFalse(Pattern.matches("\\b(?&gt;a*)b\\b", "aaaaaaa"));</pre>
Donc un quantificateur possessif est une notation simplifiée d'un groupe indépendant et non capturant!
<h1>Le backtracking</h1>
Comme vous le savez, je l'ai bien répété, le backtracking c'est ce qui permet au moteur de regex de traquer les constructions qui ont validé. Le backtracking n'a de sens que pour les quantificateurs, en effet ce sont les quantificateurs qui vont essayer de tester une construction un certain nombre de fois. Cela dit cette construction peut-être suvi par une autre et le moteur doit s'assurer que les constructions qui suivent le quantificateur valident également le reste de la séquence.

<span style="text-decoration: underline;">Prenons un exemple :</span>

Dans le cas suivant on le pattern, observez le fait que le point `.` n'est pas mutuellement exclusif avec `bob`.

[plain]ab.*bob[/plain]

Et on essaye de valider la chaine de caractères, les chiffres sont là pour illustrer la partie sur la quelle la construction `.*` devrait matcher, mais des lettres auraient pu faire l'affaire.

[plain]ab1234bob[/plain]

A la première étape `Pattern.compile`, l'expression va être transformée dans un arbre. Techniquement le code ressemble à la fois au pattern <em>Chain of Responsability</em> et au pattern <em>Composite</em> (pour les groupes ou pour les quantificateurs notamment). Le moteur ajoute ses propres nœud au début et à la fin de l'arbre pour travailler avec cette représentation.

Dans le diagramme suivant chaque cadre correspond à l'état de la consommation de la séquence de caractère et à celui de l'expression régulière ainsi découpée en nœuds.
<p style="text-align: center;"><a href="http://www.blog2.arkey.fr/wp-content/uploads/2010/10/backtracking.png"><img class="size-full wp-image-225 aligncenter" title="backtracking" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/10/backtracking.png" alt="" width="397" height="1607" /></a></p>
On comprend immédiatement le problèmes potentiels sur des expressions qui utilisent énormément les quantificateurs non-possessifs :
<ul>
	<li>Plus la partie à matchée est longue pour le quantificateur, plus la mémoire sera consommée.</li>
	<li>Si les constructions qui suivent ne matchent pas, celles-ci devront être annulée et réessayée, ce qui veut dire un temps d’exécution plus long!</li>
</ul>
La solution c'est de faire attention quand on construit une expression rationnelle. En particulier si elle est critique, l'idée serait de la benchmarquée, mais bon il faut pas tomber non plus dans ce qu'on appelle <strong>Premature Optimisation</strong>.
<h1>Bilan</h1>
Le backtracking c'est bien ; c'est ce qui permet à la regex d'être souple, mais clairement il faut faire attention à ce mécanisme. Il sera intéressant du coup d'utiliser des groupes non-capturants et indépendants si l'opportunité le permet.

Cette série s'achèvera par une troisième et dernière partie ou j'aborderaie les possibilité de travailler avec Unicode, et surtout comment indiquer dans une regex qu'on ne veut pas d'une construction complète.

<em>
</em>
<h1>Références</h1>
<a href="http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html">http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html</a>

<a href="http://perldoc.perl.org/perlretut.html">http://perldoc.perl.org/perlretut.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2010-10-15 14:40:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-15 13:40:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sexprimer-regulierement-partie-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="design"><![CDATA[design]]></category>
		<category domain="category" nicename="pattern"><![CDATA[pattern]]></category>
		<category domain="category" nicename="performance"><![CDATA[performance]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[suf_pseudo_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Pierre Templier]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pierre.templier@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.twitter.com/ptemplier</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.223.136.6]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-11-05 14:46:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-11-05 13:46:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Une erreur s'est glissée dans le chapitre sur les quantificateurs.
pa{1,2,3} ne permet pas de matcher pa|papa|papapa mais plutôt pa|paa|paaa

ainsi on peut vérifier les assertions suivantes:

Assert.assertTrue(Pattern.compile("pa{1,3}").matcher("pa").matches());
Assert.assertTrue(Pattern.compile("pa{1,3}").matcher("paa").matches());
Assert.assertTrue(Pattern.compile("pa{1,3}").matcher("paaa").matches());
Assert.assertFalse(Pattern.compile("pa{1,3}").matcher("paaaa").matches());
Assert.assertFalse(Pattern.compile("pa{1,3}").matcher("papa").matches());
Assert.assertFalse(Pattern.compile("pa{1,3}").matcher("papapa").matches());

Merci pour cet excellent article, qui explique clairement la notion de backtracking.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil+blog@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://fr.linkedin.com/in/dutheilbrice</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.57.141.147]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-11-05 16:06:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-11-05 15:06:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah bien vu, merci, je corrige de suite.

Ah je suis content que l'article ait été clair, à l'époque de flex et yacc j'ai compris ce qu'était le backtracking en les debugant. Le code n'était pas aussi clair que celui de la classe Pattern; Lex/Flex génère un automate déterministe du coup le code est complètement différent.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>17</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>S&#039;exprimer régulièrement (Partie 3)</title>
		<link>http://www.blog2.arkey.fr/2010/11/04/sexprimer-regulierement-partie-3/</link>
		<pubDate>Thu, 04 Nov 2010 18:55:50 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=228</guid>
		<description></description>
		<content:encoded><![CDATA[Dans cette troisième et dernière partie sur les expressions régulières en Java. Je vais aborder deux thèmes assez peu utilisés et pourtant très utiles.
<ul>
	<li>Le premier, dans la continuité des groupes ce sont les constructions de <strong>look behind</strong> et <strong>look ahead</strong>.</li>
	<li>Le deuxième point abordera le support de Unicode dans nos expressions régulières.</li>
</ul>
<h1>Avoir le coup d'œil</h1>
C'est bien de ça dont il s'agit; ce feature, introduit grâce aux groupes non-capturant, permet de vérifier si une autre expression matche avant ou après une expression capturante  <strong>sans consommer</strong> de caractères. Il y a 4 constructions de types :
<ul>
	<li>Les constructions look ahead</li>
</ul>
<ol>
	<li>
<ol>
	<li><em><strong>(?=X)</strong> X, via zero-width <strong>positive lookahead</strong></em> : L'expression cherche à matcher X <strong>après</strong> la position courante et sans consommer.</li>
	<li><em><strong>(?!X)</strong> X, via zero-width <strong>negative lookahead</strong></em> : L'expression cherche à <strong>ne pas</strong> matcher X <strong>après</strong> la position courante et sans consommer.</li>
</ol>
</li>
</ol>
<ul>
	<li>Les expressions look behind</li>
</ul>
<ol>
	<li>
<ol>
	<li><em><strong>(?&lt;=X)</strong> X, via zero-width <strong>positive lookbehind</strong></em> : L'expression cherche à matcher X <strong>avant</strong> la position courante et sans consommer, ou X est une expression régulière de <strong>longueur connue</strong>.</li>
	<li><em><strong>(?&lt;!X)</strong> X, via zero-width <strong>negative lookbehind</strong></em> : L'expression cherche à <strong>ne pas</strong> matcher X <strong>avant</strong> la position courante et sans consommer, ou X est une expression régulière de <strong>longueur connue</strong>.</li>
</ol>
</li>
</ol>
Ces assertions ressemblent aux bornes `\b` elles ont un fonctionnement similaire mais plus complexes. Passons aux tests pour voir leur fonctionnement.
<h2>Les groupes de look ahead</h2>
Par exemple avec le look ahead positif :
<pre class="lang:java mark:10,15,21 decode:true">public class LookAheadLookBehind {

    private String text = "static private String aStaticVarLabel;" +
            "static private Long anotherStaticVarLabel;" +
            "private String anInstanceVar;" +
            "protected String anInteger;";

    @Test
    public void classicRegex() {
        assertEquals("aStaticVarLabel", regexMatch(text, "\\w+Label"));
    }

    @Test
    public void positiveLookAhead() {
        assertEquals("aStaticVar", regexMatch(text, "\\w+(?=Label)"));
    }

    private String regexMatch(String text, String regex) {
        Matcher matcher = Pattern.compile(regex).matcher(text);

        return matcher.find() ? matcher.group(0) : "";
    }
}</pre>
Ligne 10, on veut chopper les lignes qui se terminent par `Label` avec une expression usuelle. Si on ne voulais pas la partie `Label`, alors il aurait fallu créer un autre groupe autour de `\w+`, cependant le curseur aura consommé les caractères. L'alternative est d'utiliser un look ahead positif, c'est ce qu'on a à la ligne 15, ici le curseur s'arrête après le `r` juste avant `Label`.

Notez que dans l'exemple ce qui est retourné est le <strong>groupe 0</strong> (ligne 21), c'est à dire l’ensemble de ce qui est capturé par toute la regex. Ceci illustre à nouveau que les groupes de look ahead/begind ne capturent pas (méthode positiveLookAhead, ligne 15). C'est assez pratique pour faire des sélections ou des remplacements, dans Eclipse par exemple.

Si typiquement on cherche des termes qui ne se terminent pas par `Label`. On écrira simplement :
<pre class="lang:java decode:true">@Test
public void negativeLookAhead() {
    assertEquals("static", regexMatch(text, "\\w+(?!Label)")); // retourne 'static' car ce mot ne se termine pas par 'Label'
}</pre>
L'expression chope en premier `static`, tout simplement parce que cette partie du texte matche le fait qu'il n'y a pas `Label` qui suit, si on veut chopper le nom d'une variable alors on peut ajouter des constructions de <strong>look behind</strong>. C'est ce qu'on regarde juste après.

Faisons d'autres tests :
<pre class="lang:java decode:true">@Test
public void more_negativeLookAhead() {
    assertTrue(Pattern.compile("\\w+(?!Label)").matcher("aStaticVar").matches()); // match car Label n’apparaît pas dans la chaîne

    assertTrue(Pattern.compile("\\w+(?!Label)").matcher("aStaticVarLabel").matches()); // comme '\w+' est est quantificateur greedy, il va matcher 'aStaticVarLabel', ce qui rend le lookahead négatif '(?!Label)' vrai aussi
    assertFalse(Pattern.compile("(?!\\w+Label)").matcher("aStaticVarLabel").matches()); // Ne matche pas car la construction de lookahead contient le quantificateur '\w+'
}</pre>
À la ligne 5 attention, comme il y a devant un quantificateur gourmand `\w+` et en dehors de la construction lookahead, celui-ci va avaler la chaîne complète `aStaticVarLabel` et comme tous les caractères auront été consommés le lookahead négatif `(?!Label)` sera également valide. La ligne 6 corrige ça en incluant la construction `w+` à l'intérieur du lookahead.
<h2>Les groupes de look behind</h2>
<pre class="lang:java decode:true">@Test
public void positiveLookBehind() {
    assertEquals("anotherStaticVarLabel", regexMatch(text, "(?&lt;=private Long )\\w+"));
}</pre>
Donc là j'ai préfixé la regex par ce que je voulais voir juste avant. De la même manière si on ne veut pas d'un terme, on utilisera un <strong>look behind</strong> négatif `(?&lt;!)`, par exmple si on ne veut pas de `String`.
<pre class="lang:java decode:true crayon-selected">@Test
public void negativeLookBehind() {
    assertEquals("anotherStaticVarLabel", regexMatch(text, "(?&lt;=private \\w{4,8} )(?&lt;!String )\\w+"));
}</pre>
Observez ici qu'il y a deux constructions adjacentes look behind, l'une positive l'autre négative, ce qui illustre encore mieux que ces constructions ne consomment pas la séquence de caractères.

Observez également que l'expression ici est de longueur connue : le `\w{4,8}` ne prend que de 4 à 8 caractères. Il n'est pas possible d'écrire un look behind avec un quantificateur où la longueur n'est pas connue, la <span style="text-decoration: underline;">construction suivante est fausse</span> et provoquera une erreur de syntaxe : `(?&lt;!private \w+ )`. C'est une limite technique qui impose aux groupes de look behind d'avoir une longueur fixe ou calculable; les quantificateurs bornés `{n,m}`, l'option `?` ou l'alternative `|` tombent dans cette catégorie. Ainsi on pourrait écrire :
<pre class="lang:java decode:true">@Test
public void revised_negativeLookBehind() {
    assertEquals("anotherStaticVarLabel", regexMatch(text, "(?&lt;=(?:static )?private (?:long|Long) )\\w+"));
}</pre>
Et donc par opposition les quantificateurs `*` et `+` ne sont pas autorisés dans les lookbehind.
<h2>Attention aux quantificateurs sur une même classe de caractère</h2>
Bon, il existe certains cas un peu délicats ou les caractères adjacents d'une séquence font partie de la même classe. Dans le bout de texte utilisé dans le premier exemple, les noms variables correspondent typiquement à ça:
<code><span style="color: #800000;">anotherStaticVar</span><span style="color: #333399;">Label</span></code>
Le nom de la variable appartient à la classe de caractère `[a-zA-Z0-9_]` ou encore à `\w`.

Lorsqu'on faisait un <strong>positive look ahead</strong>, le quantificateur `\w+` va chercher à matcher l’ensemble des caractères de cette classe, ce qui veut dire que `\w+` va <strong>matcher et consommer</strong> les caractères `anotherStaticVarLabel`. Du coup lorsque la construction `(?=Label)` cherche à matcher `Label`, elle n'y arrive pas. Ce n'est pas grave, avec le backtracking l'expression `\w+` reviens en arrière jusqu'à ce que `(?=Label)` matche.

L'histoire est différente avec un <strong>negative look ahead</strong>; une fois que la partie `\w+` a matché `anotherStaticVarLabel`, le curseur est positionné après le `l`. Maintenant le moteur teste `(?!Label)`, qui cherche donc à ne pas matcher `Label`, normal c'est une négation. Et là ça marche, cette partie de l'expression ne peut plus trouver `Label`, donc la construction est validée.

Bref ce n'est pas ce qu'on veut, nous voulons par exemple identifier les variables qui ne sont pas suffixées par `Label` !

Pour ne éviter ce problème, il faut placer le groupe look ahead négatif avant `\w+`. Cela ne posera pas de problème étant donné que les look ahead ne consomment pas la séquence de caractères. Ainsi en écrivant :
<pre class="lang:java decode:true">@Test
public void controlYourQuantifiers() throws Exception {
    assertEquals("anInstanceVar", regexMatch(text, "(?&lt;=String )(?!\\w+Label)\\w+"));
}</pre>
La première partie est un look behind pour avoir ce qui est après `String `, le deuxième groupe est le look ahead dont je parlais, ce groupe cherche à ne matcher `\w+Label`, si les derniers caractères `Label` de la regex ne sont pas trouvés alors c'est bon. Finalement l'expression se termine par `\w+`. L'astuce donc se fait en deux étapes:
<ol>
	<li>Déplacer le look ahead avant l'expression qui consomme les caractères et qu'on veut capturer, ici `\w+`</li>
	<li>Faire précéder dans le look ahead négatif l'expression qu'on veut capturer, ici le groupe est devenu `(?!\w+Label)`, grâce au backtracking dans ce groupe une valeur `aStaticVarLabel` ne sera pas matchée (negative look ahead).</li>
</ol>
Voilà pour les possibilités de look ahead et de look behind dans les expressions rationnelles.

Passons maintenant au support <a href="http://unicode.org/">Unicode</a> par la classe <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html">Pattern</a>.
<h1>Unicode</h1>
En quoi Unicode est intéressant dans nos regex en Java?
<ol>
	<li>Unicode est supporté nativement par Java, le format interne des String est Unicode.</li>
	<li>Unicode nous apporte des classes, des catégories ou des propriétés de caractères bien plus étendues que les classes ASCII couramment utilisées.</li>
</ol>
<h2>Juste pour une lettre</h2>
Par exemple, j'ai une application US qui vérifie que le texte entré est uniquement composé de lettres. Facile avec la regex suivante:

[plain][a-zA-Z][/plain]

Maintenant je me dit que je souhaiterais avoir des clients français! Aille! L'approche facile mais peu élégante est d'écrire une regex dans ce genre :

[plain][a-zA-Zéèêïôàù][/plain]

Et encore j'oublie les accents sur les majuscules et encore d'autre caractères spéciaux, alors qu'ils ont pourtant <a href="http://www.academie-francaise.fr/langue/questions.html#accentuation">pleine valeur orthographique sur les majuscules également</a>. S'il fallait en plus gérer le grec, l’allemand, l’espagnol, nous aurions du mal avec une telle expression régulière. Et le raccourci <strong>w</strong> n'aide pas vraiment non plus! C'est là que viennent les classes de caractère Unicode, pour identifier un caractère qui est une lettre, on écrira très simplement :

[plain]\p{L}[/plain]

Ainsi en Java on aura par exemple
<pre class="lang:java decode:true">@Test
public void matchLettersInDifferentLanguage() throws Exception {
    assertTrue(Pattern.matches("(\\p{L}| )+", "une manœuvre sur un chêne"));
    assertFalse(Pattern.matches("[\\p{Lower} ]+", "une manœuvre sur un chêne")); // Attention p{Lower} est une classe POSIX ou ASCII !
    assertTrue(Pattern.matches("[\\p{Ll} ]+", "une manœuvre sur un chêne")); // Classe des petites lettres en Unicode p{Ll} !

    assertTrue(Pattern.matches("[\\p{L} ]+", "eine kleine Straße in München"));

    assertTrue(Pattern.matches("[\\p{L} ]+", "Это настоящая красота"));
}</pre>
IntelliJ est très bien, il fourni l'auto-complétion dans les regex c'est assez pratique à l'intérieur du code, mais pas d'explication sur la signification de ces blocs de caractères Unicode. Eclipse n'en parlons pas, et NetBeans je ne sais pas. En tous cas on trouve une réponse <a href="http://unicode.org/reports/tr18/">ici</a> ou encore <a href="http://www.unicode.org/Public/5.1.0/ucd/UCD.html">là</a> à propos des blocs Unicode:
<table style="border-spacing: 0px; border: 1px solid black; width: 574px; height: 704px;">
<thead>
<tr style="background-color: #d2e1f8;">
<th style="border-collapse: collapse; border: 1px solid #000000;">Abréviation reconnue par Pattern</th>
<th style="border-collapse: collapse; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; border: 1px solid #000000;">Signification</th>
</tr>
</thead>
<tbody>
<tr>
<td style="border: 1px solid #000000;">L</td>
<td style="border: 1px solid #000000;">Letter</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Lu</td>
<td style="border: 1px solid #000000;">Uppercase Letter</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Ll</td>
<td style="border: 1px solid #000000;">Lowercase Letter</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Lt</td>
<td style="border: 1px solid #000000;">Titlecase Letter</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Lm</td>
<td style="border: 1px solid #000000;">Modifier Letter</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Lo</td>
<td style="border: 1px solid #000000;">Other Letter</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">M</td>
<td style="border: 1px solid #000000;">Mark</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Mn</td>
<td style="border: 1px solid #000000;">Non-Spacing Mark</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Mc</td>
<td style="border: 1px solid #000000;">Spacing Combining Mark</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Me</td>
<td style="border: 1px solid #000000;">Enclosing Mark</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">N</td>
<td style="border: 1px solid #000000;">Number</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Nd</td>
<td style="border: 1px solid #000000;">Decimal Digit Number</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Nl</td>
<td style="border: 1px solid #000000;">Letter Number</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">No</td>
<td style="border: 1px solid #000000;">Other Number</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">S</td>
<td style="border: 1px solid #000000;">Symbol</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Sm</td>
<td style="border: 1px solid #000000;">Math Symbol</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Sc</td>
<td style="border: 1px solid #000000;">Currency Symbol</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Sk</td>
<td style="border: 1px solid #000000;">Modifier Symbol</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">So</td>
<td style="border: 1px solid #000000;">Other Symbol</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">P</td>
<td style="border: 1px solid #000000;">Punctuation</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Pc</td>
<td style="border: 1px solid #000000;">Connector Punctuation</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Pd</td>
<td style="border: 1px solid #000000;">Dash Punctuation</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Ps</td>
<td style="border: 1px solid #000000;">Open Punctuation</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Pe</td>
<td style="border: 1px solid #000000;">Close Punctuation</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Pi</td>
<td style="border: 1px solid #000000;">Initial Punctuation</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Pf</td>
<td style="border: 1px solid #000000;">Final Punctuation</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Po</td>
<td style="border: 1px solid #000000;">Other Punctuation</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Z</td>
<td style="border: 1px solid #000000;">Separator</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Zs</td>
<td style="border: 1px solid #000000;">Space Separator</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Zl</td>
<td style="border: 1px solid #000000;">Line Separator</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Zp</td>
<td style="border: 1px solid #000000;">Paragraph Separator</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">C</td>
<td style="border: 1px solid #000000;">Other</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Cc</td>
<td style="border: 1px solid #000000;">Control</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Cf</td>
<td style="border: 1px solid #000000;">Format</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Cs</td>
<td style="border: 1px solid #000000;">Surrogate</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">Co</td>
<td style="border: 1px solid #000000;">Private Use</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">Cn</td>
<td style="border: 1px solid #000000;">Not Assigned</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">-</td>
<td style="border: 1px solid #000000;">Any*</td>
</tr>
<tr>
<td style="border: 1px solid #000000;">-</td>
<td style="border: 1px solid #000000;">Assigned*</td>
</tr>
<tr style="background-color: #d2e1f8;">
<td style="border: 1px solid #000000;">-</td>
<td style="border: 1px solid #000000;">ASCII*</td>
</tr>
</tbody>
</table>
<h2>Matcher les caractère d'un alphabet seulement</h2>
Si je veux vérifier que mon texte appartient à de l'hébreu ou du chinois c'est faisable. Dans Unicode il faut remarquer qu'il y a plusieurs notion pour les "alphabets"; il y a les <strong>Blocs</strong> et les <strong>Scripts</strong>, cependant le moteur de Java qui se base essentiellement sur le moteur de perl, ne gère pas les scripts, donc on se contentera des blocs.

Ci-dessous je teste l'appartenance à un bloc :
<pre class="lang:java decode:true">@Test
public void matchABlock() throws Exception {
    assertFalse(Pattern.matches("(\\p{InBASIC_LATIN}| )+", "une manœuvre sur un chêne"));
    assertTrue(Pattern.matches("(\\p{InLATIN_EXTENDED_A}|\\p{InLATIN_1_SUPPLEMENT}|\\p{InBASIC_LATIN}| )+", "une manœuvre sur un chêne"));

    assertTrue(Pattern.matches("[\\p{InLATIN_1_SUPPLEMENT}\\p{InBASIC_LATIN} ]+", "eine kleine Straße in München"));

    assertTrue(Pattern.matches("[\\p{InCYRILLIC} ]+", "Это настоящая красота"));
    assertFalse(Pattern.matches("[\\p{InHEBREW} ]+", "Это настоящая красота"));

    assertTrue(Pattern.matches("[\\p{InCJK_UNIFIED_IDEOGRAPHS} ]+", new String(Character.toChars(0x6C23)))); // chi écriture traditionnel
    assertTrue(Pattern.matches("[\\p{InHIRAGANA} ]+", new String(Character.toChars(0x304D)))); // ki écriture Hiragana
}</pre>
Plusieures choses sont à remarquer :
<ul>
	<li>Le nom de l'alphabet est précédé par `In`</li>
	<li>Pour avoir une phrase en français on a très vite plusieurs blocs `LATIN EXTENDED A` pour le graphème <em>`œ`</em>, `LATIN 1 SUPPLEMENT` pour le <em>`ê`</em> e accent circonflexe.</li>
	<li>D'autres alphabet sont plus pratique à utiliser comme l'hébreu, le cyrillique, le grecque, etc.</li>
	<li>L'utilisation des alphabet Chinois, Japonais, Coréen peut aussi soulever des question surtout quand on ne le parle pas ;)</li>
</ul>
A noter également :
<blockquote>Sur les deux dernières lignes noter que j'ai utilisé le code hexadécimal <strong>UTF-16</strong> (j'y reviendrais après) pour obtenir les caractères <span style="font-size: large;">氣</span> et <span style="font-size: large;">き</span> (Chi en chinois traditionnel, Ki avec l'alphabet Hiragana). Pourquoi? Parce que Unicode c'est bien joli mais dans le monde réel il y a des limitations, pour moi il s'agit de la police de caractère de mon éditeur qui ne possède pas ces blocs de caractères défini. Peut-être aurez vous des limitations sur la police de votre navigateur. A noter également que l'encodage de vos fichier peut faire mal quand on joue avec les caractères en dehors du latin basique.
<table style="width: 50px;" border="0">
<tbody>
<tr>
<td><a href="http://www.fileformat.info/info/unicode/char/6c23/index.htm"><img class="alignright size-full wp-image-234" title="0x6C23" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/11/0x6C23-chi.png" alt="Chi (Chinois traditionnel)" width="100" height="100" /></a></td>
<td><a href="http://www.fileformat.info/info/unicode/char/304d/index.htm"><img class="alignright size-full wp-image-235" title="0x304D" src="http://www.blog2.arkey.fr/wp-content/uploads/2010/11/0x304D-ki-hiragana.png" alt="Ki (Alphabet Hiragana)" width="100" height="100" /></a></td>
</tr>
<tr>
<td style="text-align: center;">Chi (0x6C23)</td>
<td style="text-align: center;">Ki (0x304D)</td>
</tr>
</tbody>
</table>
</blockquote>
<h2>On peut encore s'amuser</h2>
Pour revenir dans les choses qui nous intéresse, imaginons que nous voulions compter tous les caractères accentués dans un texte. Le bloc Unicode `\p{L}` n'est pas approprié, mais comme je l'ai dit avec Unicode on peut accéder aux propriété d'un caractère.

Déjà pour commencer il faut savoir qu'en Unicode, un graphème comme <em>`é`</em> peut correspondre à un seul caractère <em>`é`</em> ou à deux caractères <em>`e`</em> suivi du modificateur accent grave. Cela dépend de la source, mais <strong>ces cas sont probables</strong>.
<pre class="lang:java mark:5 decode:true">@Test
public void graphemes() {
    System.out.println(
            "Lettre é accentuée Latin1 : é" + "\n" +
            "Lettre ê accentuée Latin1 : ê" + "\n" +
            "Lettre e accentuée avec modificateur unicode : e\u0301" + "\n" +
            "Lettre e accentuée avec modificateur unicode : \u0065\u0302");

    assertTrue(Pattern.matches("\\p{InLATIN_1_SUPPLEMENT}+", "éèê\u00E9"));
    assertFalse(Pattern.matches("\\p{InLATIN_1_SUPPLEMENT}+", "e\u0301"));
    assertTrue(Pattern.matches("(\\p{L}\\p{M})+", "e\u0301"));
    assertTrue(Pattern.matches("(\\p{InLATIN_1_SUPPLEMENT}|\\p{L}\\p{Mn})+", "éêe\u0301\u0065\u0302"));
}</pre>
Ainsi dans les lignes précédentes pour rechercher un graphème représenté par un seul codepoint, il faudra aller le chercher dans le bloc idoine, ici `LATIN 1 COMPLEMENT`, 0x00E9 est le codepoint du caractère <em>`é`</em>. La forme décomposée de <em>`é`</em> est <em>`e`</em> (0x0065) suivi du modificateur accent grave (0x0301).

Pour matcher cette forme décomposée du graphème, il faut simplement écrire `\p{L}\p{M}`. Il est toujours possible d'affiner l'expression en choisissant des propriétés plus précises (cf. Tableau plus haut, voire la référence Unicode). Du coup pour matcher n'importe quelle forme d'un graphème on pourra écrire l'expression de la ligne 6.

Enfin rapidement on peut exprimer les compléments à la manière standard avec `[^\p{Lu}]` ou plus simple avec un grand P `\P{Lu}`. Les intersections entres les classes / propriétés Unicode se font sans problèmes également :
<pre class="lang:java mark:3,5 decode:true">@Test
public void complements() throws Exception {
    assertTrue(Pattern.matches("[^\\p{Lu}]+", "une manœuvre sur un chêne")); // exclusion
    assertFalse(Pattern.matches("[^\\p{Lu}]+", "Une Manœuvre sur un chêne"));
    assertFalse(Pattern.matches("\\P{Lu}+", "Une Manœuvre sur un chêne")); // complément (grand P)

    assertFalse(Pattern.matches("[[^\\p{Lu}]&amp;&amp;\\p{IsL} ]+", "une manœuvre sur un chêne 123164")); // exclusion et intersection
    assertTrue(Pattern.matches("[[^\\p{Lu}]&amp;&amp;\\p{IsL} ]+", "une manœuvre sur un chêne")); // exclusion et intersection
}</pre>
<h2>Petit retour sur les base de Java</h2>
Java gère nativement Unicode, les <strong>String sont encodées en UTF-16</strong>. Ce qui explique par conséquent que lorsque je veux exprimer un caractère sous forme hexadécimale, il faut <strong>l'écrire dans sa forme UTF-16</strong>.
<pre class="lang:java decode:true">@Test
public void utf16() throws Exception {
    assertTrue(Pattern.matches("\u00E9", "é")); // char UTF-16 compris par le compilateur
    assertTrue(Pattern.matches("\\u00E9", "é")); // char UTF-16 échappé compris par la classe Pattern 
    assertTrue(Pattern.matches("\u00E9", new String(Character.toChars(0x00E9))));
    assertTrue(Pattern.matches("\\u00E9", new String(Character.toChars(0x00E9))));
}</pre>
Ces assertions marches toutes mais il faut noter que `\u00E9` est compris par le compilateur et remplacera `\u00E9` par <em>`é`</em>, alors que dans la forme ou le backslash est échappé `\u00E9` le compilateur ne fera rien. Ce sera au moteur Pattern de traiter la chaîne.
<pre class="lang:java decode:true">@Test
public void charLengthForCodePoint() throws Exception {
    assertEquals(1, Character.toChars(0x00E9).length); // é
    assertEquals(1, Character.toChars(0x304D).length); // ki
    assertEquals(2, Character.toChars(0x0001D50A).length); // MATHEMATICAL FRAKTUR CAPITAL G
}</pre>
La plupart des caractères tiendront dans le type primitif `char` qui fait donc <strong>16 bits</strong> (voilà pourquoi Java gère nativement l'UTF-16), cependant il peut arriver que certains caractères demandent davantage. `Character.toChars(int)` prend donc un <strong>codepoint</strong> représenté par en <strong>entier</strong>, qui fait en Java <strong>32 bits</strong> pour exprimer Unicode en UTF-32 donc. Dans le code ci-dessus la 3ème assertion montre d'ailleurs que Java doit splitter le caractère en question sur deux `char`.

De la même manière l'encodage change naturellement la taille d'un tableau de `byte` (<strong>8 bits</strong>).
<pre class="lang:java decode:true">@Test
public void encodingDifferenceForAsciiChars() throws Exception {
    String string = "une chaine ascii";
    assertEquals(string.length(), string.getBytes("ASCII").length);
    assertEquals(string.length(), string.getBytes("UTF-8").length);
}

@Test
public void encodingDifferenceForAccentedChars() throws Exception {
    String string = "un chêne, un frêne, une orchidée";
    assertTrue(string.length() == string.getBytes("ASCII").length);
    assertEquals(string.length() + 3, string.getBytes("UTF-8").length);
}</pre>
<h1>Bilan</h1>
Voilà cet article clos la série que je voulais écrire sur les expressions régulière. Il y a probablement d'autres arcanes à connaître. Mais sur cette série le but était de couvrir ce que le moteur Java nous permet de faire. Je pense que comprendre le fonctionnement du moteur en particulier sur le backtracking, la manière du moteur de tester une expression, la manière dont le moteur parcoure / consomme les caractères en entrée, sont des facteurs clé pour réussir une bonne expression. Cette compréhension est d'autant plus importante quand celles-ci sont liée à des éléments de performance.

Les constructions apportées avec Unicode, même limitées, ouvrent certaines possibilités intéressantes, mais clairement il y a du travail à faire : Unicode n'est manifestement pas simple.
<h1>Références</h1>
<ul>
	<li>Le tutorial perl : <a href="http://perldoc.perl.org/perlretut.html">http://perldoc.perl.org/perlretut.html</a></li>
	<li>La classe Pattern : <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html">http://download.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html</a></li>
	<li>Unicode Regular Expressions: <a href="http://unicode.org/reports/tr18/">http://unicode.org/reports/tr18/</a></li>
	<li>Unicode Character Datablase : <a href="http://www.unicode.org/Public/5.1.0/ucd/UCD.html">http://www.unicode.org/Public/5.1.0/ucd/UCD.html</a></li>
	<li>FileFormat, pour en savoir plus sur un certain caractère :  <a href="http://www.fileformat.info/info/unicode/char/search.htm">http://www.fileformat.info/info/unicode/char/search.htm</a></li>
	<li>Types primitifs en Java : <a href="http://download.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">http://download.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2010-11-04 19:55:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-11-04 18:55:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sexprimer-regulierement-partie-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="design"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="expression-reguliere"><![CDATA[expression régulière]]></category>
		<category domain="category" nicename="pattern"><![CDATA[pattern]]></category>
		<category domain="post_tag" nicename="pattern"><![CDATA[pattern]]></category>
		<category domain="post_tag" nicename="regex"><![CDATA[regex]]></category>
		<category domain="post_tag" nicename="regexp"><![CDATA[regexp]]></category>
		<category domain="post_tag" nicename="regular-expression"><![CDATA[regular expression]]></category>
		<category domain="post_tag" nicename="unicode"><![CDATA[unicode]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Expression régulière en Java, look behind, look ahead et unicode]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[suf_pseudo_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>836</wp:comment_id>
			<wp:comment_author><![CDATA[Geddons]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[plepropre@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.150.248.28]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-09-06 10:37:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-09-06 08:37:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bonjour,

Merci beaucoup pour ces articles concernant les regex, je les trouve particulièrement bien dosés et bien adaptés. 

Néanmoins, j'ai des corrections à proposer pour la partie LookAhead: 

1. Il faut dédoubler vos backslash dans les string d'expressions régulières (\w =&gt; \\w) 
2. Le dernier snippet de code juste avant les LookBehind ne fera pas un matching sur "private" le deuxième mot de la string" mais bien sur "static" (le premier mot).]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>837</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2a01:e35:1383:9a60:bc3f:75cd:eca2:e6c5]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-09-06 12:55:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-09-06 10:55:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci :)

Effectivement il y a probablement des problèmes, j'ai changé d'outillage pour la coloration syntaxique, et j'ai découvert un paquet de problèmes de caractères dans tous mes snippet de code (caractères HTML, suppréssion de backslashs (tous), etc.), j'ai bien tenté de corriger ça au maximum, mais il y en a qui sont passé entre les mailles du filet. <del datetime="2012-09-06T13:12:39+00:00">Je vais y rejeter un oeil.</del> Done, j'ai corrigé aussi les exemples.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>836</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Mockito 1.9.0 is out - Bientôt sur les repos maven</title>
		<link>http://www.blog2.arkey.fr/2011/12/19/quoi-de-neuf-docteur-dans-mockito-1-9/</link>
		<pubDate>Mon, 19 Dec 2011 08:37:06 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://dutheil.brice.online.fr/blog/?p=243</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-weight: normal;"><strong>EDIT:</strong> Hop. Enfin la release 1.9.0 est dispo en téléchargement.</span>

<span style="font-weight: normal;">Après pas mal de travail avec des périodes plus ou moins intenses - <em>bref les vicissitudes du développement Open Source</em> - le projet sort une nouvelle version <strong>1.9.0</strong> en <del>Release Candidate</del>, avec des bugfixes et bien sûr des nouvelles features. Il y a un <a title="Release notes de Mockito 1.9.0" href="http://code.google.com/p/mockito/wiki/ReleaseNotes">changelog</a> mais dans les faits le billet suivant liste brièvement ce qui est nouveau. Ah oui la version est téléchargeable <a title="Télécharger la version 1.9.0 de Mockito" href="http://code.google.com/p/mockito/downloads/detail?name=mockito-1.9.0.zip">ici</a> et bientôt disponible sur le central maven.</span>
<ul>
	<li>Pour être plus fluent et expressif, l'API introduit les alias `then` et `will` pour les réponses personnalisées (`Answer`). Ainsi que d'autres petits tweak de l'API:
<pre class="lang:java decode:true ">@Test
public void engine_should_only_work_with_diesel() {
  given(engine.start()).will(throwExceptionIfEssenceInsteadOfDiesel());
  // ...
}

private Answer throwExceptionIfEssenceInsteadOfDiesel() {
  return new Answer&lt;EngineStatus&gt;() {
    public EngineStatus answer(InvocationOnMock invocation) {
      // answer code
    }
  };
}</pre>
</li>
	<li>Les mocks peuvent maintenant être déclaré dans la configuration du stub, sur une ligne.
<pre class="lang:java decode:true ">DieselEngine de = given(mock(DieselEngine.class).start()).willThrow(TankIsEmpty.class).getMock();</pre>
</li>
	<li>On peut maintenant renvoyer la classe d'une exception plutôt que son instance.
<pre class="lang:java decode:true ">given(someMock).willThrow(IllegalArgumentException.class, SomethingIsWrongException.class);</pre>
</li>
	<li>Si jamais vous avez besoin de debugguer un bout de code ou les interactions sont non prédictibles, il est maintenant possible de loguer les invocations du mock ou de l'espion. Attention, bien qu'utile à l'occasion avec du code legacy, quand même si jamais ce besoin s'en fait sentir sur un nouveau développement c'est que ce code devient trop complexe.
<pre class="lang:java decode:true ">List mockedList = mock(List.class, withSettings().verboseLogging());
mockedList.get(0);</pre>
On pourra également ajouter des callbacks sur chaque interaction du mock.
<pre class="lang:java decode:true ">Observer observer = mock(Observer.class, withSettings().invocationListeners(listener1, listener2));
willThrow(IllegalArgumentException.class).given(observer.update(observable, "what has changed"));</pre>
</li>
	<li>Pas mal de travail a été fait sur les annotations. Maintenant il n'est plus nécéssaire d'initialiser un champ annoté par `@Spy` s'il existe dans la classe un constructeur sans argument.
<pre class="lang:java decode:true ">@RunWith(MockitoJUnitRunner.class)
public class SomeTest {
  // pas besoin d'initialiser le champs
  @Spy private ArrayList spiedArrayList;

  @Test public void verify_some_interactions() {
    spiedArrayList.iterator();
    verify(spiedArrayList, once()).iterator();
  }
}</pre>
</li>
	<li>Et pour la fin mais pas des moindres, le mécanisme d'injection de mockito supporte maintenant l'injection par constructeur. A l'heure actuelle, seul les mocks et spies déclaré dans le test en tant que champs pourront être injecté dans le constructeur du champs annoté par `@InjectMocks`.
<pre class="lang:default mark:4 decode:true ">@RunWith(MockitoJUnitRunner.class)
public class EngineTest {
  @Mock Diesel diesel;
  @InjectMocks Engine engine;

  @Test public void engine_should_consume_Diesel() {
    engine.start();
  }
}</pre>
Ou `Engine` a un constructeur avec le paramètre Diesel.
<pre class="lang:java mark:4 decode:true ">public class Engine {
  Diesel diesel;
  public Engine(Diesel diesel) {
    this.diesel = diesel;
  }

  public boolean start() {
    checkNotEmpty(diesel);
    // ...
  }
  // ...
}</pre>
</li>
</ul>
Pour l'instant en RC, cette release permettra d'adoucir les angles si nous en avons loupé certains éléments. N'hésitez pas à nous poser des questions sur la <a title="Mockito mailing list" href="http://groups.google.com/group/mockito" target="_blank">mailing list</a> ou <a title="StackOverflow" href="http://stackoverflow.com/" target="_blank">stackoverflow</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2011-12-19 10:37:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-12-19 08:37:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[quoi-de-neuf-docteur-dans-mockito-1-9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="constructor-injection"><![CDATA[constructor injection]]></category>
		<category domain="post_tag" nicename="mockito"><![CDATA[mockito]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-content-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-excerpt-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[suf_pseudo_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-newwindow]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Script d&#039;installation du JDK 5 sur MacOSX Lion et Mountain Lion (Mis à jour)</title>
		<link>http://www.blog2.arkey.fr/2012/07/30/script-pour-installer-le-jdk-5-sur-macosx-lion/</link>
		<pubDate>Sun, 29 Jul 2012 22:17:40 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=274</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>MAJ 29/07/2012</strong>: Le script a été mis à jour pour fonctionner avec Mac OS X Mountain Lion. Le script a été mis à jour pour télécharger lui même le DMG chez Apple, en bref il n'y a plus qu'à commencer à l'étape 2.

<a href="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/jdk5_install_mountain_lion.png"><img class=" wp-image-357    alignnone" title="jdk5_install_mountain_lion" src="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/jdk5_install_mountain_lion.png" alt="JDK 5 installation on Mountain Lion" width="542" height="355" /></a>

<hr />

<strong>Original 22/08/2011</strong> : Avec l'arrivée de Lion, Apple change les choses avec Java. Heureusement s'il s'agit d'une mise à jour depuis Snow Leopard, vous ne perdrez pas votre runtime JDK 6, en revanche si vous faites une installation clean, et bien il faudra télécharger le runtime ici :
<blockquote><a title="Java 6 Runtime pour Lion" href="http://support.apple.com/kb/DL1421">http://support.apple.com/kb/DL1421</a></blockquote>
Bon ça fait une chose de plus pour nous ennuyer, mais bon comme toujours pour ceux qui veulent bosser sur un JDK 1.5, il vous faudra tricher un peu plus, il n'y a pas de mise à jour standard ou facile pour installer le JDK 5 sur 10.7.

Certains ont trouvé l'astuce en téléchargeant la mise à jour Java pour Mac OS X 10.5, et avec quelques outils et commandes dans le terminal. Cela dit le processus est un poil long. Du coup je me suis codé un petit script pour automatiser ces étapes. Pour l'instant le script repose sur un téléchargement manuel de cette mise à jour.
<ol>
	<li>En premier on télécharge la mise à jour du JDK5 ici :
<blockquote><a title="Mise à jour Java pour Leopard" href="http://support.apple.com/kb/DL1359">http://support.apple.com/kb/DL1359</a></blockquote>
</li>
	<li>Ensuite dans le même répertoire on y téléchargera le <strong><a title="Script d'install du JDK 5 sur Lion" href="https://gist.github.com/raw/1163008/146a0e1378f3daf8ab7d5e981530764e64ca770b/install_jdk5_lion.sh">script</a></strong></li>
	<li>Dans un terminal dans le dossier du téléchargement
[plain]chmod +x install_jdk5_lion.sh[/plain]</li>
	<li>Il faut être <strong>root</strong>, attention quand même, le script fonctionne sur les environnements Lion que j'ai pu testé, mais il peut très bien casser votre système, déclencher un tempête ou je ne sais quoi encore... je ne garantis rien.
[plain]sudo -s[/plain]</li>
	<li>Bref il se lance comme ça :
[plain]./install_jdk5_lion.sh[/plain]</li>
	<li>Si tout se passe bien alors, les préférences Java de Mac s'ouvriront en listant le JDK 5.</li>
	<li>exit</li>
</ol>
En images, ça donne :

<a href="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/jdk5_lion_install_terminal.png"><img class="alignnone size-full wp-image-279" title="jdk5_lion_install_terminal" src="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/jdk5_lion_install_terminal.png" alt="" width="593" height="399" /></a>

<a href="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/lion_java_preferences.png"><img class="alignnone size-full wp-image-280" title="lion_java_preferences" src="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/lion_java_preferences.png" alt="" width="577" height="402" /></a>

Evidement si vous repérez une coquille, je suis à l'écoute. Bonne soirée :)

<strong>EDIT 29/08/2011</strong>: Tant qu'à faire autant montrer comment avoir plusieurs JDK dans IntelliJ sous macosx.
<ol>
	<li>Donc une fois le projet ouvert, il faut aller dans les préférences du projet (Project Settings).
<a href="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/project_setting-e1314642274278.png"><img class="alignnone size-full wp-image-289" title="project_setting" src="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/project_setting-e1314642274278.png" alt="IntelliJ Project Setting" width="496" height="327" /></a></li>
	<li>Ensuite ajouter le JSDK.
<a href="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/add_new_jsdk.png"><img class="alignnone size-full wp-image-290" title="add_new_jsdk" src="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/add_new_jsdk.png" alt="Add New JSDK" width="190" height="211" /></a></li>
	<li>Puis sélectionner dans l'explorateur le dossier /System/Library/Java/JavaVirtualMachines/1.5.0/Contents/Home
<a href="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/choose_jdk5_home.png"><img class="alignnone size-full wp-image-291" style="border-style: initial; border-color: initial;" title="choose_jdk5_home" src="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/choose_jdk5_home-e1314642723756.png" alt="Choose JDK 5 Home" width="496" height="236" /></a></li>
	<li>Hop, c'est fini, dans IntelliJ vous avez le JDK 5
<a href="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/intellij_found_it.png"><img class="alignnone size-full wp-image-292" title="intellij_found_it" src="http://www.blog2.arkey.fr/wp-content/uploads/2011/08/intellij_found_it-e1314642860664.png" alt="" width="496" height="325" /></a></li>
</ol>
Idée originale : <a href="http://www.s-seven.net/zend_5x_lion">Zend Studio <em>5</em>.x for OS X <em>Lion</em> (<em>Java</em> SE 6)</a>

Sources :
<script type="text/javascript" src="https://gist.github.com/1163008.js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date><![CDATA[2012-07-30 00:17:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-29 22:17:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[script-pour-installer-le-jdk-5-sur-macosx-lion]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="j2se-5-0"><![CDATA[j2se 5.0]]></category>
		<category domain="post_tag" nicename="java5"><![CDATA[java5]]></category>
		<category domain="post_tag" nicename="jdk5"><![CDATA[jdk5]]></category>
		<category domain="post_tag" nicename="lion"><![CDATA[lion]]></category>
		<category domain="post_tag" nicename="macosx"><![CDATA[macosx]]></category>
		<category domain="post_tag" nicename="mountain-lion"><![CDATA[mountain lion]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-excerpt-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-content-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-newwindow]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>704</wp:comment_id>
			<wp:comment_author><![CDATA[pdeschen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pdeschen@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.rassemblr.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.119.213.146]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-11-11 18:57:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-11-11 16:57:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bonjour,

Tout d'abord merci pour ce script. Non seulement utile mais cela m'a fait réalisé quelques éléments d'information! Ceci dit, avez vous essayer la mise à jour récente au Update 1 de Apple (1.6.0_29-b11-402)? Pour une raison que j'ignore encore, il semble y avoir un problème. J'ai du refaire l'installation de 1.5 puis en ouvrant les préférences, une exception est lancée, mais on peut tout de même poursuivre et y voir que 1.6 et 1.5 apparaissent.

La JVM agit de façon curieuse par contre pour ce qui touche à AWT. Liens symboliques manquants?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>725</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.56.57.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-11-12 13:27:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-11-12 11:27:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bonjour,

Je n'ai pas eu l'occasion de travailler sur AWT, je ne saurais donc pas le dire, étant donné que Java 5 n'est pas supporté pour Lion, il ne serait pas étonnant que certaines choses ne marchent plus en ce qui concerne AWT.
Également je n'ai pas encore fait la mise à jour Java 6 peut-être que je changerais l’emplacement pour suivre ceux du build OpenJDK 7.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>704</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>802</wp:comment_id>
			<wp:comment_author><![CDATA[annonymus]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[birgit.pong@yahoo.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[77.10.190.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-12-04 18:13:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-12-04 16:13:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[since 3 hours I try to install your patch... getting crazy because I don't know how to to address the "install_jdk5_lion.sh" with the "chmod +x install_jdk5_lion.sh" command!!!!
all the time there appears: "No such file or director"...

I'm no super coder - so plz, plz, plz say me, how to address the script!!!

I need java 5 very much for spss 20!!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>804</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.238.24.114]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-12-04 18:55:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-12-04 16:55:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, don't forget this is an unsupported way of using the JDK 5 for OSX Lion. So there might be quirks or issues I can't fix in time or can't fix at all. Also don't forget this script is intended for developers; though you can work your way in.

So once you have downloaded the script alongside the JDK 5 package file, launch the <strong>Terminal</strong> application, <em>you have to know a bit of shell stuff</em>.
Go to the directory where you downloaded the script, then proceed as mentioned from step 3.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>802</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>805</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.238.24.114]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-12-04 19:48:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-12-04 17:48:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,
Après investigation il s'avère que la mise à jour de Apple remplace avec des valeurs par défaut de certains liens symboliques, Ces liens sont modifiés par ce script pour faire fonctionner le JDK 5 avec les librairies du JDK 5. Il suffit donc de réparer ces liens, une réinstallation devrait faire l'affaire également.

Par contre je n'ai pas d'erreurs à l'ouverture des préférences java. Par contre je n'ai pas eu l'occasion de vérifier le comportement pour AWT.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>704</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>809</wp:comment_id>
			<wp:comment_author><![CDATA[annonymus]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[birgit.pong@yahoo.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[77.10.190.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-12-04 20:50:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-12-04 18:50:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hurray it worked out! I just had to change directory first in the terminal.
I put the script and the JavaForMacOSX10.5Update10.dmg in a new folder that I named "Java5" and put this in the "system" folder and wrote in the terminal:

"cd /System/Java 5"

and then I proceeded with your commands above
(its because I don't know how to address the downloads-folder.)

spss 20 works now on 64bit &amp; on os x 10.7 lion!!!

Thanks a lot for your nice little script!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>812</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.14.82.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-12-05 11:03:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-12-05 09:03:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool!
By the way do you have graphical issues with spss ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>809</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>975</wp:comment_id>
			<wp:comment_author><![CDATA[dhinaghena]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dhinaghena@yahoo.fr]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[129.175.156.142]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-09 19:31:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-09 17:31:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I got an error at the end :

Yeah I got it ! (Press Enter)
Now check that JDK 5 appears in Java Preference App, if yes the install is successful, otherwise try asking the internet :-/
(starting here : https://gist.github.com/1163008#comments)

FSPathMakeRef(/Applications/Utilities/Java Preferences.app) failed with error -43.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>976</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2a01:e35:1383:9a60:9592:bc6d:de0f:ae62]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-09 20:23:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-09 18:23:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The script has been upgraded early in may to reference this error. An explanation should appear on the screen beforehand. Anyway this error is due to the removal of the <code>Java Preferences</code> application by Apple, now you can only see that the JDK5 is correctly installed in the terminal.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Tester votre code JMX dans des conditions pseudo réelle.</title>
		<link>http://www.blog2.arkey.fr/2011/10/14/tester-votre-code-jmx-dans-des-conditions-pseudo-reelle/</link>
		<pubDate>Fri, 14 Oct 2011 11:01:31 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=303</guid>
		<description></description>
		<content:encoded><![CDATA[Vous devez écrire du code qui fait appel à JMX, en bon citoyen et bon développeur vous voulez tester ce code.

Première approche; vous enregistrez vos MBean sur un `MBeanServer`, disons celui de la plateforme (avec Java 6 : `ManagementFactory.getPlatformMBeanServer()`).
<pre class="lang:java decode:true">mBeanServer.registerMBean(theMBean, theMBean.getObjectName());</pre>
Étant donné que `MBeanServer` étends `MBeanServerConnection` il est possible d’exécuter des querys, de faire des invocations sur les MBean etc. Si le code est suffisamment isolé des aspects techniques de connexion à JMX, vous passerez le `MBeanServer` en lieu et place de la `MBeanServerConnection`.

Supposons le code suivant.
<pre class="lang:java decode:true">public class OperateOnJMXConnection implements JMXOperation {

    public void perform(MBeanServerConnection connection) {
        // doing some stuff there
    }

    public Result getResult() { return result; }
}</pre>
Pour tester ce code il faudrait alors écrire :
<pre class="lang:java decode:true">@Test
public void do_not_fail() {
    operateOnJMXConnection.perform(mbeanServer);

    assertThat(result).satisfies(someCondition);
}</pre>
Mais voilà, vous restez en local, et par exemple si vous avez merdé sur la sérialisation de vos beans, vous ne verrez pas d'échec dans vos test et vous aurez une surprise en prod, ou avant si votre projet a un processus qualité décent.

Évidement il y a une solution, l'idée c'est de pouvoir se connecter au `mBeanServer` local à votre processus (typiquement dans maven 3, l’exécution de vos tests peuvent être forkée).

Alors j'ai essayé de récupérer les informations pour récupérer les informations de la VM qui tourne, mais bon on tombe dans des classes <strong>sun</strong>, j'ai préféré ne pas continuer sur ce chemin semé d'embûches, sans compter sur la faiblesse de cette approche.

Bref en relisant les articles de Khanh sur JMX, j'ai vu quelque chose d'intéressant `JMXConnectorServerFactory`. Cette classe permet donc de créer un `JMXConnectorServer` avec l'URL qu'on lui spécifie et d'un `MBeanServer`. A noter que cette URL doit respecter un certain formalisme tel que la javadoc l'indique : `service:jmx:<em>protocol</em>:<em>remainder</em>`.

Le protocole ne peut pas être n'importe quoi, il faut qu'il y ait le bon service enregistré pour qu'il soit géré. Dans notre cas RMI est standard, c'est donc le protocole que je prendrai. Pour le remainder, il s'agit plus d'une partie d'une URL, je vous laisse voir la Javadoc de `JMXServiceUrl` à ce sujet, mais dans les grandes lignes la forme doit être la suivante : `//[host[:port]][url-path]`
<pre class="lang:java decode:true">JMXConnectorServer connectorServer = JMXConnectorServerFactory.newJMXConnectorServer(
    new JMXServiceURL(&amp;quot;service:jmx:rmi://&amp;quot;),
    null,
    mBeanServer
);

connectorServer.start();</pre>
Hop dans le code précédent, on a créé puis démarrer notre `JMXConnectorServer`. Il n'y a plus qu'à se connecter dessus de manière standard :
Je vais utiliser `connectorServer.getJMXServer()` pour récupérer l'URL du service, il y a une raison à cela, c'est que comme l'indique la javadoc, l'URL passée pour la création du `JMXConnectorServer` peut être légèrement modifiée par celui-ci, il faut donc récupérer la nouvelle URL.
<pre class="lang:java decode:true">JMXConnector jmxConnetor = JMXConnectorFactory.connect(connectorServer.getJMXServiceUrl());
MBeanServerConnection connection = jmx.getgetMBeanServerConnection();</pre>
Et voilà vous avez accès à une `MBeanServerConnection`, qui vit dans la JVM locale, mais qui utilise RMI pour communiquer avec le `MBeanServer`, du coup vous êtes nettement plus proches des conditions du code de production et c'est ce qui nous intéresse dans cet article.

Pour référence les articles de Khanh, et en français s'il vous plait :) :
<ul>
	<li>Partie 1 : <a href="http://jetoile.blogspot.com/2010/10/jmx-pour-les-nuls-les-concepts-partie-1.html">http://jetoile.blogspot.com/2010/10/jmx-pour-les-nuls-les-concepts-partie-1.html</a></li>
	<li>Partie 2 : <a href="http://jetoile.blogspot.com/2010/11/jmx-pour-les-nuls-les-differents-mbeans.html">http://jetoile.blogspot.com/2010/11/jmx-pour-les-nuls-les-differents-mbeans.html</a></li>
	<li>Partie 3 : <a href="http://jetoile.blogspot.com/2010/11/jmx-pour-les-nuls-les-agents-jmx-partie.html">http://jetoile.blogspot.com/2010/11/jmx-pour-les-nuls-les-agents-jmx-partie.html</a></li>
	<li>Partie 4 : <a href="http://jetoile.blogspot.com/2010/11/jmx-pour-les-nuls-les-classes-de-base.html">http://jetoile.blogspot.com/2010/11/jmx-pour-les-nuls-les-classes-de-base.html</a></li>
	<li>Partie 5 : <a href="http://jetoile.blogspot.com/2010/11/jmx-pour-les-nuls-le-mbean-server.html">http://jetoile.blogspot.com/2010/11/jmx-pour-les-nuls-le-mbean-server.html</a></li>
	<li>Partie 6 : <a href="http://jetoile.blogspot.com/2010/12/jmx-pour-les-nuls-chargement-dynamique.html">http://jetoile.blogspot.com/2010/12/jmx-pour-les-nuls-chargement-dynamique.html</a></li>
	<li>Partie 7 : <a href="http://jetoile.blogspot.com/2010/12/jmx-pour-les-nuls-les-services-jmx.html">http://jetoile.blogspot.com/2010/12/jmx-pour-les-nuls-les-services-jmx.html</a></li>
	<li>Partie 8 : <a href="http://jetoile.blogspot.com/2010/12/jmx-pour-les-nuls-les-connecteurs.html">http://jetoile.blogspot.com/2010/12/jmx-pour-les-nuls-les-connecteurs.html</a></li>
</ul>
Quelques liens javadoc :
<ul>
	<li><a href="http://download.oracle.com/javase/6/docs/api/javax/management/remote/JMXConnectorFactory.html">JMXConnectorFactory</a></li>
	<li><a href="http://download.oracle.com/javase/6/docs/api/javax/management/remote/JMXConnectorServerFactory.html">JMXConnectorServerFactory</a></li>
	<li><a href="http://download.oracle.com/javase/6/docs/api/javax/management/remote/JMXServiceURL.html">JMXServiceURL</a></li>
	<li><a href="http://download.oracle.com/javase/6/docs/api/javax/management/remote/JMXConnectorServer.html">JMXConnectorServer</a></li>
</ul>
Enfin je me suis créé une petite classe de commodité qui permet de créé facilement un loopback pour les TU :]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date><![CDATA[2011-10-14 13:01:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-10-14 11:01:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tester-votre-code-jmx-dans-des-conditions-pseudo-reelle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="jmx"><![CDATA[jmx]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="post_tag" nicename="test-unitaire"><![CDATA[test unitaire]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-excerpt-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-content-hook-override]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[amazon-product-newwindow]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Afficher les properties d&#039;un projet maven</title>
		<link>http://www.blog2.arkey.fr/2011/10/18/afficher-les-properties-dun-projet-maven/</link>
		<pubDate>Tue, 18 Oct 2011 10:15:28 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=318</guid>
		<description></description>
		<content:encoded><![CDATA[Pas vraiment un article mais plutôt une astuce que j'ai utilisé pour afficher la valeur de certaines property.

Il faut ajouter dans la section build/plugins du pom une tache ant qui fera simplement un echo. A noter que cette tache est disponible dans la phase validate.
<pre class="lang:xml decode:true crayon-selected">&lt;build&gt;
&lt;plugins&gt;

    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.1&lt;/version&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;phase&gt;validate-property&lt;/phase&gt;
                &lt;goals&gt;
                    &lt;goal&gt;run&lt;/goal&gt;
                &lt;/goals&gt;
                &lt;configuration&gt;
                    &lt;tasks&gt;
                        &lt;echo&gt;Displaying properties resolution&lt;/echo&gt;
                        &lt;echo&gt;some.property]= ${some.property}&lt;/echo&gt;
                        &lt;echo&gt;project.build.directory = ${project.build.directory&lt;/echo&gt;

                        &lt;echo&gt;project.build.finalName= ${project.build.finalName}&lt;/echo&gt;
                    &lt;/tasks&gt;
                &lt;/configuration&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;

&lt;/plugins&gt;
&lt;build&gt;</pre>
Cela dit n'étant pas un expert maven, il y existe peut-être une solution plus élégante, un commentaire est le bienvenu dans ce cas.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date><![CDATA[2011-10-18 12:15:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-10-18 10:15:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[afficher-les-properties-dun-projet-maven]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ant"><![CDATA[ant]]></category>
		<category domain="category" nicename="maven"><![CDATA[maven]]></category>
		<category domain="post_tag" nicename="maven"><![CDATA[maven]]></category>
		<category domain="post_tag" nicename="properties"><![CDATA[properties]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quelques Live Template IntelliJ pour Mockito</title>
		<link>http://www.blog2.arkey.fr/2011/10/21/quelques-live-template-intellij-pour-mockito/</link>
		<pubDate>Fri, 21 Oct 2011 18:06:46 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[Hello, j'en avais un peu marre d'écrire régulièrement voire répétitivement dans mes tests les constructions mockito.

Pour ça je me suis créé dans mon IDE favori, <a title="IntelliJ IDEA" href="http://www.jetbrains.com/idea/">IntelliJ</a>, ce qu'on appelle des Live Template. Ces templates permettent à partir d'une abréviation d'insérer des fragments de code. Ainsi par exemple :

Taper <code>iter</code> dans votre éditeur puis de faire <kbd>Ctrl+J</kbd> (sous OSX) va développer cette abréviation dans le bout de code ci-dessous (suivant le contexte bien entendu)

[java]for (TypeInIterable type : someIterable) {

}[/java]

Taper sur <kbd>Ctrl+J</kbd> (sous OSX) vous permet de lister les abréviations disponible dans le contexte courant.
<h3>Les Live Template pour Mockito</h3>
Bien qu'imparafaite pour des raisons de limite technique d'IntelliJ, elles sauvent un minimum de temps, multiplié par le nombre de test. Malheureusement il n'y a pas non plus d'import export uniquement pour les live template, il faut donc se taper la configuration de intellij à la main. Cela dit il est possible de contourner partiellement ce problème avec la sauvegarde de la configuration personnelle sur les serveurs intellij, ou encore d'exporter la configuration pour les live templates, les file templates, et encore autre chose.

J'ai défini toutes ces annotations dans un nouveau groupe 'test', et j'ai activé pour toutes le contexte Java, avec reformatage et simplification du nom qualifié.
<ol>
	<li><span style="text-decoration: underline;">Description :</span> Creates a field with the @Mock annotation
<span style="text-decoration: underline;">Abbréviation :</span> 'am'
<span style="text-decoration: underline;">Template text :</span>
[java]
@org.mockito.Mock private $TYPE$ $MOCK_FIELD$
[/java]

<span style="text-decoration: underline;">Les variables du templates sont :</span>
<table style="border-color: #000000; border-width: 1px; background-color: #ffffff; width: 100%;" border="0">
<tbody>
<tr style="background-color: #ffefd5;">
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Name</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Expression</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Default value</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Skip if defined</td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">TYPE</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("Object")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">MOCK_FIELD</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">suggestVariableName()</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
</tbody>
</table>
</li>
	<li><span style="text-decoration: underline;">Description :</span> Creates a field with the @Spy annotation
<span style="text-decoration: underline;">Abbréviation :</span> 'as'
<span style="text-decoration: underline;">Template text :</span>
[java]
@org.mockito.Spy private $TYPE$ $MOCK_FIELD$
[/java]

<span style="text-decoration: underline;">Les variables du templates sont :</span>
<table style="border-color: #000000; border-width: 1px; background-color: #ffffff; width: 100%;" border="0">
<tbody>
<tr style="background-color: #ffefd5;">
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Name</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Expression</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Default value</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Skip if defined</td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">TYPE</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("Object")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">MOCK_FIELD</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">suggestVariableName()</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
</tbody>
</table>
</li>
	<li><span style="text-decoration: underline;">Description :</span> Creates a field with the @InjectMocks annotation
<span style="text-decoration: underline;">Abbréviation :</span> 'aim'
<span style="text-decoration: underline;">Template text :</span>
[java]
@org.mockito.InjectMocks private $TYPE$ $MOCK_FIELD$
[/java]

<span style="text-decoration: underline;">Les variables du templates sont :</span>
<table style="border-color: #000000; border-width: 1px; background-color: #ffffff; width: 100%;" border="0">
<tbody>
<tr style="background-color: #ffefd5;">
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Name</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Expression</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Default value</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Skip if defined</td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">TYPE</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("Object")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">MOCK_FIELD</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">suggestVariableName()</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
</tbody>
</table>
</li>
	<li><span style="text-decoration: underline;">Description :</span> Add @RunWith(MockitoJUnitRunner.class)
<span style="text-decoration: underline;">Abbréviation :</span> 'rwm'
<span style="text-decoration: underline;">Template text :</span>
[java]
@org.junit.runner.RunWith(org.mockito.runners.MockitoJUnitRunner.class)
[/java]</li>
	<li><span style="text-decoration: underline;">Description :</span> BDD Stub mock with given(...).willReturn(...) style
<span style="text-decoration: underline;">Abbréviation :</span> 'gw'
<span style="text-decoration: underline;">Template text :</span>
[java]
given($MOCK$).willReturn($ARGS$)$END$
[/java]

<span style="text-decoration: underline;">Les variables du templates sont :</span>
<table style="border-color: #000000; border-width: 1px; background-color: #ffffff; width: 100%;" border="0">
<tbody>
<tr style="background-color: #ffefd5;">
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Name</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Expression</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Default value</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Skip if defined</td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">MOCK</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("Object")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">ARGS</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
</tbody>
</table>
</li>
	<li><span style="text-decoration: underline;">Description :</span> BDD Stub spy/mock with willReturn(...).given(...) style
<span style="text-decoration: underline;">Abbréviation :</span> 'wg'
<span style="text-decoration: underline;">Template text :</span>
[java]
org.mockito.BDDMockito.willReturn($RETURNED$).given($MOCK$).$CALL$ $END$
[/java]

<span style="text-decoration: underline;">Les variables du templates sont :</span>
<table style="border-color: #000000; border-width: 1px; background-color: #ffffff; width: 100%;" border="0">
<tbody>
<tr style="background-color: #ffefd5;">
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Name</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Expression</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Default value</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Skip if defined</td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">RETURNED</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">complete()</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">MOCK</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("Object")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">CALL</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">complete()</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
</tbody>
</table>
</li>
	<li><span style="text-decoration: underline;">Description :</span> Inserts a verify(...) statement<span style="text-decoration: underline;">
Abbréviation :</span>'verif'<span style="text-decoration: underline;">
Template text :</span>[java]
org.mockito.Mockito.verify($MOCK$).$CALL$
[/java]

<span style="text-decoration: underline;">Les variables du templates sont :</span>
<table style="border-color: #000000; border-width: 1px; background-color: #ffffff; width: 100%;" border="0">
<tbody>
<tr style="background-color: #ffefd5;">
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Name</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Expression</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Default value</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Skip if defined</td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">MOCK</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("Object")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">CALL</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">complete()</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
</tbody>
</table>
</li>
	<li><span style="text-decoration: underline;">Description :</span> Inserts Mockito.inOrder(mocks) followed by inOrder.verify(...) statement
<span style="text-decoration: underline;">Abbréviation :</span> 'ioverif'<span style="text-decoration: underline;">
Template text :</span>[java]
org.mockito.InOrder $inOrderVar$ = org.mockito.Mockito.inOrder($MOCKS$);
$IN_ORDER_VAR$.verify($MOCK$).$CALL$;
[/java]

<span style="text-decoration: underline;">Les variables du templates sont :</span>
<table style="border-color: #000000; border-width: 1px; background-color: #ffffff; width: 100%;" border="0">
<tbody>
<tr style="background-color: #ffefd5;">
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Name</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Expression</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Default value</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Skip if defined</td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">IN_ORDER_VAR</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">suggestVariableName()</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">MOCKS</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("Object")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"> MOCK</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("Object")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"> CALL</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">complete()</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
</tbody>
</table>
</li>
	<li><span style="text-decoration: underline;">Description :</span>Inserts a verify(...) statement<span style="text-decoration: underline;">
Abbréviation :</span>'verif'<span style="text-decoration: underline;">
Template text :</span>[java]
$IN_ORDER_VAR$.verify($MOCK$).$CALL$;
[/java]

<span style="text-decoration: underline;">Les variables du templates sont :</span>
<table style="border-color: #000000; border-width: 1px; background-color: #ffffff; width: 100%;" border="0">
<tbody>
<tr style="background-color: #ffefd5;">
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Name</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Expression</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Default value</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">Skip if defined</td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">IN_ORDER_VAR</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("org.mockito.InOrder")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">MOCK</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">variableOfType("Object")</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
<tr>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">CALL</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;">complete()</td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
<td style="border-color: #000000; width: 25%; border-style: solid; border-width: 1px;"></td>
</tr>
</tbody>
</table>
</li>
</ol>
Voilà donc les templates que je me suis créé pour IntelliJ, il manque certainement des cas d'utilisation, mais je trouvais plus judicieux de mettre ces cas là au moins. Pour nos amis Eclipse oou Netbeans, il y a des fonctionnalités comparables plus ou moins évoluées (de mémoire le système d'Eclipse est plutôt pas mal).
<h3>Références</h3>
<ul>
	<li><a title="Live Templates" href="http://www.jetbrains.com/idea/webhelp/live-templates-2.html">Live Templates</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date><![CDATA[2011-10-21 20:06:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-10-21 18:06:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[quelques-live-template-intellij-pour-mockito]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="intellij"><![CDATA[intellij]]></category>
		<category domain="post_tag" nicename="mockito"><![CDATA[mockito]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="post_tag" nicename="template"><![CDATA[template]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[test]]></category>
		<category domain="post_tag" nicename="test-unitaire"><![CDATA[test unitaire]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hackergarten Paris - ce qu&#039;il faut savoir sur les projets</title>
		<link>http://www.blog2.arkey.fr/2012/03/05/hackergarten-paris-ce-quil-faut-savoir-sur-les-projets/</link>
		<pubDate>Sun, 04 Mar 2012 23:54:28 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=337</guid>
		<description></description>
		<content:encoded><![CDATA[Hello à tous,

<img class="alignnone" style="vertical-align: baseline; border-image: initial; border-width: 1px; border-color: black; border-style: solid; background-color: slategray;" title="Hackergarten Logo BW" src="http://hackergarten.net/hackergarten_b_and_w_small.png" alt="Hackergarten Logo" width="392" height="150" />

<strong>Mercredi 7 mars</strong> (à 19h) aura lieu la 2ème session Hackergarten. Après <strong>Soat</strong>, on a le plaisir d'être hébergé par <strong>Valtech</strong> (103 Rue de Grenelle, 75007 Paris) et il y aura des <strong>pizzas</strong>, gros merci à eux.
<blockquote title="Hackergarten Paris">Hackergarten c'est le rendez-vous des gens qui veulent participer aux projets opensource. L'idée c'est, dans un format de 3h, de <strong>contribuer</strong> un <strong>logiciel</strong>, un <strong>fix</strong>, un <strong>feature</strong>, une <strong>documentation</strong> dont d'autres pourraient avoir l'usage. Il s'articule autour de commiters actifs pour mentorer les hackers qui participent à l'évènement.</blockquote>
Bref que du bon. Pour la planification de l'évènement c'est par là ⇒ <a href="http://hackergarten-paris.eventbrite.com/">http://hackergarten-paris.eventbrite.com/</a>

Alors pour éviter les soucis de setup le jour J, ce post donne quelques informations sur ce qu'il y aurait à récupérer ou faire en avance sur votre machine. Si vous avez des questions ou si vous voulez participez aux discussions : inscrivez vous sur la mailing-list à cette adresse ⇒ <a href="http://groups.google.com/group/hackergarten-paris/">http://groups.google.com/group/hackergarten-paris/</a>

<!--more-->
<h2>Hibernate OGM / Hibernate Search ⇐ mentoré par Emmanuel Bernard</h2>
<span style="text-decoration: underline;">IDE :</span> <strong>IntelliJ</strong> mais <strong>Eclipse</strong> fait l'affaire

<span style="text-decoration: underline;">Pour builder :</span> <strong>Maven 3.0.3</strong>
JDK 1.6 recommandé
changer les <strong>~/.m2/settings.xml</strong> selon <a href="https://community.jboss.org/wiki/MavenGettingStarted-Users" target="_blank">https://community.jboss.org/<wbr>wiki/MavenGettingStarted-Users</wbr></a>

<strong>Installer Cassandra 1.0.8 (download sur Apache)</strong>
Et pour les motivés NoSQL, installer votre moteur préféré aussi histoire de contribuer un dialect pour Hibernate OGM

Forker + cloner localement
- git clone <a href="https://github.com/hibernate/hibernate-search" target="_blank">https://github.com/hibernate/<wbr>hibernate-search</wbr></a>
- git clone <a href="https://github.com/hibernate/hibernate-ogm" target="_blank">https://github.com/hibernate/<wbr>hibernate-ogm</wbr></a>

Cloner
- git clone <a href="https://code.google.com/a/apache-extras.org/p/cassandra-jdbc/" target="_blank">https://code.google.com/a/<wbr>apache-extras.org/p/cassandra-</wbr><wbr>jdbc/</wbr></a>

Lancer <strong>mvn clean install</strong> sous chacun des clones pour être sûr que Maven télécharge bien la terre.
<h2>Maven / Jenkins ⇐ mentoré par Arnaud Héritier</h2>
<span style="text-decoration: underline;">IDE :</span> Pour Maven &amp; Jenkins : IntelliJ ou eclipse + m2e versions recentes si possibles

<strong>Git</strong> pour <strong>Jenkins</strong>, <strong>SVN</strong> pour <strong>Maven</strong>

<span style="text-decoration: underline;">Pour builder :</span>  <strong>Maven</strong> 2.2.1 min, 3.0.x serait un mieux
(De memoire pas de settings additionnels pour seulement builder)
<div><span style="text-decoration: underline;">Jenkins :</span></div>
<div>EDIT : Il faut modifier son <strong>settings.xml</strong>, voir : <a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial">https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial</a></div>
<div>Arnaud me dit à l'oreille que suite à des changements chez Oracle il faut ajouter ce miroir dans le settings.xml</div>
<div>
<pre class="lang:xhtml decode:true">&lt;mirror&gt;
  &lt;id&gt;repo.jenkins-ci.org&lt;/id&gt;
  &lt;url&gt;http://repo.jenkins-ci.org/public/&lt;/url&gt;
  &lt;mirrorOf&gt;m.g.o-public&lt;/mirrorOf&gt;
&lt;/mirror&gt;</pre>
</div>
<div>Checkout du plugin qui vous interesse puis <strong>mvn clean install hpi:run</strong></div>
<div></div>
<div><span style="text-decoration: underline;">Maven :</span></div>
<div>Checkout du plugin qui vous interesse puis <strong>mvn clean install -Prun-its</strong></div>
<h2>Infinitest ⇐ mentoré par David Gageot</h2>
<div><span style="text-decoration: underline;">IDE :</span> <strong>Eclipse</strong> mais <strong>IntelliJ</strong> fait l'affaire</div>
<div>Utiliser <strong>mvn eclipse:eclipse</strong> plutot que <strong>m2eclipse</strong></div>
<div>
<div></div>
<div><span style="text-decoration: underline;">Pour builder :</span> Maven 3.0.3</div>
<div>JDK 1.6 recommandé</div>
<div></div>
</div>
<div>Forker + cloner localement <a href="https://github.com/infinitest/infinitest" target="_blank">https://github.com/<wbr>infinitest/infinitest</wbr></a></div>
Lancer <strong>mvn dependency:go-offline</strong> pour récupérer toutes les dépendances
<h2>Mockito ⇐ mentoré par Brice Dutheil</h2>
<span style="text-decoration: underline;">IDE :</span> <strong>IntelliJ</strong> en particulier, la <strong>version Community</strong> suffira. Eclipse peut faire l'affaire. Attention on a eu des soucis avec Netbeans la dernière fois.

<span style="text-decoration: underline;">Pour Builder :</span> <strong>Ant</strong> (IntelliJ contient un Ant)
JDK 5 préféré, mais pas obligatoire.

Forker et cloner localement depuis Google code : <a href="http://code.google.com/p/mockito/source/checkout">http://code.google.com/p/mockito/source/checkout</a>
Attention ici c'est du <strong>mercurial</strong>.

Il n'y a plus qu'à ouvrir les fichiers du projet.
<h2>FluentLenium ⇐ mentoré par Mathilde Lemée</h2>
<span style="text-decoration: underline;">IDE :</span> Un IDE qui gère maven, genre IntelliJ.

<span style="text-decoration: underline;">Pour Builder :</span> Maven

Checkout depuis : <a href="https://github.com/FluentLenium/FluentLenium">https://github.com/FluentLenium/FluentLenium</a>
<h2>Votre projet</h2>
Et oui si vous avez une idée à coder en Open Source et que vous cherchez des intéressés c'est peut-être l'endroit pour en parler et dresser un plan :)
<h2>1000 mercis</h2>
Gros merci à tous ceux qui participent aux Hackergarten Paris
<ul>
	<li>Arnaud Héritier</li>
	<li>Guillaume Laforge</li>
	<li>Emmanuel Bernard</li>
	<li>David Gageot</li>
	<li>Eric Lefevre</li>
	<li>Mathilde Lemée</li>
	<li>Et vous tous qui venez</li>
</ul>
Gros merci aussi à ceux qui hébergent l'évènement, c'est bien sympa :
<ul>
	<li>Soat</li>
	<li>Valtech</li>
</ul>
Évidement merci à <strong>Hamlet D'Harcy</strong> pour avoir initier l'idée là bas en Suisse :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date><![CDATA[2012-03-05 01:54:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-03-04 23:54:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hackergarten-paris-ce-quil-faut-savoir-sur-les-projets]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="hibernate"><![CDATA[hibernate]]></category>
		<category domain="post_tag" nicename="infinitest"><![CDATA[infinitest]]></category>
		<category domain="post_tag" nicename="jenkins"><![CDATA[jenkins]]></category>
		<category domain="post_tag" nicename="maven"><![CDATA[maven]]></category>
		<category domain="post_tag" nicename="mockito"><![CDATA[mockito]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>821</wp:comment_id>
			<wp:comment_author><![CDATA[Arnaud Héritier]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[aheritier@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://aheritier.net</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[88.171.115.235]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-05 10:32:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-05 08:32:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Salut,

  Suite a des changements d'infrastructure chez Oracle il est desormais de rajouter le mirroir ci-dessous dans vos settings maven pour construire les plugins Jenkins :

   
     repo.jenkins-ci.org
     http://repo.jenkins-ci.org/public/
     m.g.o-public
   ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>822</wp:comment_id>
			<wp:comment_author><![CDATA[Arnaud Héritier]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[aheritier@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://aheritier.net</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2a01:e35:8ab7:3eb0:495f:9cc2:2a1a:c04a]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-05 10:33:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-05 08:33:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Rhaaaa le XML est protégé :
   &lt;mirror&gt;
     &lt;id&gt;repo.jenkins-ci.org&lt;/id&gt;
     &lt;url&gt;http://repo.jenkins-ci.org/public/ &lt;/url&gt;
     &lt;mirrorOf&gt;m.g.o-public&lt;/mirrorOf&gt;
   &lt;/mirror&gt;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>821</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>823</wp:comment_id>
			<wp:comment_author><![CDATA[FFalliere]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[frederic.falliere@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.14.113.249]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-05 11:11:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-05 09:11:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour ces infos.
C'est bête mais je ne retrouve pas l'heure de début. Est-ce que vous pouvez le rapeller svp ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>824</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2a01:e35:1383:9a60:149f:7f19:97a:f03b]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-05 11:43:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-05 09:43:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Comme la dernière fois, à 19h :)
Pour ce genre d'info il vaut mieux aller sur hackergarten-paris.evenbrite.com]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>823</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>825</wp:comment_id>
			<wp:comment_author><![CDATA[José]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Jose.Paumard@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.paumard.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.202.193.226]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-07 17:45:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-07 15:45:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[J'ai eu un problème avec l'URL de mockito. Avec celle-là je n'ai pas eu de souci : https://code.google.com/p/mockito/
Mais du coup je ne sais pas si je télécharge le bon truc ? 

José]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>826</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.56.57.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-07 18:07:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-07 16:07:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Salut José,

Tu peux soit te créer un clone, soit checkouté directement le code :
<code>hg clone https://code.google.com/p/mockito/ mockito</code>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>825</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3521</wp:comment_id>
			<wp:comment_author><![CDATA[Revue de Presse Xebia | Blog Xebia France]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xebia.fr/2012/03/06/revue-de-presse-xebia-2012-09/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.186.33.17]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-03-08 14:58:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-03-08 12:58:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Les inscriptions au Hackergarten Paris ont lieu sur eventbrite et vous pouvez trouver des explications sur l&rsquo;évènement de mercredi et sur la façon de procéder au setup des projets sur le blog de Brice Dutheil. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Caliper me : Ou pourquoi les microbenchmarks aident !</title>
		<link>http://www.blog2.arkey.fr/2012/08/29/caliper-ou-pourquoi-les-microbenchmarks-aident/</link>
		<pubDate>Tue, 28 Aug 2012 22:47:50 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=362</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Contexte</h1>
Dans les news récemment
<ul>
	<li>Guava 13.0 réduit la consommation en mémoire de plusieurs structures [<a title="Guava 13.0 release notes" href="http://code.google.com/p/guava-libraries/wiki/Release13">source</a>]</li>
	<li>J'ai passé des tests d'algorithmie [<a href="#">source</a>]</li>
</ul>
Premier point, on sait que Google est attentif sur les performances de ses librairies. Sur le deuxième point, ben j'ai finalement loupé un des exercices "timeboxés", je n'ai pas eu le temps de le finir a temps, du coup le code soumis était 100 % foireux. Mais bon ce n'est pas le sujet du billet, ce qui est important c'est que j'ai fini après cet algo, puis je me suis rendu compte que celui-ci n'était pas optimal, il ressemblait à un algo en <del>O(n<sup>2</sup>)</del> O(n log n) (<a href="#comment-834"><em>Merci Sam pour cette correction</em></a>). Du coup j'ai repris le papier et le crayon, et je me suis rendu compte que je pouvais utiliser une technique similaire à celle que j'ai utilisé sur le premier algo du test (comment n'ai-je pas pu y penser à ce moment d'ailleurs ?).

De mémoire l'algo porte grosso modo sur le comptage de paires d'entier distante d'un nombre K dans un tableau A.

Ma première version :
<pre class="lang:java decode:true">class PairCounts_V1 {
    public int countPairsWithKDistance(int K, int[] A) {
        if(A == null || A.length &lt; 2) return 0;

        Arrays.sort(A);

        int paircounter = 0;

        int j = A.length - 1;
        for (int i = 0; i &lt;= j; i++) {
            int val_i = A[i];

            for(; i&lt;j &amp;&amp; K - A[j] != val_i; j--);
            int val_j = A[j];

            if ((long) (val_i + val_j) == K) {
                paircounter = incrementPairCounter(paircounter, i, j);

                // count duplicates
                while(val_j == A[--j]) paircounter =
                              incrementPairCounter(paircounter, i, j);
            }
            j = A.length-1;
        }

        return kpaircounter;
    }

    private int incrementPairCounter(int paircounter, int i, int j) {
        paircounter++;
        if(i != j ) paircounter++;
        return paircounter;
    }
}</pre>
Alors pourquoi je pense que cet algo n'est pas optimal : simplement du fait des boucles inbriquée, on dirait du <del>O(n<sup>2</sup>)</del> O(n log n) (<em><a href="#comment-834">voir ici pourquoi</a></em>). Mais quand on parle de la performance ou de la complexité d'un algorithme il ne faut prendre uniquement compte de l'invariant mais aussi <strong>du jeu de données : quelle taille ? quelle distribution ? quel type de données ?</strong>

En effet un algorithme pour être efficace doit être adapté aux jeux de données qu'il aura à traiter et à l'usage qu'on en a ; peut-être à travers des paramètres ou des structures différentes, typiquement un des constructeur d'une HashMap prend des paramètres comme <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/HashMap.html#HashMap(int, float)">le facteur de charge et la taille initiale</a>, on pourra choisir une <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/TreeMap.html">TreeMap</a> au lieu d'une <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/HashMap.html">HashMap</a> si la recherche est un cas d'utilisation de la structure de donnée.

Bref du coup voilà à quoi ressemble la nouvelle version de cet algo :
<pre class="lang:java decode:true">class PairCounts_V2 {

public int countPairsWithKDistance(int K, int[] A) {
        if(A == null || A.length &lt; 2) return 0;

        HashMap&lt;Long, Integer&gt; complements = new HashMap&lt;Long, Integer&gt;();
        for (int number : A) {
            long complement = K - number;

            Integer complementCount = complements.get(complement);
            complementCount = complementCount == null ?
                                  Integer.valueOf(1)
                                  : ++complementCount;
            complements.put(complement, complementCount);
        }

        int paircounter = 0;
        for (int number : A) {
            Long key = Long.valueOf(number);
            Integer complementCount = complements.get(key);
            paircounter = complementCount == null ?
                              paircounter
                              : paircounter + complementCount;
        }

        return paircounter;
    }

}</pre>
Donc ici l'idée c'est de préparer dans un premier temps un dictionnaire  inversé basé sur un des entier et la distance demandée, en incrémentant pour chaque occurence. Ici une seule boucle for, car on parcours en entier le tableau. Dans un second temps on cherche les entiers qui correspondent effectivement à l'entrée de ce dictionnaire, et si oui on incrémente le compteur de paires. Là aussi une seule boucle sur le tableau donc O(n). Sachant qu'une HashMap a souvant une complexité de O(1) pour l'insertion et la recherche, a vue de nez l'algo est plutot pas mal.

Bon mais dans la réalité ca donne quoi, en effet comme Kirk Pepperdine et bien d'autres disaient : <em><strong>Measure ! Don't guess !</strong></em>
<h1>Caliper me voilà !</h1>
<a href="http://code.google.com/p/caliper/">Caliper</a> est un outil codé par des personnes de chez Google, il est notamment utilisé par l'équipe en charge de Guava. On peut d'ailleurs voir dans les sources de Guava les benchmarks <a href="http://code.google.com/p/guava-libraries/source/browse/#git%2Fguava-tests%2Fbenchmark%2Fcom%2Fgoogle%2Fcommon%2Fcollect">ici</a> par exemple.

Avec un projet "mavenisé" on récupère la dernière version de <strong>caliper</strong>, la version <strong>0.5-rc1</strong> aujourd'hui.
<pre class="lang:xml decode:true">&lt;dependency&gt;
    &lt;groupid&gt;com.google.caliper&lt;/groupid&gt;
    &lt;artifactid&gt;caliper&lt;/artifactid&gt;
    &lt;version&gt;0.5-rc1&lt;/version&gt;
&lt;/dependency&gt;</pre>
Pour écrire un benchmark caliper il suffit d'étendre la classe `<a href="http://caliper.googlecode.com/svn/static/api/reference/com/google/caliper/SimpleBenchmark.html"><strong>SimpleBenchmark</strong></a>`, puis d'écrire des méthodes `public int` avec le préfixe `times` et un paramètre `répétition` utilisé dans une boucle `for`. Pour passer des paramètres particuliers au benchmark on utilisera un ou des champs annoté(s) par `<a href="http://caliper.googlecode.com/svn/static/api/reference/com/google/caliper/Param.html">@Param</a>`.

Enfin comme Caliper lance une nouvelle VM, fait quelques travaux pour chauffer la VM (warmup), etc, il faut pour l'instant lancer ces tests avec une commande manuelle :
<pre class="lang:sh decode:true">java -classpath $THE_CLASSPATH com.google.caliper.Runner PairCountsBenchmark</pre>
La ligne de commande pourra varier suivant les besoins ; on peut notamment se rendre sur leur site pour y voir les <a href="http://code.google.com/p/caliper/wiki/CommandLineOptions">options</a> (le lien wiki est à ce jour en retard par rapport au <a href="http://code.google.com/p/caliper/source/browse/caliper/src/main/java/com/google/caliper/Runner.java?name=v0.5-rc1">code</a>) à passer au `Runner` Caliper. Malgré la jeunesse du framework sa documentation parfois spartiate, le projet a de réelles forces et s'avère de plus en plus populaire dans le domaine. Bien que le développement de ce projet avance lentement, ce projet est aujourd'hui maintenu par des membres de l'équipe Guava.

Donc le benchmark que j'ai mis en place :
<pre class="lang:default mark:3,4,6 decode:true">public class PairCountsBenchmark extends SimpleBenchmark {

    @Param({ "1", "6", "25", "7", "111111111" }) private int K;  // différentes valeurs de la distance de la paire
    @Param({"10", "100", "1000", "10000"}) private int length;   // différentes tailles du tableau d'entier

    @Param private Distribution distribution;                    // Type de distribution SAWTOOTH, RANDOM, une autre

    private int[] values;

    @Override protected void setUp() throws Exception {          // Création du tableau d'entier
        values = distribution.create(length);
    }

    public int timePairCounts_V1(int repetition) {
        int dummy = 0;
        for (int i = 0; i &lt; repetition; i++) {
            dummy += new PairCounts_V1().complementary_pairs(K, values);
        }
        return dummy;                                            // Variable modifiée dans la boucle pour forcer la JVM a ne pas supprimer cette boucle for.
    }

    public int timePairCounts_V2(int repetition) {
        int dummy = 0;
        for (int i = 0; i &lt; repetition; i++) {
            dummy += new PairCounts_V2().complementary_pairs(K, values);
        }
        return dummy;
    }

    public enum Distribution {                                   // Le code de la distribution voulue
        SAWTOOTH {
            @Override
            int[] create(int length) {
                int[] result = new int[length];
                for (int i = 0; i &lt; length; i += 5) {
                    result[i] = 0;
                    result[i + 1] = 1;
                    result[i + 2] = 2;
                    result[i + 3] = 3;
                    result[i + 4] = 4;
                }
                return result;
            }
        },
        RANDOM {
            @Override
            int[] create(int length) {
                Random random = new Random();
                int[] result = new int[length];
                for (int i = 0; i &lt; length; i++) {
                    result[i] = random.nextInt();
                }
                return result;
            }
        };

        abstract int[] create(int length);
    }
}</pre>
<h2>Dans le temps</h2>
Voilà il faut maintenant lancer le benchmark en ligne de commande. Et voici une partie de la sortie standard :
<pre class="lang:default decode:true"> 0% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=SAWTOOTH, length=10} 117.03 ns; σ=0.53 ns @ 3 trials
 1% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=SAWTOOTH, length=10} 410.92 ns; σ=3.93 ns @ 5 trials
 3% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=SAWTOOTH, length=10} 118.95 ns; σ=0.54 ns @ 3 trials
 4% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=SAWTOOTH, length=10} 346.11 ns; σ=1.04 ns @ 3 trials
 5% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=SAWTOOTH, length=10} 124.75 ns; σ=0.42 ns @ 3 trials
 6% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=SAWTOOTH, length=10} 343.76 ns; σ=0.60 ns @ 3 trials
 8% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=SAWTOOTH, length=10} 116.55 ns; σ=0.11 ns @ 3 trials
 9% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=SAWTOOTH, length=10} 340.24 ns; σ=0.88 ns @ 3 trials
10% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=SAWTOOTH, length=10} 124.34 ns; σ=1.17 ns @ 8 trials
11% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=SAWTOOTH, length=10} 375.23 ns; σ=2.22 ns @ 3 trials
13% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=RANDOM, length=10} 120.60 ns; σ=0.56 ns @ 3 trials
14% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=RANDOM, length=10} 399.89 ns; σ=6.66 ns @ 10 trials
15% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=RANDOM, length=10} 122.83 ns; σ=0.50 ns @ 3 trials
16% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=RANDOM, length=10} 405.20 ns; σ=6.81 ns @ 10 trials
18% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=RANDOM, length=10} 121.31 ns; σ=0.82 ns @ 3 trials
19% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=RANDOM, length=10} 406.40 ns; σ=7.90 ns @ 10 trials
20% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=RANDOM, length=10} 123.25 ns; σ=0.44 ns @ 3 trials
21% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=RANDOM, length=10} 403.80 ns; σ=4.77 ns @ 10 trials
23% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=RANDOM, length=10} 122.23 ns; σ=0.95 ns @ 3 trials
24% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=RANDOM, length=10} 401.21 ns; σ=9.94 ns @ 10 trials
25% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=SAWTOOTH, length=100} 3554.64 ns; σ=13.22 ns @ 3 trials
26% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=SAWTOOTH, length=100} 3353.02 ns; σ=28.50 ns @ 4 trials
28% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=SAWTOOTH, length=100} 3616.36 ns; σ=23.17 ns @ 3 trials
29% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=SAWTOOTH, length=100} 2759.35 ns; σ=7.49 ns @ 3 trials
30% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=SAWTOOTH, length=100} 3230.40 ns; σ=6.89 ns @ 3 trials
31% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=SAWTOOTH, length=100} 2630.14 ns; σ=11.76 ns @ 3 trials
33% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=SAWTOOTH, length=100} 3470.91 ns; σ=21.03 ns @ 3 trials
34% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=SAWTOOTH, length=100} 2703.77 ns; σ=2.87 ns @ 3 trials
35% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=SAWTOOTH, length=100} 3237.29 ns; σ=31.98 ns @ 3 trials
36% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=SAWTOOTH, length=100} 3462.79 ns; σ=14.26 ns @ 3 trials
38% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=RANDOM, length=100} 3664.38 ns; σ=22.84 ns @ 3 trials
39% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=RANDOM, length=100} 4782.95 ns; σ=21.09 ns @ 3 trials
40% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=RANDOM, length=100} 3666.78 ns; σ=11.56 ns @ 3 trials
41% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=RANDOM, length=100} 4829.99 ns; σ=18.42 ns @ 3 trials
43% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=RANDOM, length=100} 3669.01 ns; σ=3.86 ns @ 3 trials
44% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=RANDOM, length=100} 4800.20 ns; σ=27.45 ns @ 3 trials
45% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=RANDOM, length=100} 3697.72 ns; σ=16.69 ns @ 3 trials
46% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=RANDOM, length=100} 4867.33 ns; σ=39.87 ns @ 3 trials
48% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=RANDOM, length=100} 3663.00 ns; σ=18.92 ns @ 3 trials
49% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=RANDOM, length=100} 4792.09 ns; σ=23.93 ns @ 3 trials
50% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=SAWTOOTH, length=1000} 253205.17 ns; σ=2409.40 ns @ 3 trials
51% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=SAWTOOTH, length=1000} 28733.38 ns; σ=57.50 ns @ 3 trials
53% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=SAWTOOTH, length=1000} 252201.82 ns; σ=1916.34 ns @ 3 trials
54% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=SAWTOOTH, length=1000} 26003.20 ns; σ=79.01 ns @ 3 trials
55% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=SAWTOOTH, length=1000} 254835.90 ns; σ=1142.59 ns @ 3 trials
56% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=SAWTOOTH, length=1000} 24830.33 ns; σ=96.51 ns @ 3 trials
57% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=SAWTOOTH, length=1000} 336495.11 ns; σ=3182.70 ns @ 3 trials
59% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=SAWTOOTH, length=1000} 25425.31 ns; σ=236.34 ns @ 4 trials
60% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=SAWTOOTH, length=1000} 254613.30 ns; σ=591.19 ns @ 3 trials
61% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=SAWTOOTH, length=1000} 31176.21 ns; σ=34.10 ns @ 3 trials
63% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=RANDOM, length=1000} 264752.16 ns; σ=1911.17 ns @ 3 trials
64% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=RANDOM, length=1000} 53425.63 ns; σ=530.29 ns @ 5 trials
65% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=RANDOM, length=1000} 268841.98 ns; σ=1489.84 ns @ 3 trials
66% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=RANDOM, length=1000} 58635.35 ns; σ=387.69 ns @ 3 trials
68% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=RANDOM, length=1000} 266655.10 ns; σ=1012.10 ns @ 3 trials
69% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=RANDOM, length=1000} 59015.10 ns; σ=814.55 ns @ 10 trials
70% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=RANDOM, length=1000} 268504.45 ns; σ=482.22 ns @ 3 trials
71% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=RANDOM, length=1000} 58601.33 ns; σ=568.63 ns @ 3 trials
73% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=RANDOM, length=1000} 265022.05 ns; σ=1939.79 ns @ 3 trials
74% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=RANDOM, length=1000} 58487.85 ns; σ=587.15 ns @ 10 trials
75% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=SAWTOOTH, length=10000} 23462428.57 ns; σ=79476.07 ns @ 3 trials
76% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=SAWTOOTH, length=10000} 285100.65 ns; σ=3403.03 ns @ 10 trials
78% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=SAWTOOTH, length=10000} 42566217.39 ns; σ=189344.42 ns @ 3 trials
79% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=SAWTOOTH, length=10000} 273497.95 ns; σ=2738.46 ns @ 7 trials
80% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=SAWTOOTH, length=10000} 24271754.10 ns; σ=74440.46 ns @ 3 trials
81% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=SAWTOOTH, length=10000} 257143.69 ns; σ=1045.68 ns @ 3 trials
83% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=SAWTOOTH, length=10000} 33062666.67 ns; σ=154823.32 ns @ 3 trials
84% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=SAWTOOTH, length=10000} 270617.53 ns; σ=1484.45 ns @ 3 trials
85% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=SAWTOOTH, length=10000} 24082112.90 ns; σ=67162.43 ns @ 3 trials
86% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=SAWTOOTH, length=10000} 296935.84 ns; σ=197.58 ns @ 3 trials
88% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=RANDOM, length=10000} 24617137.50 ns; σ=222519.79 ns @ 4 trials
89% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=RANDOM, length=10000} 837504.04 ns; σ=7730.54 ns @ 4 trials
90% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=RANDOM, length=10000} 24380700.00 ns; σ=28021.86 ns @ 3 trials
91% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=RANDOM, length=10000} 861687.14 ns; σ=7389.43 ns @ 3 trials
93% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=RANDOM, length=10000} 24449950.00 ns; σ=137734.32 ns @ 3 trials
94% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=RANDOM, length=10000} 865862.78 ns; σ=6500.68 ns @ 3 trials
95% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=RANDOM, length=10000} 24474200.00 ns; σ=49916.49 ns @ 3 trials
96% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=RANDOM, length=10000} 860750.64 ns; σ=8304.85 ns @ 6 trials
98% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=RANDOM, length=10000} 24364925.00 ns; σ=72881.36 ns @ 3 trials
99% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=RANDOM, length=10000} 840977.96 ns; σ=8104.18 ns @ 10 trials

    benchmark length distribution         K       ns linear runtime
PairCounts_V1     10     SAWTOOTH         1      117 =
PairCounts_V1     10     SAWTOOTH         6      119 =
PairCounts_V1     10     SAWTOOTH        25      125 =
PairCounts_V1     10     SAWTOOTH         7      117 =
PairCounts_V1     10     SAWTOOTH 111111111      124 =
PairCounts_V1     10       RANDOM         1      121 =
PairCounts_V1     10       RANDOM         6      123 =
PairCounts_V1     10       RANDOM        25      121 =
PairCounts_V1     10       RANDOM         7      123 =
PairCounts_V1     10       RANDOM 111111111      122 =
PairCounts_V1    100     SAWTOOTH         1     3555 =
PairCounts_V1    100     SAWTOOTH         6     3616 =
PairCounts_V1    100     SAWTOOTH        25     3230 =
PairCounts_V1    100     SAWTOOTH         7     3471 =
PairCounts_V1    100     SAWTOOTH 111111111     3237 =
PairCounts_V1    100       RANDOM         1     3664 =
PairCounts_V1    100       RANDOM         6     3667 =
PairCounts_V1    100       RANDOM        25     3669 =
PairCounts_V1    100       RANDOM         7     3698 =
PairCounts_V1    100       RANDOM 111111111     3663 =
PairCounts_V1   1000     SAWTOOTH         1   253205 =
PairCounts_V1   1000     SAWTOOTH         6   252202 =
PairCounts_V1   1000     SAWTOOTH        25   254836 =
PairCounts_V1   1000     SAWTOOTH         7   336495 =
PairCounts_V1   1000     SAWTOOTH 111111111   254613 =
PairCounts_V1   1000       RANDOM         1   264752 =
PairCounts_V1   1000       RANDOM         6   268842 =
PairCounts_V1   1000       RANDOM        25   266655 =
PairCounts_V1   1000       RANDOM         7   268504 =
PairCounts_V1   1000       RANDOM 111111111   265022 =
PairCounts_V1  10000     SAWTOOTH         1 23462429 ================
PairCounts_V1  10000     SAWTOOTH         6 42566217 ==============================
PairCounts_V1  10000     SAWTOOTH        25 24271754 =================
PairCounts_V1  10000     SAWTOOTH         7 33062667 =======================
PairCounts_V1  10000     SAWTOOTH 111111111 24082113 ================
PairCounts_V1  10000       RANDOM         1 24617138 =================
PairCounts_V1  10000       RANDOM         6 24380700 =================
PairCounts_V1  10000       RANDOM        25 24449950 =================
PairCounts_V1  10000       RANDOM         7 24474200 =================
PairCounts_V1  10000       RANDOM 111111111 24364925 =================
PairCounts_V2     10     SAWTOOTH         1      411 =
PairCounts_V2     10     SAWTOOTH         6      346 =
PairCounts_V2     10     SAWTOOTH        25      344 =
PairCounts_V2     10     SAWTOOTH         7      340 =
PairCounts_V2     10     SAWTOOTH 111111111      375 =
PairCounts_V2     10       RANDOM         1      400 =
PairCounts_V2     10       RANDOM         6      405 =
PairCounts_V2     10       RANDOM        25      406 =
PairCounts_V2     10       RANDOM         7      404 =
PairCounts_V2     10       RANDOM 111111111      401 =
PairCounts_V2    100     SAWTOOTH         1     3353 =
PairCounts_V2    100     SAWTOOTH         6     2759 =
PairCounts_V2    100     SAWTOOTH        25     2630 =
PairCounts_V2    100     SAWTOOTH         7     2704 =
PairCounts_V2    100     SAWTOOTH 111111111     3463 =
PairCounts_V2    100       RANDOM         1     4783 =
PairCounts_V2    100       RANDOM         6     4830 =
PairCounts_V2    100       RANDOM        25     4800 =
PairCounts_V2    100       RANDOM         7     4867 =
PairCounts_V2    100       RANDOM 111111111     4792 =
PairCounts_V2   1000     SAWTOOTH         1    28733 =
PairCounts_V2   1000     SAWTOOTH         6    26003 =
PairCounts_V2   1000     SAWTOOTH        25    24830 =
PairCounts_V2   1000     SAWTOOTH         7    25425 =
PairCounts_V2   1000     SAWTOOTH 111111111    31176 =
PairCounts_V2   1000       RANDOM         1    53426 =
PairCounts_V2   1000       RANDOM         6    58635 =
PairCounts_V2   1000       RANDOM        25    59015 =
PairCounts_V2   1000       RANDOM         7    58601 =
PairCounts_V2   1000       RANDOM 111111111    58488 =
PairCounts_V2  10000     SAWTOOTH         1   285101 =
PairCounts_V2  10000     SAWTOOTH         6   273498 =
PairCounts_V2  10000     SAWTOOTH        25   257144 =
PairCounts_V2  10000     SAWTOOTH         7   270618 =
PairCounts_V2  10000     SAWTOOTH 111111111   296936 =
PairCounts_V2  10000       RANDOM         1   837504 =
PairCounts_V2  10000       RANDOM         6   861687 =
PairCounts_V2  10000       RANDOM        25   865863 =
PairCounts_V2  10000       RANDOM         7   860751 =
PairCounts_V2  10000       RANDOM 111111111   840978 =

vm: java
trial: 0

Process finished with exit code 0</pre>
Donc en fait Caliper créé une matrice multi-dimensionnelle des différents paramètres et pour chaque coordonnée dans cette matrice lance le test, bref un Scénario.

On voit dans les mesures faites par Caliper le temps pris par chaque méthode, l'écart type, et le nombre d'essai. Enfin dans une deuxième partie Caliper donne un synopsis des différents run et en particulier une colonne très intéressante '<strong>linear time</strong>'.

En observant le temps pris en fonction du nombre d'éléments pour chaque algo, on s'aperçoit que le temps pris par le premier algo augmente en effet par rapport au deuxième algo d'un facteur 5 qui augmente avec la taille du tableau. Bref on est loin d'un temps linéaire aka O(n).

Ce qui est aussi intéressant, c'est que le premier algo est plus efficace tant que le nombre d'élément dans le tableau d'entrée est inférieur à 100. Alors que la deuxième  qui utilise une structure plus élaboré ne montre des signes avantageux qu'à partir d'une centaine d'éléments. Ca me rappelle étrangement l'électronique ou les comportements des capacités et inductances changeant de nature lorsqu'on passe en haute fréquence.
<h2>Dans l'espace</h2>
Alors pour faire les mesures des allocations, on peut aussi utiliser caliper, mais à l'heure de l'écriture de ce blog, il faut faire quelques petites choses en plus.
<ol>
	<li>Caliper 0.5 RC1 vient avec le jar `java-allocation-instrumenter-2.0.jar` qui est sensé servir d'agent, cependant ce jar n'a pas été généré correctement pour servir d'agent. En fait il faut télécharger le jar `allocation.jar` de ce projet : <a href="http://code.google.com/p/java-allocation-instrumenter/">http://code.google.com/p/java-allocation-instrumenter/</a> daté du <a href="http://code.google.com/p/java-allocation-instrumenter/downloads/detail?name=allocation.jar&amp;can=2&amp;q=">1 er février 2012</a>.</li>
	<li>Avant de lancer le Runner en ligne de commande il faut ajouter la variable d'environnement `ALLOCATION_JAR`
<pre class="lang:sh decode:true ">export ALLOCATION_JAR=/path/to/downloaded/allocation.jar</pre>
</li>
	<li>Enfin il est possible de lancer le même benchmark avec des tests sur la mémoire :
<pre class="lang:java decode:true ">java -classpath $THE_CLASSPATH --measureMemory com.google.caliper.Runner PairCountsBenchmark</pre>
</li>
</ol>
&nbsp;
<blockquote>A noter : Ne pas renommer `allocation.jar` en autre chose, sans ça vous n'aurez pas d'instrumentation !</blockquote>
Ce qui donne le résultat suivant, quasiment la même chose, mais avec les infos sur les allocations mémoire.
<pre class="lang:default decode:true"> 0% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=SAWTOOTH, length=10} 119.06 ns; σ=1.08 ns @ 5 trials, allocated 1 instances for a total of 16B
 1% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=SAWTOOTH, length=10} 468.80 ns; σ=4.56 ns @ 3 trials, allocated 9 instances for a total of 320B
 3% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=SAWTOOTH, length=10} 115.83 ns; σ=0.46 ns @ 3 trials, allocated 1 instances for a total of 16B
 4% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=SAWTOOTH, length=10} 426.45 ns; σ=3.65 ns @ 3 trials, allocated 9 instances for a total of 320B
 5% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=SAWTOOTH, length=10} 125.06 ns; σ=0.52 ns @ 3 trials, allocated 1 instances for a total of 16B
 6% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=SAWTOOTH, length=10} 407.38 ns; σ=1.42 ns @ 3 trials, allocated 9 instances for a total of 320B
 8% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=SAWTOOTH, length=10} 116.38 ns; σ=1.11 ns @ 6 trials, allocated 1 instances for a total of 16B
 9% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=SAWTOOTH, length=10} 425.28 ns; σ=0.46 ns @ 3 trials, allocated 9 instances for a total of 320B
10% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=SAWTOOTH, length=10} 125.12 ns; σ=0.18 ns @ 3 trials, allocated 1 instances for a total of 16B
11% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=SAWTOOTH, length=10} 439.33 ns; σ=3.29 ns @ 3 trials, allocated 19 instances for a total of 560B
13% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=RANDOM, length=10} 121.67 ns; σ=0.46 ns @ 3 trials, allocated 1 instances for a total of 16B
14% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=RANDOM, length=10} 482.23 ns; σ=3.74 ns @ 3 trials, allocated 34 instances for a total of 960B
15% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=RANDOM, length=10} 120.69 ns; σ=0.71 ns @ 3 trials, allocated 1 instances for a total of 16B
16% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=RANDOM, length=10} 455.67 ns; σ=3.55 ns @ 3 trials, allocated 34 instances for a total of 960B
18% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=RANDOM, length=10} 121.64 ns; σ=0.42 ns @ 3 trials, allocated 1 instances for a total of 16B
19% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=RANDOM, length=10} 464.34 ns; σ=7.45 ns @ 10 trials, allocated 34 instances for a total of 960B
20% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=RANDOM, length=10} 120.85 ns; σ=0.38 ns @ 3 trials, allocated 1 instances for a total of 16B
21% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=RANDOM, length=10} 454.11 ns; σ=5.22 ns @ 10 trials, allocated 34 instances for a total of 960B
23% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=RANDOM, length=10} 122.14 ns; σ=1.12 ns @ 4 trials, allocated 1 instances for a total of 16B
24% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=RANDOM, length=10} 481.91 ns; σ=7.18 ns @ 10 trials, allocated 34 instances for a total of 960B
25% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=SAWTOOTH, length=100} 3530.68 ns; σ=18.40 ns @ 3 trials, allocated 1 instances for a total of 16B
26% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=SAWTOOTH, length=100} 3095.60 ns; σ=7.39 ns @ 3 trials, allocated 9 instances for a total of 320B
28% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=SAWTOOTH, length=100} 3677.07 ns; σ=36.07 ns @ 3 trials, allocated 1 instances for a total of 16B
29% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=SAWTOOTH, length=100} 2871.70 ns; σ=96.87 ns @ 10 trials, allocated 9 instances for a total of 320B
30% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=SAWTOOTH, length=100} 3253.18 ns; σ=16.46 ns @ 3 trials, allocated 1 instances for a total of 16B
31% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=SAWTOOTH, length=100} 2830.61 ns; σ=61.72 ns @ 10 trials, allocated 9 instances for a total of 320B
33% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=SAWTOOTH, length=100} 3868.67 ns; σ=36.13 ns @ 3 trials, allocated 1 instances for a total of 16B
34% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=SAWTOOTH, length=100} 2747.84 ns; σ=26.29 ns @ 3 trials, allocated 9 instances for a total of 320B
35% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=SAWTOOTH, length=100} 3240.13 ns; σ=12.72 ns @ 3 trials, allocated 1 instances for a total of 16B
36% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=SAWTOOTH, length=100} 2941.78 ns; σ=39.47 ns @ 10 trials, allocated 109 instances for a total of 2720B
38% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=RANDOM, length=100} 3703.12 ns; σ=9.85 ns @ 3 trials, allocated 1 instances for a total of 16B
39% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=RANDOM, length=100} 4598.91 ns; σ=18.33 ns @ 3 trials, allocated 308 instances for a total of 10144B
40% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=RANDOM, length=100} 3709.97 ns; σ=12.28 ns @ 3 trials, allocated 1 instances for a total of 16B
41% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=RANDOM, length=100} 4520.00 ns; σ=27.93 ns @ 3 trials, allocated 308 instances for a total of 10144B
43% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=RANDOM, length=100} 3665.28 ns; σ=13.51 ns @ 3 trials, allocated 1 instances for a total of 16B
44% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=RANDOM, length=100} 4527.80 ns; σ=35.77 ns @ 3 trials, allocated 308 instances for a total of 10144B
45% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=RANDOM, length=100} 3701.99 ns; σ=22.06 ns @ 3 trials, allocated 1 instances for a total of 16B
46% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=RANDOM, length=100} 4498.57 ns; σ=45.15 ns @ 3 trials, allocated 308 instances for a total of 10144B
48% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=RANDOM, length=100} 3729.27 ns; σ=16.84 ns @ 3 trials, allocated 1 instances for a total of 16B
49% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=RANDOM, length=100} 4579.87 ns; σ=8.15 ns @ 3 trials, allocated 308 instances for a total of 10144B
50% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=SAWTOOTH, length=1000} 254954.05 ns; σ=648.33 ns @ 3 trials, allocated 1 instances for a total of 16B
51% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=SAWTOOTH, length=1000} 29495.00 ns; σ=202.71 ns @ 3 trials, allocated 374 instances for a total of 6160B
53% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=SAWTOOTH, length=1000} 272123.84 ns; σ=1947.52 ns @ 3 trials, allocated 1 instances for a total of 16B
54% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=SAWTOOTH, length=1000} 26549.46 ns; σ=169.74 ns @ 3 trials, allocated 374 instances for a total of 6160B
55% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=SAWTOOTH, length=1000} 258246.52 ns; σ=1838.14 ns @ 3 trials, allocated 1 instances for a total of 16B
56% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=SAWTOOTH, length=1000} 25816.29 ns; σ=238.66 ns @ 3 trials, allocated 374 instances for a total of 6160B
57% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=SAWTOOTH, length=1000} 340760.25 ns; σ=714.81 ns @ 3 trials, allocated 1 instances for a total of 16B
59% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=SAWTOOTH, length=1000} 26070.26 ns; σ=186.94 ns @ 3 trials, allocated 374 instances for a total of 6160B
60% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=SAWTOOTH, length=1000} 255782.03 ns; σ=388.87 ns @ 3 trials, allocated 1 instances for a total of 16B
61% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=SAWTOOTH, length=1000} 26950.40 ns; σ=491.82 ns @ 10 trials, allocated 1374 instances for a total of 30160B
63% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=RANDOM, length=1000} 268871.49 ns; σ=2890.36 ns @ 10 trials, allocated 1 instances for a total of 16B
64% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=RANDOM, length=1000} 50888.14 ns; σ=106.59 ns @ 3 trials, allocated 3011 instances for a total of 96528B
65% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=RANDOM, length=1000} 268566.99 ns; σ=2398.41 ns @ 4 trials, allocated 1 instances for a total of 16B
66% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=RANDOM, length=1000} 63228.83 ns; σ=495.26 ns @ 3 trials, allocated 3011 instances for a total of 96528B
68% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=RANDOM, length=1000} 265538.89 ns; σ=323.95 ns @ 3 trials, allocated 1 instances for a total of 16B
69% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=RANDOM, length=1000} 51922.10 ns; σ=491.28 ns @ 3 trials, allocated 3011 instances for a total of 96528B
70% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=RANDOM, length=1000} 267048.78 ns; σ=1934.21 ns @ 3 trials, allocated 1 instances for a total of 16B
71% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=RANDOM, length=1000} 54193.80 ns; σ=526.83 ns @ 3 trials, allocated 3011 instances for a total of 96528B
73% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=RANDOM, length=1000} 270239.69 ns; σ=1291.59 ns @ 3 trials, allocated 1 instances for a total of 16B
74% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=RANDOM, length=1000} 51265.07 ns; σ=547.18 ns @ 10 trials, allocated 3011 instances for a total of 96528B
75% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=SAWTOOTH, length=10000} 23672536.59 ns; σ=131459.47 ns @ 3 trials, allocated 1 instances for a total of 16B
76% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=SAWTOOTH, length=10000} 297356.00 ns; σ=1073.95 ns @ 3 trials, allocated 9374 instances for a total of 150160B
78% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=SAWTOOTH, length=10000} 42248173.91 ns; σ=364119.70 ns @ 3 trials, allocated 1 instances for a total of 16B
79% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=SAWTOOTH, length=10000} 273661.54 ns; σ=1544.97 ns @ 3 trials, allocated 9374 instances for a total of 150160B
80% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=SAWTOOTH, length=10000} 24378375.00 ns; σ=184303.85 ns @ 3 trials, allocated 1 instances for a total of 16B
81% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=SAWTOOTH, length=10000} 269039.83 ns; σ=123.09 ns @ 3 trials, allocated 9374 instances for a total of 150160B
83% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=SAWTOOTH, length=10000} 33378571.43 ns; σ=154321.88 ns @ 3 trials, allocated 1 instances for a total of 16B
84% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=SAWTOOTH, length=10000} 266848.28 ns; σ=1354.38 ns @ 3 trials, allocated 9374 instances for a total of 150160B
85% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=SAWTOOTH, length=10000} 24348450.00 ns; σ=158682.88 ns @ 3 trials, allocated 1 instances for a total of 16B
86% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=SAWTOOTH, length=10000} 281623.08 ns; σ=257.89 ns @ 3 trials, allocated 19374 instances for a total of 390160B
88% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=1, distribution=RANDOM, length=10000} 24604800.00 ns; σ=84624.92 ns @ 3 trials, allocated 1 instances for a total of 16B
89% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=1, distribution=RANDOM, length=10000} 826805.04 ns; σ=8011.71 ns @ 7 trials, allocated 30014 instances for a total of 931264B
90% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=6, distribution=RANDOM, length=10000} 24467945.29 ns; σ=230301.47 ns @ 4 trials, allocated 1 instances for a total of 16B
91% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=6, distribution=RANDOM, length=10000} 822419.69 ns; σ=8032.73 ns @ 9 trials, allocated 30014 instances for a total of 931264B
93% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=25, distribution=RANDOM, length=10000} 24666650.00 ns; σ=65345.42 ns @ 3 trials, allocated 1 instances for a total of 16B
94% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=25, distribution=RANDOM, length=10000} 819003.80 ns; σ=7662.68 ns @ 3 trials, allocated 30014 instances for a total of 931264B
95% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=7, distribution=RANDOM, length=10000} 24432650.00 ns; σ=210910.19 ns @ 3 trials, allocated 1 instances for a total of 16B
96% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=7, distribution=RANDOM, length=10000} 835849.98 ns; σ=9613.89 ns @ 10 trials, allocated 30014 instances for a total of 931264B
98% Scenario{vm=java, trial=0, benchmark=PairCounts_V1, K=111111111, distribution=RANDOM, length=10000} 24464100.00 ns; σ=41413.99 ns @ 3 trials, allocated 1 instances for a total of 16B
99% Scenario{vm=java, trial=0, benchmark=PairCounts_V2, K=111111111, distribution=RANDOM, length=10000} 835717.46 ns; σ=24729.21 ns @ 10 trials, allocated 30013 instances for a total of 931264B

 benchmark length distribution         K instances        B       ns linear runtime
PairCounts_V1     10     SAWTOOTH         1     1.000     16.0      119 =
PairCounts_V1     10     SAWTOOTH         6     1.000     16.0      116 =
PairCounts_V1     10     SAWTOOTH        25     1.000     16.0      125 =
PairCounts_V1     10     SAWTOOTH         7     1.000     16.0      116 =
PairCounts_V1     10     SAWTOOTH 111111111     1.000     16.0      125 =
PairCounts_V1     10       RANDOM         1     1.000     16.0      122 =
PairCounts_V1     10       RANDOM         6     1.000     16.0      121 =
PairCounts_V1     10       RANDOM        25     1.000     16.0      122 =
PairCounts_V1     10       RANDOM         7     1.000     16.0      121 =
PairCounts_V1     10       RANDOM 111111111     1.000     16.0      122 =
PairCounts_V1    100     SAWTOOTH         1     1.000     16.0     3531 =
PairCounts_V1    100     SAWTOOTH         6     1.000     16.0     3677 =
PairCounts_V1    100     SAWTOOTH        25     1.000     16.0     3253 =
PairCounts_V1    100     SAWTOOTH         7     1.000     16.0     3869 =
PairCounts_V1    100     SAWTOOTH 111111111     1.000     16.0     3240 =
PairCounts_V1    100       RANDOM         1     1.000     16.0     3703 =
PairCounts_V1    100       RANDOM         6     1.000     16.0     3710 =
PairCounts_V1    100       RANDOM        25     1.000     16.0     3665 =
PairCounts_V1    100       RANDOM         7     1.000     16.0     3702 =
PairCounts_V1    100       RANDOM 111111111     1.000     16.0     3729 =
PairCounts_V1   1000     SAWTOOTH         1     1.000     16.0   254954 =
PairCounts_V1   1000     SAWTOOTH         6     1.000     16.0   272124 =
PairCounts_V1   1000     SAWTOOTH        25     1.000     16.0   258247 =
PairCounts_V1   1000     SAWTOOTH         7     1.000     16.0   340760 =
PairCounts_V1   1000     SAWTOOTH 111111111     1.000     16.0   255782 =
PairCounts_V1   1000       RANDOM         1     1.000     16.0   268871 =
PairCounts_V1   1000       RANDOM         6     1.000     16.0   268567 =
PairCounts_V1   1000       RANDOM        25     1.000     16.0   265539 =
PairCounts_V1   1000       RANDOM         7     1.000     16.0   267049 =
PairCounts_V1   1000       RANDOM 111111111     1.000     16.0   270240 =
PairCounts_V1  10000     SAWTOOTH         1     1.000     16.0 23672537 ================
PairCounts_V1  10000     SAWTOOTH         6     1.000     16.0 42248174 ==============================
PairCounts_V1  10000     SAWTOOTH        25     1.000     16.0 24378375 =================
PairCounts_V1  10000     SAWTOOTH         7     1.000     16.0 33378571 =======================
PairCounts_V1  10000     SAWTOOTH 111111111     1.000     16.0 24348450 =================
PairCounts_V1  10000       RANDOM         1     1.000     16.0 24604800 =================
PairCounts_V1  10000       RANDOM         6     1.000     16.0 24467945 =================
PairCounts_V1  10000       RANDOM        25     1.000     16.0 24666650 =================
PairCounts_V1  10000       RANDOM         7     1.000     16.0 24432650 =================
PairCounts_V1  10000       RANDOM 111111111     1.000     16.0 24464100 =================
PairCounts_V2     10     SAWTOOTH         1     9.000    320.0      469 =
PairCounts_V2     10     SAWTOOTH         6     9.000    320.0      426 =
PairCounts_V2     10     SAWTOOTH        25     9.000    320.0      407 =
PairCounts_V2     10     SAWTOOTH         7     9.000    320.0      425 =
PairCounts_V2     10     SAWTOOTH 111111111    19.000    560.0      439 =
PairCounts_V2     10       RANDOM         1    34.000    960.0      482 =
PairCounts_V2     10       RANDOM         6    34.000    960.0      456 =
PairCounts_V2     10       RANDOM        25    34.000    960.0      464 =
PairCounts_V2     10       RANDOM         7    34.000    960.0      454 =
PairCounts_V2     10       RANDOM 111111111    34.000    960.0      482 =
PairCounts_V2    100     SAWTOOTH         1     9.000    320.0     3096 =
PairCounts_V2    100     SAWTOOTH         6     9.000    320.0     2872 =
PairCounts_V2    100     SAWTOOTH        25     9.000    320.0     2831 =
PairCounts_V2    100     SAWTOOTH         7     9.000    320.0     2748 =
PairCounts_V2    100     SAWTOOTH 111111111   109.000   2720.0     2942 =
PairCounts_V2    100       RANDOM         1   308.000  10144.0     4599 =
PairCounts_V2    100       RANDOM         6   308.000  10144.0     4520 =
PairCounts_V2    100       RANDOM        25   308.000  10144.0     4528 =
PairCounts_V2    100       RANDOM         7   308.000  10144.0     4499 =
PairCounts_V2    100       RANDOM 111111111   308.000  10144.0     4580 =
PairCounts_V2   1000     SAWTOOTH         1   374.000   6160.0    29495 =
PairCounts_V2   1000     SAWTOOTH         6   374.000   6160.0    26549 =
PairCounts_V2   1000     SAWTOOTH        25   374.000   6160.0    25816 =
PairCounts_V2   1000     SAWTOOTH         7   374.000   6160.0    26070 =
PairCounts_V2   1000     SAWTOOTH 111111111  1374.000  30160.0    26950 =
PairCounts_V2   1000       RANDOM         1  3011.000  96528.0    50888 =
PairCounts_V2   1000       RANDOM         6  3011.000  96528.0    63229 =
PairCounts_V2   1000       RANDOM        25  3011.000  96528.0    51922 =
PairCounts_V2   1000       RANDOM         7  3011.000  96528.0    54194 =
PairCounts_V2   1000       RANDOM 111111111  3011.000  96528.0    51265 =
PairCounts_V2  10000     SAWTOOTH         1  9374.000 150160.0   297356 =
PairCounts_V2  10000     SAWTOOTH         6  9374.000 150160.0   273662 =
PairCounts_V2  10000     SAWTOOTH        25  9374.000 150160.0   269040 =
PairCounts_V2  10000     SAWTOOTH         7  9374.000 150160.0   266848 =
PairCounts_V2  10000     SAWTOOTH 111111111 19374.000 390160.0   281623 =
PairCounts_V2  10000       RANDOM         1 30014.000 931264.0   826805 =
PairCounts_V2  10000       RANDOM         6 30014.000 931264.0   822420 =
PairCounts_V2  10000       RANDOM        25 30014.000 931264.0   819004 =
PairCounts_V2  10000       RANDOM         7 30014.000 931264.0   835850 =
PairCounts_V2  10000       RANDOM 111111111 30013.000 931264.0   835717 =

vm: java
trial: 0

Process finished with exit code 0</pre>
C'est effectivement une information utile, la première version de l'algo, ne fait en fait qu'une seule allocation de 16B (donc en fait un seul objet), c'est à dire peanuts, on est dans du O(1) en complexité spatiale. La deuxième qui est notamment basée sur une HashMap alloue nettement plus d'objets, mais est définitivement plus rapide, on a on ici une complexité spatiale de O(n).

Comme quoi il y a potentiellement des compromis à faire dans le choix d'un algo, la rapidité ou la faible consommation mémoire peuvent venir avec un coût dans une autre dimension.
<h1>Pour conclure</h1>
<ul>
	<li>Premier point, il faut absolument être au point pour des tests d'embauche plus sur le sujet, même si je trouve limité ces tests dans leur capacité à identifier ou filtrer les bons développeurs (l'algorithmie n'est pas certainement pas le seul critère d'un individu doué), c'est toujours bien de pouvoir les reéussir !</li>
	<li>Caliper offre un outillage plutôt facile d'utilisation pour faire des microbenchmark, dans la limite de validité d'un microbenchmark, il y a plein de mise en garde sur le sujet, sur le site de Caliper [<a href="http://code.google.com/p/caliper/wiki/JavaMicrobenchmarks">1</a>][<a href="http://code.google.com/p/caliper/wiki/JavaMicrobenchmarkReviewCriteria">2</a>], Cliff Click en a parlé aussi à JavaOne [<a href="http://www.azulsystems.com/events/javaone_2002/microbenchmarks.pdf">3</a>][<a href="http://www.azulsystems.com/events/javaone_2009/session/2009_J1_Benchmark.pdf">4</a>].</li>
	<li>Quand on écrit du code c'est une bonne idée de penser à la complexité temporelle et spatiale, dont la notation pour les deux est le grand O. Caliper pourrait d'ailleurs se voir ajouter le moyen de mesurer la consommation mémoire (en lien avec la complexité spatiale). Évidement ce que je dis ne veut pas dire optimiser prématurément, mais juste de réfléchir à quel type de performance on peut s'attendre pour telle ou telle partie du code, et éventuellement de porter plus tard un effort spécifique.</li>
</ul>
A noter que Caliper offre d'autres possibilités de mesurer la performance à travers une méthode annotée par `@ArbitraryMeasurement`.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date><![CDATA[2012-08-29 00:47:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-28 22:47:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[caliper-ou-pourquoi-les-microbenchmarks-aident]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="big-o"><![CDATA[big o]]></category>
		<category domain="post_tag" nicename="cailper"><![CDATA[cailper]]></category>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="complexity"><![CDATA[complexity]]></category>
		<category domain="category" nicename="design"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="maven"><![CDATA[maven]]></category>
		<category domain="post_tag" nicename="measure"><![CDATA[measure]]></category>
		<category domain="post_tag" nicename="memory"><![CDATA[memory]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[metrics]]></category>
		<category domain="post_tag" nicename="microbenchmark"><![CDATA[microbenchmark]]></category>
		<category domain="category" nicename="performance"><![CDATA[performance]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>832</wp:comment_id>
			<wp:comment_author><![CDATA[Khanh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kmx.petals@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://jetoile.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[37.160.29.112]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-08-29 08:27:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-08-29 06:27:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Salut Brice!
pas cool pour l'entretien mais très bon article. A l'époque, j'avais rapidement parlé de Caliper et des micro benchmark si tu veux ;-)
http://jetoile.blogspot.fr/2011/03/microbenchmark-mode-d.html

A+]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>833</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.56.57.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-08-29 10:25:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-08-29 08:25:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oui effectivement ça me reviens, tu avais écris quelque chose sur le sujet.

C'est bien dommage pour le job, mais bon du coup ça motive pour s'améliorer :)

A+]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>832</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>834</wp:comment_id>
			<wp:comment_author><![CDATA[Sam Bessalah (@samklr)]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[samkiller@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[134.157.251.47]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-08-29 11:13:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-08-29 09:13:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour le post Brice.
J'avais vu Caliper en effet dans les sources de guava, mais sans vraiment chercher à l'utiliser. Et là il me semble très interessant. En général je fais ce genre de truc à la main avec des StopWatch puis graphite voir excel ou autre tableur pour analyser les temps d'execution. Mais là 
 c'est clair que je gagne beaucoup.
Quant au sujet des micro benchmarks, je pense aussi qu'ils sont interessants, mais ils ont leurs limites, car  en général un algo fait partie d'un tout, sur la JVM plusieurs facteurs viennent vite altérer ton algo (GC, logging abusif, accès disk, etc.). 
Quant aux entretiens d'embauche, je pense plus qu'il importe plus de savoir si un candidat sait raisonner de façon analytique, écrire un algo corerct, qu'il peut detecter des points de contentions. Mais pas nécessairement un gourou du sujet qui maitrise tous les algos de tri et trucs exotiques. Sauf si bien sûr l'algorithmique est le coeur de métier de la boite.

Par contre dans ton premier algo, tu parles de complexité en o(n²), à cause des nested loops. Mais ta seconde boucle ne fait presque jamais le tour complet de ta structure à cause de la condition j&lt;i. Et du coup je verrais plutôt une complexité en n*log(n).
D&#039;ailleurs si tu lis les logs de caliper sur PairCounts_V1, on est plus dans cet ordre de grandeur que sur o(n²).]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>835</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.56.57.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-08-29 17:02:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-08-29 15:02:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey merci :)

Sinon effectivement, mon idée de départ était de s'inspirer du quicksort, c'est d'ailleurs ce qui m'a perdu dans l'exo !
Bref avec les modifications que j'ai du apporter, j'ai eu l'impression que dans le pire cas on tombe limite sur O(n²), mais tu as probablement raison, on dirait bien du n log n !]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>834</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>839</wp:comment_id>
			<wp:comment_author><![CDATA[Sebastien Lorber]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lorber.sebastien@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.zenika.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2a01:e35:8b47:7ab0:e400:675a:4a04:b3c3]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-09-11 23:24:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-09-11 21:24:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Salut,

Un autre projet qui a l'air interessant pour faire des microbenchmarks en tests unitaires
http://blog.aliecom.com/contiperf/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>840</wp:comment_id>
			<wp:comment_author><![CDATA[Brice Dutheil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brice.dutheil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.arkey.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2a01:e35:1383:9a60:946d:cbb4:267:d163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-09-12 10:18:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-09-12 08:18:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Effectivement intéressant.

Le site original : http://databene.org/contiperf]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>839</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Note pour plus tard: Problème avec jVisualVM sur OSX</title>
		<link>http://www.blog2.arkey.fr/2012/10/10/note-pour-tard-quand-jvisualvm-ne-marche-pas-sur-sur-osx/</link>
		<pubDate>Wed, 10 Oct 2012 10:25:57 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=451</guid>
		<description></description>
		<content:encoded><![CDATA[Au cour d'un petit development, j'ai remarqué que mon process ne se terminait pas, une fois l'exécution de mon code terminé. Il devait y avoir soit une thread qui tournait encore, soit un deadlock quelque part, j'optais plus pour la seconde option.

Du coup je lance `jvisualvm` depuis mon terminal (celui du JDK7 update 7). Là j'ai la liste des process java qui tournent malheureusement quand je choisi d'investiguer ce process, `jvisualvm` me rapporte sur le terminal :
<pre class="lang:sh decode:true">attach: task_for_pid(7234) failed (5)</pre>
L'onglet du process s'ouvre bien dans `jvisualvm` mais impossible monitorer les threads ni faire de heap dump (au cas ou ça m'intéresserai), d'ailleurs ces sous-onglets ne sont même pas affiché.

La solution: passer avant au process java qu'il faut monitorer les paramètres suivants (en fonction des besoins)
<ul>
	<li>`<strong>-Xverify:none</strong>` : Désactive la vérification du bytecode dans la JVM. De base la JVM s'assure que le bytecode vérifie certaines règles. Bref il faut activer ce flag si vous voulez faire des thread dump ou des heap dump. Il s'agit probablement d'un bug du JDK7 ou de jVisualVM sur OSX.</li>
	<li>`<strong>-Xshare:off</strong>` : Comme son nom l'indique il s'agit de partager de la mémoire, dans les faits ça se traduit par le partage des classes déjà chargé. Sur mac cette option est active par défaut. A priori cette option pose problème pour l'attachement à un process Java, du coup en isolant la mémoire du process on peut s'en sortir.</li>
	<li>`<strong>-Dcom.sun.management.jmxremote</strong>` : Active l'export des MBean de la JVM, si vous voulez les monitorer</li>
</ul>
On dirait une réapparition dans le JDK7u7 d'un bug a priori déjà clos dans le JDK6 (pour OSX). A noter que les outils en ligne de commade tel que `jmap` peuvent aussi être affectés.

Bien entendu si j'ai loupé un truc je suis tout ouïe.

Référence : <a href="http://java.net/jira/browse/VISUALVM-326">http://java.net/jira/browse/VISUALVM-326</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>451</wp:post_id>
		<wp:post_date><![CDATA[2012-10-10 12:25:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-10-10 10:25:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[note-pour-tard-quand-jvisualvm-ne-marche-pas-sur-sur-osx]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="heap-dump"><![CDATA[heap dump]]></category>
		<category domain="post_tag" nicename="instrumentation"><![CDATA[instrumentation]]></category>
		<category domain="post_tag" nicename="jdk7"><![CDATA[jdk7]]></category>
		<category domain="post_tag" nicename="jmap"><![CDATA[jmap]]></category>
		<category domain="post_tag" nicename="jmx"><![CDATA[jmx]]></category>
		<category domain="post_tag" nicename="jstack"><![CDATA[jstack]]></category>
		<category domain="post_tag" nicename="jvisualvm"><![CDATA[jvisualvm]]></category>
		<category domain="post_tag" nicename="macosx"><![CDATA[macosx]]></category>
		<category domain="post_tag" nicename="mountain-lion"><![CDATA[mountain lion]]></category>
		<category domain="post_tag" nicename="thread-dump"><![CDATA[thread dump]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<category domain="post_tag" nicename="visualvm"><![CDATA[visualvm]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Générer le script DDL programmatiquement avec Hibernate 4.x</title>
		<link>http://www.blog2.arkey.fr/2015/08/07/generer-le-script-ddl-programmatiquement-avec-hibernate-4-x/</link>
		<pubDate>Fri, 07 Aug 2015 13:26:51 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=482</guid>
		<description></description>
		<content:encoded><![CDATA[Si par hasard votre base donnée est gérée par un véritable DBA, donc avec des scripts SQL. Mais que vous utilisez hibernate pour mapper les tables avec une configuration non triviale, modules bien découpés, package annotés, etc.... Les utilitaires comme <em><a href="http://juplo.de/hibernate4-maven-plugin/">hibernate4-maven-plugin</a></em> ne suffisent plus.

Voici un petit exemple code qui utilise le `SchemaExporter` de hibernate. <em>Le code est bien sûr à adapter à la structure du code de l'application</em>.

Le principe est de passer soit même les classes annotées ET les package annotés (typiquement par `@TypeDef` dans le `package-info.java`). Pour plus de commodité ce code utilise le framework <a href="https://github.com/ronmamo/reflections">Reflections</a> pour scanner les classes annotées par les annotations JPA `@Entity` et `@MappedSuperClass`. Par défaut le script génère les `drop statements`, mais ce comportement peut se changer à travers les options de `SchemaExport`.

[java]
import javax.persistence.Entity;
import javax.persistence.MappedSuperclass;
import org.hibernate.cfg.AvailableSettings;
import org.hibernate.cfg.Configuration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
import org.hibernate.tool.hbm2ddl.Target;
import org.junit.Test;
import org.reflections.Reflections;

public class HibernateDDLGenerator {

    public static final String ENTITIES_PACKAGE = "com.something";
    public static final String ANNOTATED_PACKAGE = "com";
    public static final String HBM_DIALECT = "org.hibernate.dialect.Oracle10gDialect";

    @Test
    public void ddl() throws Exception {
        new SchemaExport(createHibernateConfig())
                .setOutputFile("/tmp/ddl.sql")
                .setFormat(true)
                .setDelimiter(";")
                .create(Target.EXPORT);
    }

    private Configuration createHibernateConfig() {

        Configuration conf = new Configuration();

        final Reflections reflections = new Reflections(ENTITIES_PACKAGE);
        reflections.getTypesAnnotatedWith(MappedSuperclass.class).forEach(conf::addAnnotatedClass);
        reflections.getTypesAnnotatedWith(Entity.class).forEach(conf::addAnnotatedClass);

        conf.addPackage(ANNOTATED_PACKAGE) // contains @TypeDefs
            .setProperty(AvailableSettings.DIALECT, HBM_DIALECT);
        return conf;
    }
}
[/java]

gist : https://gist.github.com/bric3/370654ecad0eb81aca22]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>482</wp:post_id>
		<wp:post_date><![CDATA[2015-08-07 15:26:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-07 13:26:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generer-le-script-ddl-programmatiquement-avec-hibernate-4-x]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[architecture]]></category>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="ddl"><![CDATA[ddl]]></category>
		<category domain="post_tag" nicename="hibernate"><![CDATA[hibernate]]></category>
		<category domain="post_tag" nicename="java8"><![CDATA[java8]]></category>
		<category domain="post_tag" nicename="jpa"><![CDATA[jpa]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c2a410587a6c92fa5dbab70707099e19]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Problème de connection à Oracle</title>
		<link>http://www.blog2.arkey.fr/2015/11/06/probleme-de-connection-a-oracle/</link>
		<pubDate>Fri, 06 Nov 2015 20:33:53 +0000</pubDate>
		<dc:creator><![CDATA[brice]]></dc:creator>
		<guid isPermaLink="false">http://www.blog2.arkey.fr/?p=493</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="markdown-here-wrapper" data-md-url="http://www.blog2.arkey.fr/wp-admin/post.php?post=493&amp;action=edit">
<p style="margin: 0px 0px 1.2em !important;">Deux problèmes assez courant peuvent survenir sur les connections à une base de donnée Oracle. Ces problèmes peuvent être à l’origine de timeout sur les connections HTTP, etc…</p>
<p style="margin: 0px 0px 1.2em !important;">Ces deux problèmes touchent deux choses totalement différente, l’entropie du système et la coupure de connection par un firewall.</p>

<h2 id="entropie" style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.4em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #eeeeee;">Entropie</h2>
<p style="margin: 0px 0px 1.2em !important;">Pourquoi l’entropie ? L’entropie est une mesure de l’incertitude d’un message par rapport à celui qui le précède. Sur un système POSIX c’est <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">/dev/random</code> qui est mesuré avec l’entropie. Hors la JVM utilise ce <em>device</em> pour la génération de nombres aléatoires utilisable pour des fonctions cryptographique, <a href="http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html"><code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">SecureRandom</code></a>.</p>
<p style="margin: 0px 0px 1.2em !important;">Hors le driver Oracle 11g (possiblement dans les versions précédentes aussi) établie un lien sécurisé avec la base donnée pour protéger les échanges de credentials.</p>
<p style="margin: 0px 0px 1.2em !important;">Le problème vient du fait que la lecture dans <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">/dev/random</code> est bloquante tant que le système (Linux, BSD, etc.) considère qu’il n’y a pas assez d’entropie. Heureusement en bon lecteur de la javadoc il y a une note sur <a href="http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html"><code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">SecureRandom</code></a>.</p>

<blockquote style="margin: 1.2em 0px; border-left-width: 4px; border-left-style: solid; border-left-color: #dddddd; padding: 0px 1em; color: #777777; quotes: none;">
<p style="margin: 0px 0px 1.2em !important;">Note: Depending on the implementation, the generateSeed and nextBytes methods may block as entropy is being gathered, for example, if they need to read from /dev/random on various unix-like operating systems.</p>
</blockquote>
<h3 id="la-mauvaise-solution" style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;">La MAUVAISE solution</h3>
<p style="margin: 0px 0px 1.2em !important;">Java permet de changer la source du random avec la propriété <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">java.security.egd</code>, si on prend le <em>device</em><code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">/dev/urandom</code>. Ce device à l’inverse de <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">/dev/random</code> est non bloquant. Donc sur la ligne de comande il suffirait d’ajouter cette option pour s’en sortir ?</p>

<pre style="margin: 0px 0px 1.2em !important;" class="">-Djava.security.egd=file:/dev/./urandom</pre>
<p style="margin: 0px 0px 1.2em !important;">Non surtout pas. Pourquoi ce n’est pas une bonne solution ? Le soucis ici est qu’on abaisse le niveau de sécurité de la JVM. Que ce soit pour l’établissement de connexion à Oracle ou une connexion HTTPS, la sécurité est compromise. Comme il n’y a plus assez d’entropie un attaquant peut connaitre ou determiner quel sera les prochains nombres qui sortiront de <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">SecureRandom</code> et donc potentiellement reconstruire les éléments cryptographiques tel que les clé privé, à partir de là l’attaquant à les mains libres.</p>

<h3 id="ce-qu-il-faut-faire" style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;">Ce qu’il faut faire</h3>
<p style="margin: 0px 0px 1.2em !important;">Les OS alimente <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">/dev/random</code> généralement à partir de plusieurs sources, comme les sonde de température, l’activité du CPU, le trafic réseau, mais cela s’avère parfois pas assez efficace. L’idée est donc d’aider l’OS. Installer un démon qui ajoute de l’entropie au système. Il en existe plusieurs, celui que j’utilise est <a href="http://www.issihosts.com/haveged/"><em>HAVEGED</em></a> ; il utilise les états des composants internes des processeurs modernes pour augmenter significativement l’entropie du système. À noter il tourne dans le user space donc assez facile à installer.</p>

<h2 id="avec-un-firewall" style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.4em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #eeeeee;">Avec un Firewall</h2>
<p style="margin: 0px 0px 1.2em !important;">Suivant les infra et les besoins de légalité, il faut protéger les bases de données par un firewall. Le firewall va inspecter et protéger les équipements derrières mais il fait aussi de l’assainissement des connections TCP, il va couper les connections inactive au bout d’un certain temps.</p>

<h3 id="avec-le-pool-de-connection" style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;">Avec le pool de connection</h3>
<p style="margin: 0px 0px 1.2em !important;">En général quand on fait du connection pooling sur des connections longues (typiquement le rôle d’une Datasource) ça n’arrange pas les choses. Quand le pool donne une connection il ne sait pas forcement qu’elle à été fermé par un composant tierce (un firewall). Heureusement c’est un simple manque de configuration, il n’y a qu’à lui dire de vérifier les connections régulièrement par exemple <a href="https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html"><em>tomcat-jdbc</em></a> :</p>

<ul style="margin: 1.2em 0px; padding-left: 2em;">
	<li style="margin: 0.5em 0px;"><code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">minEvictableIdleTimeMillis</code> : The minimum amount of time an object may sit idle in the pool before it is eligible for eviction. The default value is 60000 (60 seconds).</li>
	<li style="margin: 0.5em 0px;"><code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">timeBetweenEvictionRunsMillis</code> : The number of milliseconds to sleep between runs of the idle connection validation/cleaner thread. This value should not be set under 1 second. It dictates how often we check for idle, abandoned connections, and how often we validate idle connections. The default value is 5000 (5 seconds).</li>
</ul>
<p style="margin: 0px 0px 1.2em !important;">A simple example of a datasource configuration to be adapted to your infrastructure settings.</p>

</div>
<pre class="lang:xhtml decode:true ">&lt;Resource name="Locator"
      type="javax.sql.DataSource"
      factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
      testOnBorrow="true" driverClassName="oracle.jdbc.OracleDriver"
      validationInterval="30000"
      validationQuery="SELECT 1 FROM DUAL"
      ...
      timeBetweenEvictionRunsMillis="30000"
      minEvictableIdleTimeMillis="60000"
      url="jdbc:oracle:thin:@..."
      ...
      &gt;
&lt;/Resource&gt;</pre>
<p style="margin: 0px 0px 1.2em !important;">Certains pool offrent une configuration plus fine et peut-être plus sûre comme HirakiCP. Mais c’est hors propos. Quoiqu’il en soit cette option n’est pas optimale car elle ne traite pas le problème à sa source.</p>

<div class="markdown-here-wrapper" data-md-url="http://www.blog2.arkey.fr/wp-admin/post.php?post=493&amp;action=edit">
<h3 id="tcp-keepalive" style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;">TCP Keepalive</h3>
<p style="margin: 0px 0px 1.2em !important;">TCP, le protocole réseau sur lequel transite la connection oracle, fourni un mécanisme de keepalive. Ce mécanisme va envoyer un paquet sur la connection pour que les équipements de l’infrastructure réseau dont le fameux firewall maintiennent cette connection ouverte.</p>
<p style="margin: 0px 0px 1.2em !important;">Avec Java ça se fait en passant la bonne option à l’ouverture de la socket <a href="http://docs.oracle.com/javase/7/docs/api/java/net/SocketOptions.html#SO_KEEPALIVE"><code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">SopcketOptions.SO_KEEPALIVE</code></a>. La plupart des drivers, frameworks exposent une API pour activer cette option. Avec le driver Oracle cette option s’active donc aussi.</p>
<p style="margin: 0px 0px 1.2em !important;">D’après la <a href="http://docs.oracle.com/cd/E11882_01/java.112/e16548/apxtblsh.htm#JJDBC28984">documentation Oracle</a> il y a plusieurs moyens de configurer le driver JDBC pour travailler avec un firewall.</p>
<p style="margin: 0px 0px 1.2em !important;">Dans le cas d’une configuration style <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">TNSNAMES</code> il faudra utiliser la chaine suivante <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">ENABLE=BROKEN</code> pour activer le keepalive. Par exemple :</p>

<pre style="margin: 0px 0px 1.2em !important;" class="">jdbc:oracle:thin:@(DESCRIPTION=(ENABLE=BROKEN)(ADDRESS=(PROTOCOL=tcp)(PORT=1521)(HOST=myhost))(CONNECT_DATA=(SID=orcl)))</pre>
<p style="margin: 0px 0px 1.2em !important;">Dans le cas d’une configuration sans <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">TNSNAMES</code> il faut passer la propriété <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">oracle.net.keepAlive</code> à <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">true</code> programmatiquement via les properties passée à l’API JDBC <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">java.sql.DriverManager#getConnection(java.lang.String, java.util.Properties)</code>. <em>Attention à la casse!</em> Les propriété <strong>non documentées</strong> du driver sont disponible sur la javadoc de <a href="http://download.oracle.com/otn_hosted_doc/jdeveloper/905/jdbc-javadoc/index.html?constant-values.html"><code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">oracle.jdbc.OracleConnection</code></a></p>

<h4 id="dans-tout-les-cas-configurer-le-keepalive-sur-l-os" style="margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.2em;">Dans tout les cas configurer le keepalive sur l’OS</h4>
<p style="margin: 0px 0px 1.2em !important;">Sur Linux par exemple, la <a href="http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html">documentation</a> indique comment il faut faire. Pour vérifier qu’il correspondent :</p>

<pre class="lang:sh decode:true">$ cat /proc/sys/net/ipv4/tcp_keepalive_time 
2400 
$ cat /proc/sys/net/ipv4/tcp_keepalive_intvl 
75 
$ cat /proc/sys/net/ipv4/tcp_keepalive_probes 
6</pre>
<p style="margin: 0px 0px 1.2em !important;">Ces paramètres disent la pile TCP enverra la première sonde (premier paquet de keepalive) au bout de 40min, attendra 75 millisecondes avant de renvoyer une sonde dans la limite de 6 essais. Si aucun ACK n’est reçu alors la connection est reconnue par l’OS comme fermée.</p>
<p style="margin: 0px 0px 1.2em !important;">Quoiqu’il en soit il faut régler ces paramètres en accord avec les réglages des équipement réseau.</p>
<p style="margin: 0px 0px 1.2em !important;"><em>À noter que la documention indique bien que le keepalive est un comportement à activer volontairement, d’ou l’option <code style="font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap; border: 1px solid #eaeaea; border-radius: 3px; display: inline; background-color: #f8f8f8;">SopcketOptions.SO_KEEPALIVE</code> dans la JVM.</em></p>

<blockquote style="margin: 1.2em 0px; border-left-width: 4px; border-left-style: solid; border-left-color: #dddddd; padding: 0px 1em; color: #777777; quotes: none;">
<p style="margin: 0px 0px 1.2em !important;">Remember that keepalive support, even if configured in the kernel, is not the default behavior in Linux. Programs must request keepalive control for their sockets using the setsockopt interface.</p>
</blockquote>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>493</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 22:33:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 20:33:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[probleme-de-connection-a-oracle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="entropie"><![CDATA[entropie]]></category>
		<category domain="post_tag" nicename="entropy"><![CDATA[entropy]]></category>
		<category domain="post_tag" nicename="firewall"><![CDATA[firewall]]></category>
		<category domain="post_tag" nicename="jdbc"><![CDATA[jdbc]]></category>
		<category domain="post_tag" nicename="keepalive"><![CDATA[keepalive]]></category>
		<category domain="post_tag" nicename="oracle"><![CDATA[oracle]]></category>
		<category domain="category" nicename="prod"><![CDATA[prod]]></category>
		<category domain="post_tag" nicename="random"><![CDATA[random]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_88a7b9e5fa58f4ba4da51144dbc06c2c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_634d9c27589adc20bd27321e026a3b4f]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
